
Sensor_board.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000011a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001132  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003b  00800100  00800100  000011a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000011d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  00001214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003ea0  00000000  00000000  000013d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f70  00000000  00000000  00005274  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b0a  00000000  00000000  000061e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f4  00000000  00000000  00007cf0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000089c  00000000  00000000  000080e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001311  00000000  00000000  00008980  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000278  00000000  00000000  00009c91  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
       2:	86 c2       	rjmp	.+1292   	; 0x510 <__vector_1>
       4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
       6:	f6 c1       	rjmp	.+1004   	; 0x3f4 <__vector_3>
       8:	0a c2       	rjmp	.+1044   	; 0x41e <__vector_4>
       a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
       c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
       e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
      10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
      12:	4d c8       	rjmp	.-3942   	; 0xfffff0ae <__eeprom_end+0xff7ef0ae>
      14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
      16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
      18:	ae c7       	rjmp	.+3932   	; 0xf76 <__vector_12>
      1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
      1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
      1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
      20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
      22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
      24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
      26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
      28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
      2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
      2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
      2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
      30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
      32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
      34:	11 24       	eor	r1, r1
      36:	1f be       	out	0x3f, r1	; 63
      38:	cf ef       	ldi	r28, 0xFF	; 255
      3a:	d2 e0       	ldi	r29, 0x02	; 2
      3c:	de bf       	out	0x3e, r29	; 62
      3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
      40:	21 e0       	ldi	r18, 0x01	; 1
      42:	a0 e0       	ldi	r26, 0x00	; 0
      44:	b1 e0       	ldi	r27, 0x01	; 1
      46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
      48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
      4a:	ab 33       	cpi	r26, 0x3B	; 59
      4c:	b2 07       	cpc	r27, r18
      4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
      50:	bd d6       	rcall	.+3450   	; 0xdcc <main>
      52:	6d c8       	rjmp	.-3878   	; 0xfffff12e <__eeprom_end+0xff7ef12e>

00000054 <__bad_interrupt>:
      54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <adx_setup>:
	USART_Receive(ADX_RD, VIBE);
	USART_Receive(reg, VIBE);  //device id address 0x00
	temp = USART_Receive(0x00, VIBE);
	adx_chip_select(0);
	return temp;
}
      56:	cf 93       	push	r28
      58:	c0 91 1e 01 	lds	r28, 0x011E	; 0x80011e <vibe_lo_thresh>
      5c:	54 98       	cbi	0x0a, 4	; 10
      5e:	64 e0       	ldi	r22, 0x04	; 4
      60:	8a e0       	ldi	r24, 0x0A	; 10
      62:	03 d1       	rcall	.+518    	; 0x26a <USART_Receive>
      64:	64 e0       	ldi	r22, 0x04	; 4
      66:	80 e2       	ldi	r24, 0x20	; 32
      68:	00 d1       	rcall	.+512    	; 0x26a <USART_Receive>
      6a:	64 e0       	ldi	r22, 0x04	; 4
      6c:	8c 2f       	mov	r24, r28
      6e:	fd d0       	rcall	.+506    	; 0x26a <USART_Receive>
      70:	64 e0       	ldi	r22, 0x04	; 4
      72:	80 e0       	ldi	r24, 0x00	; 0
      74:	fa d0       	rcall	.+500    	; 0x26a <USART_Receive>
      76:	54 9a       	sbi	0x0a, 4	; 10
      78:	c0 91 12 01 	lds	r28, 0x0112	; 0x800112 <vibe_hi_thresh>
      7c:	54 98       	cbi	0x0a, 4	; 10
      7e:	64 e0       	ldi	r22, 0x04	; 4
      80:	8a e0       	ldi	r24, 0x0A	; 10
      82:	f3 d0       	rcall	.+486    	; 0x26a <USART_Receive>
      84:	64 e0       	ldi	r22, 0x04	; 4
      86:	81 e2       	ldi	r24, 0x21	; 33
      88:	f0 d0       	rcall	.+480    	; 0x26a <USART_Receive>
      8a:	64 e0       	ldi	r22, 0x04	; 4
      8c:	8c 2f       	mov	r24, r28
      8e:	ed d0       	rcall	.+474    	; 0x26a <USART_Receive>
      90:	64 e0       	ldi	r22, 0x04	; 4
      92:	80 e0       	ldi	r24, 0x00	; 0
      94:	ea d0       	rcall	.+468    	; 0x26a <USART_Receive>
      96:	54 9a       	sbi	0x0a, 4	; 10
      98:	54 98       	cbi	0x0a, 4	; 10
      9a:	64 e0       	ldi	r22, 0x04	; 4
      9c:	8a e0       	ldi	r24, 0x0A	; 10
      9e:	e5 d0       	rcall	.+458    	; 0x26a <USART_Receive>
      a0:	64 e0       	ldi	r22, 0x04	; 4
      a2:	82 e2       	ldi	r24, 0x22	; 34
      a4:	e2 d0       	rcall	.+452    	; 0x26a <USART_Receive>
      a6:	64 e0       	ldi	r22, 0x04	; 4
      a8:	85 e0       	ldi	r24, 0x05	; 5
      aa:	df d0       	rcall	.+446    	; 0x26a <USART_Receive>
      ac:	64 e0       	ldi	r22, 0x04	; 4
      ae:	80 e0       	ldi	r24, 0x00	; 0
      b0:	dc d0       	rcall	.+440    	; 0x26a <USART_Receive>
      b2:	54 9a       	sbi	0x0a, 4	; 10
      b4:	54 98       	cbi	0x0a, 4	; 10
      b6:	64 e0       	ldi	r22, 0x04	; 4
      b8:	8a e0       	ldi	r24, 0x0A	; 10
      ba:	d7 d0       	rcall	.+430    	; 0x26a <USART_Receive>
      bc:	64 e0       	ldi	r22, 0x04	; 4
      be:	8c e2       	ldi	r24, 0x2C	; 44
      c0:	d4 d0       	rcall	.+424    	; 0x26a <USART_Receive>
      c2:	64 e0       	ldi	r22, 0x04	; 4
      c4:	81 e1       	ldi	r24, 0x11	; 17
      c6:	d1 d0       	rcall	.+418    	; 0x26a <USART_Receive>
      c8:	64 e0       	ldi	r22, 0x04	; 4
      ca:	80 e0       	ldi	r24, 0x00	; 0
      cc:	ce d0       	rcall	.+412    	; 0x26a <USART_Receive>
      ce:	54 9a       	sbi	0x0a, 4	; 10
      d0:	54 98       	cbi	0x0a, 4	; 10
      d2:	64 e0       	ldi	r22, 0x04	; 4
      d4:	8a e0       	ldi	r24, 0x0A	; 10
      d6:	c9 d0       	rcall	.+402    	; 0x26a <USART_Receive>
      d8:	64 e0       	ldi	r22, 0x04	; 4
      da:	87 e2       	ldi	r24, 0x27	; 39
      dc:	c6 d0       	rcall	.+396    	; 0x26a <USART_Receive>
      de:	64 e0       	ldi	r22, 0x04	; 4
      e0:	83 e0       	ldi	r24, 0x03	; 3
      e2:	c3 d0       	rcall	.+390    	; 0x26a <USART_Receive>
      e4:	64 e0       	ldi	r22, 0x04	; 4
      e6:	80 e0       	ldi	r24, 0x00	; 0
      e8:	c0 d0       	rcall	.+384    	; 0x26a <USART_Receive>
      ea:	54 9a       	sbi	0x0a, 4	; 10
      ec:	54 98       	cbi	0x0a, 4	; 10
      ee:	64 e0       	ldi	r22, 0x04	; 4
      f0:	8a e0       	ldi	r24, 0x0A	; 10
      f2:	bb d0       	rcall	.+374    	; 0x26a <USART_Receive>
      f4:	64 e0       	ldi	r22, 0x04	; 4
      f6:	8b e2       	ldi	r24, 0x2B	; 43
      f8:	b8 d0       	rcall	.+368    	; 0x26a <USART_Receive>
      fa:	64 e0       	ldi	r22, 0x04	; 4
      fc:	80 e9       	ldi	r24, 0x90	; 144
      fe:	b5 d0       	rcall	.+362    	; 0x26a <USART_Receive>
     100:	64 e0       	ldi	r22, 0x04	; 4
     102:	80 e0       	ldi	r24, 0x00	; 0
     104:	b2 d0       	rcall	.+356    	; 0x26a <USART_Receive>
     106:	54 9a       	sbi	0x0a, 4	; 10
     108:	54 98       	cbi	0x0a, 4	; 10
     10a:	64 e0       	ldi	r22, 0x04	; 4
     10c:	8a e0       	ldi	r24, 0x0A	; 10
     10e:	ad d0       	rcall	.+346    	; 0x26a <USART_Receive>
     110:	64 e0       	ldi	r22, 0x04	; 4
     112:	8d e2       	ldi	r24, 0x2D	; 45
     114:	aa d0       	rcall	.+340    	; 0x26a <USART_Receive>
     116:	64 e0       	ldi	r22, 0x04	; 4
     118:	8a e0       	ldi	r24, 0x0A	; 10
     11a:	a7 d0       	rcall	.+334    	; 0x26a <USART_Receive>
     11c:	64 e0       	ldi	r22, 0x04	; 4
     11e:	80 e0       	ldi	r24, 0x00	; 0
     120:	a4 d0       	rcall	.+328    	; 0x26a <USART_Receive>
     122:	54 9a       	sbi	0x0a, 4	; 10
     124:	cf 91       	pop	r28
     126:	08 95       	ret

00000128 <adx_read_status>:


void adx_chip_select(int select_flag)
{
	if (select_flag) {
	AVR_GPIO_PORT &= ~_BV(DB_ADX_SS); /* CS low. */
     128:	54 98       	cbi	0x0a, 4	; 10

uint8_t adx_read_status(){
	/* ADX status */
	uint8_t temp;
	adx_chip_select(1);
	USART_Receive(ADX_RD, VIBE);
     12a:	64 e0       	ldi	r22, 0x04	; 4
     12c:	8b e0       	ldi	r24, 0x0B	; 11
     12e:	9d d0       	rcall	.+314    	; 0x26a <USART_Receive>
	USART_Receive(ADX_STATUS, VIBE);  //device id address 0x00
     130:	64 e0       	ldi	r22, 0x04	; 4
     132:	8d e0       	ldi	r24, 0x0D	; 13
     134:	9a d0       	rcall	.+308    	; 0x26a <USART_Receive>
	temp = USART_Receive(0x00, VIBE);
     136:	64 e0       	ldi	r22, 0x04	; 4
     138:	80 e0       	ldi	r24, 0x00	; 0
     13a:	97 d0       	rcall	.+302    	; 0x26a <USART_Receive>
{
	if (select_flag) {
	AVR_GPIO_PORT &= ~_BV(DB_ADX_SS); /* CS low. */
	}
	else {
	AVR_GPIO_PORT |= _BV(DB_ADX_SS); /* CS high. */
     13c:	54 9a       	sbi	0x0a, 4	; 10
	USART_Receive(ADX_STATUS, VIBE);  //device id address 0x00
	temp = USART_Receive(0x00, VIBE);
    adx_chip_select(0);
	
	return temp;
}
     13e:	08 95       	ret

00000140 <mlx_get_meas>:
	USART_Receive(MLX_TEMP_AMB, LIGHT);
	mlx_chip_select(0);
}

void mlx_get_meas()
{
     140:	cf 93       	push	r28
     142:	df 93       	push	r29


void mlx_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_MLX_SS); /* CS low. */
     144:	55 98       	cbi	0x0a, 5	; 10
void mlx_get_meas()
{
	int16_t temp_t;
	/* MLX chip get temp and ambient chan values */
	mlx_chip_select(1);
	USART_Receive(MLX_RO, LIGHT);
     146:	61 e0       	ldi	r22, 0x01	; 1
     148:	83 ec       	ldi	r24, 0xC3	; 195
     14a:	8f d0       	rcall	.+286    	; 0x26a <USART_Receive>
	USART_Receive(0, LIGHT);
     14c:	61 e0       	ldi	r22, 0x01	; 1
     14e:	80 e0       	ldi	r24, 0x00	; 0
     150:	8c d0       	rcall	.+280    	; 0x26a <USART_Receive>
	//read in values
	temp_t = USART_Receive(0, LIGHT)<<8;
     152:	61 e0       	ldi	r22, 0x01	; 1
     154:	80 e0       	ldi	r24, 0x00	; 0
     156:	89 d0       	rcall	.+274    	; 0x26a <USART_Receive>
     158:	c8 2f       	mov	r28, r24
     15a:	d0 e0       	ldi	r29, 0x00	; 0
     15c:	dc 2f       	mov	r29, r28
     15e:	cc 27       	eor	r28, r28
	temp_t |= USART_Receive(0, LIGHT);
     160:	61 e0       	ldi	r22, 0x01	; 1
     162:	80 e0       	ldi	r24, 0x00	; 0
     164:	82 d0       	rcall	.+260    	; 0x26a <USART_Receive>
     166:	c8 2b       	or	r28, r24
	light =  USART_Receive(0, LIGHT)<<8;
     168:	61 e0       	ldi	r22, 0x01	; 1
     16a:	80 e0       	ldi	r24, 0x00	; 0
     16c:	7e d0       	rcall	.+252    	; 0x26a <USART_Receive>
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	98 2f       	mov	r25, r24
     172:	88 27       	eor	r24, r24
     174:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <light+0x1>
     178:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <light>
	light |= USART_Receive(0, LIGHT); 
     17c:	61 e0       	ldi	r22, 0x01	; 1
     17e:	80 e0       	ldi	r24, 0x00	; 0
     180:	74 d0       	rcall	.+232    	; 0x26a <USART_Receive>
     182:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <light>
     186:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <light+0x1>
     18a:	28 2b       	or	r18, r24
     18c:	30 93 1d 01 	sts	0x011D, r19	; 0x80011d <light+0x1>
     190:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <light>
void mlx_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_MLX_SS); /* CS low. */
	else
	AVR_GPIO_PORT |= _BV(DB_MLX_SS); /* CS high. */
     194:	55 9a       	sbi	0x0a, 5	; 10
	temp_t |= USART_Receive(0, LIGHT);
	light =  USART_Receive(0, LIGHT)<<8;
	light |= USART_Receive(0, LIGHT); 
	mlx_chip_select(0);
	//the calibrated temp output
	temperature = 30 + (((11775 + 67*(calib2-32))-temp_t)/(67+(calib1-16)));
     196:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <calib2>
     19a:	60 91 33 01 	lds	r22, 0x0133	; 0x800133 <calib1>
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	20 52       	subi	r18, 0x20	; 32
     1a2:	31 09       	sbc	r19, r1
     1a4:	c9 01       	movw	r24, r18
     1a6:	88 0f       	add	r24, r24
     1a8:	99 1f       	adc	r25, r25
     1aa:	82 95       	swap	r24
     1ac:	92 95       	swap	r25
     1ae:	90 7f       	andi	r25, 0xF0	; 240
     1b0:	98 27       	eor	r25, r24
     1b2:	80 7f       	andi	r24, 0xF0	; 240
     1b4:	98 27       	eor	r25, r24
     1b6:	82 0f       	add	r24, r18
     1b8:	93 1f       	adc	r25, r19
     1ba:	88 0f       	add	r24, r24
     1bc:	99 1f       	adc	r25, r25
     1be:	82 0f       	add	r24, r18
     1c0:	93 1f       	adc	r25, r19
     1c2:	81 50       	subi	r24, 0x01	; 1
     1c4:	92 4d       	sbci	r25, 0xD2	; 210
     1c6:	8c 1b       	sub	r24, r28
     1c8:	9d 0b       	sbc	r25, r29
     1ca:	70 e0       	ldi	r23, 0x00	; 0
     1cc:	6d 5c       	subi	r22, 0xCD	; 205
     1ce:	7f 4f       	sbci	r23, 0xFF	; 255
     1d0:	87 d7       	rcall	.+3854   	; 0x10e0 <__divmodhi4>
     1d2:	62 5e       	subi	r22, 0xE2	; 226
     1d4:	7f 4f       	sbci	r23, 0xFF	; 255
     1d6:	70 93 1b 01 	sts	0x011B, r23	; 0x80011b <temperature+0x1>
     1da:	60 93 1a 01 	sts	0x011A, r22	; 0x80011a <temperature>
}
     1de:	df 91       	pop	r29
     1e0:	cf 91       	pop	r28
     1e2:	08 95       	ret

000001e4 <USART_Receive.constprop.2>:
	USART_Receive(SSP_READ, SSP);
	USART_Receive(INTFA, SSP);
	temp = USART_Receive(0x00, SSP);
	ssp_chip_select(0);
	return temp;
}
     1e4:	91 e0       	ldi	r25, 0x01	; 1
     1e6:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <usart_to>
     1ea:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     1ee:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
     1f2:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     1f6:	92 60       	ori	r25, 0x02	; 2
     1f8:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     1fc:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <usart_to>
     200:	99 23       	and	r25, r25
     202:	49 f1       	breq	.+82     	; 0x256 <USART_Receive.constprop.2+0x72>
     204:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     208:	95 ff       	sbrs	r25, 5
     20a:	fc cf       	rjmp	.-8      	; 0x204 <USART_Receive.constprop.2+0x20>
     20c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
     210:	81 e0       	ldi	r24, 0x01	; 1
     212:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <usart_to>
     216:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     21a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
     21e:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     222:	82 60       	ori	r24, 0x02	; 2
     224:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     228:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <usart_to>
     22c:	88 23       	and	r24, r24
     22e:	49 f0       	breq	.+18     	; 0x242 <USART_Receive.constprop.2+0x5e>
     230:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     234:	87 ff       	sbrs	r24, 7
     236:	fc cf       	rjmp	.-8      	; 0x230 <USART_Receive.constprop.2+0x4c>
     238:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <ssp_fault>
     23c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
     240:	08 95       	ret
     242:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     246:	87 fd       	sbrc	r24, 7
     248:	f9 cf       	rjmp	.-14     	; 0x23c <USART_Receive.constprop.2+0x58>
     24a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <ssp_fault>
     24e:	8f 5f       	subi	r24, 0xFF	; 255
     250:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <ssp_fault>
     254:	f3 cf       	rjmp	.-26     	; 0x23c <USART_Receive.constprop.2+0x58>
     256:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     25a:	95 fd       	sbrc	r25, 5
     25c:	d7 cf       	rjmp	.-82     	; 0x20c <USART_Receive.constprop.2+0x28>
     25e:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <ssp_fault>
     262:	9f 5f       	subi	r25, 0xFF	; 255
     264:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <ssp_fault>
     268:	d1 cf       	rjmp	.-94     	; 0x20c <USART_Receive.constprop.2+0x28>

0000026a <USART_Receive>:
     26a:	91 e0       	ldi	r25, 0x01	; 1
     26c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <usart_to>
     270:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     274:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
     278:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     27c:	92 60       	ori	r25, 0x02	; 2
     27e:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     282:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <usart_to>
     286:	99 23       	and	r25, r25
     288:	e1 f1       	breq	.+120    	; 0x302 <__stack+0x3>
     28a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     28e:	95 ff       	sbrs	r25, 5
     290:	fc cf       	rjmp	.-8      	; 0x28a <USART_Receive+0x20>
     292:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <usart_to>
     29c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     2a0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
     2a4:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     2a8:	82 60       	ori	r24, 0x02	; 2
     2aa:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     2ae:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <usart_to>
     2b2:	88 23       	and	r24, r24
     2b4:	91 f0       	breq	.+36     	; 0x2da <USART_Receive+0x70>
     2b6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     2ba:	87 ff       	sbrs	r24, 7
     2bc:	fc cf       	rjmp	.-8      	; 0x2b6 <USART_Receive+0x4c>
     2be:	64 30       	cpi	r22, 0x04	; 4
     2c0:	b9 f1       	breq	.+110    	; 0x330 <__stack+0x31>
     2c2:	08 f4       	brcc	.+2      	; 0x2c6 <USART_Receive+0x5c>
     2c4:	46 c0       	rjmp	.+140    	; 0x352 <__stack+0x53>
     2c6:	60 31       	cpi	r22, 0x10	; 16
     2c8:	71 f1       	breq	.+92     	; 0x326 <__stack+0x27>
     2ca:	60 32       	cpi	r22, 0x20	; 32
     2cc:	09 f0       	breq	.+2      	; 0x2d0 <USART_Receive+0x66>
     2ce:	58 c0       	rjmp	.+176    	; 0x380 <__stack+0x81>
     2d0:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <n25_fault>
     2d4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
     2d8:	08 95       	ret
     2da:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     2de:	87 fd       	sbrc	r24, 7
     2e0:	f9 cf       	rjmp	.-14     	; 0x2d4 <USART_Receive+0x6a>
     2e2:	64 30       	cpi	r22, 0x04	; 4
     2e4:	09 f4       	brne	.+2      	; 0x2e8 <USART_Receive+0x7e>
     2e6:	5d c0       	rjmp	.+186    	; 0x3a2 <__stack+0xa3>
     2e8:	08 f4       	brcc	.+2      	; 0x2ec <USART_Receive+0x82>
     2ea:	42 c0       	rjmp	.+132    	; 0x370 <__stack+0x71>
     2ec:	60 31       	cpi	r22, 0x10	; 16
     2ee:	59 f1       	breq	.+86     	; 0x346 <__stack+0x47>
     2f0:	60 32       	cpi	r22, 0x20	; 32
     2f2:	09 f0       	breq	.+2      	; 0x2f6 <USART_Receive+0x8c>
     2f4:	5c c0       	rjmp	.+184    	; 0x3ae <__stack+0xaf>
     2f6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <n25_fault>
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <n25_fault>
     300:	e9 cf       	rjmp	.-46     	; 0x2d4 <USART_Receive+0x6a>
     302:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     306:	95 fd       	sbrc	r25, 5
     308:	c4 cf       	rjmp	.-120    	; 0x292 <USART_Receive+0x28>
     30a:	64 30       	cpi	r22, 0x04	; 4
     30c:	09 f4       	brne	.+2      	; 0x310 <__stack+0x11>
     30e:	43 c0       	rjmp	.+134    	; 0x396 <__stack+0x97>
     310:	38 f1       	brcs	.+78     	; 0x360 <__stack+0x61>
     312:	60 31       	cpi	r22, 0x10	; 16
     314:	91 f0       	breq	.+36     	; 0x33a <__stack+0x3b>
     316:	60 32       	cpi	r22, 0x20	; 32
     318:	c1 f5       	brne	.+112    	; 0x38a <__stack+0x8b>
     31a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <n25_fault>
     31e:	9f 5f       	subi	r25, 0xFF	; 255
     320:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <n25_fault>
     324:	b6 cf       	rjmp	.-148    	; 0x292 <USART_Receive+0x28>
     326:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <ssp_fault>
     32a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
     32e:	08 95       	ret
     330:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <vibe_fault>
     334:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
     338:	08 95       	ret
     33a:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <ssp_fault>
     33e:	9f 5f       	subi	r25, 0xFF	; 255
     340:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <ssp_fault>
     344:	a6 cf       	rjmp	.-180    	; 0x292 <USART_Receive+0x28>
     346:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <ssp_fault>
     34a:	8f 5f       	subi	r24, 0xFF	; 255
     34c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <ssp_fault>
     350:	c1 cf       	rjmp	.-126    	; 0x2d4 <USART_Receive+0x6a>
     352:	61 30       	cpi	r22, 0x01	; 1
     354:	a9 f4       	brne	.+42     	; 0x380 <__stack+0x81>
     356:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <light_fault>
     35a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
     35e:	08 95       	ret
     360:	61 30       	cpi	r22, 0x01	; 1
     362:	99 f4       	brne	.+38     	; 0x38a <__stack+0x8b>
     364:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <light_fault>
     368:	9f 5f       	subi	r25, 0xFF	; 255
     36a:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <light_fault>
     36e:	91 cf       	rjmp	.-222    	; 0x292 <USART_Receive+0x28>
     370:	61 30       	cpi	r22, 0x01	; 1
     372:	e9 f4       	brne	.+58     	; 0x3ae <__stack+0xaf>
     374:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <light_fault>
     378:	8f 5f       	subi	r24, 0xFF	; 255
     37a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <light_fault>
     37e:	aa cf       	rjmp	.-172    	; 0x2d4 <USART_Receive+0x6a>
     380:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
     384:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
     388:	08 95       	ret
     38a:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
     38e:	9f 5f       	subi	r25, 0xFF	; 255
     390:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
     394:	7e cf       	rjmp	.-260    	; 0x292 <USART_Receive+0x28>
     396:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <vibe_fault>
     39a:	9f 5f       	subi	r25, 0xFF	; 255
     39c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <vibe_fault>
     3a0:	78 cf       	rjmp	.-272    	; 0x292 <USART_Receive+0x28>
     3a2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <vibe_fault>
     3a6:	8f 5f       	subi	r24, 0xFF	; 255
     3a8:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <vibe_fault>
     3ac:	93 cf       	rjmp	.-218    	; 0x2d4 <USART_Receive+0x6a>
     3ae:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     3b2:	8f 5f       	subi	r24, 0xFF	; 255
     3b4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
     3b8:	8d cf       	rjmp	.-230    	; 0x2d4 <USART_Receive+0x6a>

000003ba <ssp_int_reset>:
     3ba:	57 98       	cbi	0x0a, 7	; 10
     3bc:	81 e4       	ldi	r24, 0x41	; 65
     3be:	12 df       	rcall	.-476    	; 0x1e4 <USART_Receive.constprop.2>
     3c0:	80 e1       	ldi	r24, 0x10	; 16
     3c2:	10 df       	rcall	.-480    	; 0x1e4 <USART_Receive.constprop.2>
     3c4:	80 e0       	ldi	r24, 0x00	; 0
     3c6:	0e df       	rcall	.-484    	; 0x1e4 <USART_Receive.constprop.2>
     3c8:	57 9a       	sbi	0x0a, 7	; 10
     3ca:	08 95       	ret

000003cc <ssp_write>:

void
ssp_write(uint8_t value)
{
     3cc:	cf 93       	push	r28
     3ce:	c8 2f       	mov	r28, r24

void
ssp_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_SSP_SS); /* CS low. */
     3d0:	57 98       	cbi	0x0a, 7	; 10
ssp_write(uint8_t value)
{
	/* set for write and set I/O dir. register per board design */
	//ssp_out |= value;
	ssp_chip_select(1);
	USART_Receive(SSP_WRITE, SSP);
     3d2:	80 e4       	ldi	r24, 0x40	; 64
     3d4:	07 df       	rcall	.-498    	; 0x1e4 <USART_Receive.constprop.2>
	USART_Receive(GPIOA, SSP);
     3d6:	82 e1       	ldi	r24, 0x12	; 18
     3d8:	05 df       	rcall	.-502    	; 0x1e4 <USART_Receive.constprop.2>
	USART_Receive(value, SSP);
     3da:	8c 2f       	mov	r24, r28
     3dc:	03 df       	rcall	.-506    	; 0x1e4 <USART_Receive.constprop.2>
ssp_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_SSP_SS); /* CS low. */
	else
	AVR_GPIO_PORT |= _BV(DB_SSP_SS); /* CS high. */
     3de:	57 9a       	sbi	0x0a, 7	; 10

void
ssp_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_SSP_SS); /* CS low. */
     3e0:	57 98       	cbi	0x0a, 7	; 10
	USART_Receive(SSP_WRITE, SSP);
	USART_Receive(GPIOA, SSP);
	USART_Receive(value, SSP);
	ssp_chip_select(0);
	ssp_chip_select(1);
	USART_Receive(SSP_WRITE, SSP);
     3e2:	80 e4       	ldi	r24, 0x40	; 64
     3e4:	ff de       	rcall	.-514    	; 0x1e4 <USART_Receive.constprop.2>
	USART_Receive(OLATA, SSP);
     3e6:	84 e1       	ldi	r24, 0x14	; 20
     3e8:	fd de       	rcall	.-518    	; 0x1e4 <USART_Receive.constprop.2>
	USART_Receive(value, SSP);
     3ea:	8c 2f       	mov	r24, r28
     3ec:	fb de       	rcall	.-522    	; 0x1e4 <USART_Receive.constprop.2>
ssp_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_SSP_SS); /* CS low. */
	else
	AVR_GPIO_PORT |= _BV(DB_SSP_SS); /* CS high. */
     3ee:	57 9a       	sbi	0x0a, 7	; 10
	ssp_chip_select(1);
	USART_Receive(SSP_WRITE, SSP);
	USART_Receive(OLATA, SSP);
	USART_Receive(value, SSP);
	ssp_chip_select(0);
}
     3f0:	cf 91       	pop	r28
     3f2:	08 95       	ret

000003f4 <__vector_3>:
	start_bit = 1;
	sending = 1;
	TCNT0 = 0x00;						//reset counter to avoid glitch on next rcv char.
	TIMSK0 |= (1<<OCIE0A);
	while(sending);
}
     3f4:	1f 92       	push	r1
     3f6:	0f 92       	push	r0
     3f8:	0f b6       	in	r0, 0x3f	; 63
     3fa:	0f 92       	push	r0
     3fc:	11 24       	eor	r1, r1
     3fe:	cf 93       	push	r28
     400:	df 93       	push	r29
     402:	00 d0       	rcall	.+0      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     404:	cd b7       	in	r28, 0x3d	; 61
     406:	de b7       	in	r29, 0x3e	; 62
     408:	1a 82       	std	Y+2, r1	; 0x02
     40a:	19 82       	std	Y+1, r1	; 0x01
     40c:	0f 90       	pop	r0
     40e:	0f 90       	pop	r0
     410:	df 91       	pop	r29
     412:	cf 91       	pop	r28
     414:	0f 90       	pop	r0
     416:	0f be       	out	0x3f, r0	; 63
     418:	0f 90       	pop	r0
     41a:	1f 90       	pop	r1
     41c:	18 95       	reti

0000041e <__vector_4>:
     41e:	1f 92       	push	r1
     420:	0f 92       	push	r0
     422:	0f b6       	in	r0, 0x3f	; 63
     424:	0f 92       	push	r0
     426:	11 24       	eor	r1, r1
     428:	8f 93       	push	r24
     42a:	9f 93       	push	r25
     42c:	ef 93       	push	r30
     42e:	ff 93       	push	r31
     430:	16 bc       	out	0x26, r1	; 38
     432:	ec e6       	ldi	r30, 0x6C	; 108
     434:	f0 e0       	ldi	r31, 0x00	; 0
     436:	80 81       	ld	r24, Z
     438:	87 7f       	andi	r24, 0xF7	; 247
     43a:	80 83       	st	Z, r24
     43c:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <rcv_error_stop>
     440:	81 e0       	ldi	r24, 0x01	; 1
     442:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <start_bit>
     446:	99 e0       	ldi	r25, 0x09	; 9
     448:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <rcv_bit_count>
     44c:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <rcv_char>
     450:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <receiving>
     454:	ee e6       	ldi	r30, 0x6E	; 110
     456:	f0 e0       	ldi	r31, 0x00	; 0
     458:	80 81       	ld	r24, Z
     45a:	82 60       	ori	r24, 0x02	; 2
     45c:	80 83       	st	Z, r24
     45e:	ff 91       	pop	r31
     460:	ef 91       	pop	r30
     462:	9f 91       	pop	r25
     464:	8f 91       	pop	r24
     466:	0f 90       	pop	r0
     468:	0f be       	out	0x3f, r0	; 63
     46a:	0f 90       	pop	r0
     46c:	1f 90       	pop	r1
     46e:	18 95       	reti

00000470 <mkm_wipe>:
     470:	13 9a       	sbi	0x02, 3	; 2
     472:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__EEPROM_REGION_LENGTH__+0x7f0064>
     476:	8b 7f       	andi	r24, 0xFB	; 251
     478:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__EEPROM_REGION_LENGTH__+0x7f0064>
     47c:	89 e0       	ldi	r24, 0x09	; 9
     47e:	8d b9       	out	0x0d, r24	; 13
     480:	48 9a       	sbi	0x09, 0	; 9
     482:	81 e5       	ldi	r24, 0x51	; 81
     484:	8c bd       	out	0x2c, r24	; 44
     486:	15 9a       	sbi	0x02, 5	; 2
     488:	17 9a       	sbi	0x02, 7	; 2
     48a:	16 98       	cbi	0x02, 6	; 2
     48c:	15 98       	cbi	0x02, 5	; 2
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	8e bd       	out	0x2e, r24	; 46
     492:	0d b4       	in	r0, 0x2d	; 45
     494:	07 fe       	sbrs	r0, 7
     496:	fd cf       	rjmp	.-6      	; 0x492 <mkm_wipe+0x22>
     498:	80 e4       	ldi	r24, 0x40	; 64
     49a:	8e bd       	out	0x2e, r24	; 46
     49c:	0d b4       	in	r0, 0x2d	; 45
     49e:	07 fe       	sbrs	r0, 7
     4a0:	fd cf       	rjmp	.-6      	; 0x49c <mkm_wipe+0x2c>
     4a2:	15 9a       	sbi	0x02, 5	; 2
     4a4:	15 98       	cbi	0x02, 5	; 2
     4a6:	82 e0       	ldi	r24, 0x02	; 2
     4a8:	8e bd       	out	0x2e, r24	; 46
     4aa:	0d b4       	in	r0, 0x2d	; 45
     4ac:	07 fe       	sbrs	r0, 7
     4ae:	fd cf       	rjmp	.-6      	; 0x4aa <mkm_wipe+0x3a>
     4b0:	1e bc       	out	0x2e, r1	; 46
     4b2:	0d b4       	in	r0, 0x2d	; 45
     4b4:	07 fe       	sbrs	r0, 7
     4b6:	fd cf       	rjmp	.-6      	; 0x4b2 <mkm_wipe+0x42>
     4b8:	1e bc       	out	0x2e, r1	; 46
     4ba:	0d b4       	in	r0, 0x2d	; 45
     4bc:	07 fe       	sbrs	r0, 7
     4be:	fd cf       	rjmp	.-6      	; 0x4ba <mkm_wipe+0x4a>
     4c0:	8f ef       	ldi	r24, 0xFF	; 255
     4c2:	9f e1       	ldi	r25, 0x1F	; 31
     4c4:	1e bc       	out	0x2e, r1	; 46
     4c6:	0d b4       	in	r0, 0x2d	; 45
     4c8:	07 fe       	sbrs	r0, 7
     4ca:	fd cf       	rjmp	.-6      	; 0x4c6 <mkm_wipe+0x56>
     4cc:	01 97       	sbiw	r24, 0x01	; 1
     4ce:	d1 f7       	brne	.-12     	; 0x4c4 <mkm_wipe+0x54>
     4d0:	15 9a       	sbi	0x02, 5	; 2
     4d2:	16 9a       	sbi	0x02, 6	; 2
     4d4:	17 98       	cbi	0x02, 7	; 2
     4d6:	8c b5       	in	r24, 0x2c	; 44
     4d8:	8f 7b       	andi	r24, 0xBF	; 191
     4da:	8c bd       	out	0x2c, r24	; 44
     4dc:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__EEPROM_REGION_LENGTH__+0x7f0064>
     4e0:	84 60       	ori	r24, 0x04	; 4
     4e2:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__EEPROM_REGION_LENGTH__+0x7f0064>
     4e6:	13 98       	cbi	0x02, 3	; 2
     4e8:	92 b1       	in	r25, 0x02	; 2
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	98 27       	eor	r25, r24
     4ee:	92 b9       	out	0x02, r25	; 2
     4f0:	92 b1       	in	r25, 0x02	; 2
     4f2:	98 27       	eor	r25, r24
     4f4:	92 b9       	out	0x02, r25	; 2
     4f6:	92 b1       	in	r25, 0x02	; 2
     4f8:	98 27       	eor	r25, r24
     4fa:	92 b9       	out	0x02, r25	; 2
     4fc:	92 b1       	in	r25, 0x02	; 2
     4fe:	98 27       	eor	r25, r24
     500:	92 b9       	out	0x02, r25	; 2
     502:	92 b1       	in	r25, 0x02	; 2
     504:	98 27       	eor	r25, r24
     506:	92 b9       	out	0x02, r25	; 2
     508:	92 b1       	in	r25, 0x02	; 2
     50a:	89 27       	eor	r24, r25
     50c:	82 b9       	out	0x02, r24	; 2
     50e:	08 95       	ret

00000510 <__vector_1>:
     510:	1f 92       	push	r1
     512:	0f 92       	push	r0
     514:	0f b6       	in	r0, 0x3f	; 63
     516:	0f 92       	push	r0
     518:	11 24       	eor	r1, r1
     51a:	2f 93       	push	r18
     51c:	3f 93       	push	r19
     51e:	4f 93       	push	r20
     520:	5f 93       	push	r21
     522:	6f 93       	push	r22
     524:	7f 93       	push	r23
     526:	8f 93       	push	r24
     528:	9f 93       	push	r25
     52a:	af 93       	push	r26
     52c:	bf 93       	push	r27
     52e:	ef 93       	push	r30
     530:	ff 93       	push	r31
     532:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <case_enable>
     536:	88 23       	and	r24, r24
     538:	21 f0       	breq	.+8      	; 0x542 <__vector_1+0x32>
     53a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <configured>
     53e:	85 35       	cpi	r24, 0x55	; 85
     540:	89 f0       	breq	.+34     	; 0x564 <__vector_1+0x54>
     542:	ff 91       	pop	r31
     544:	ef 91       	pop	r30
     546:	bf 91       	pop	r27
     548:	af 91       	pop	r26
     54a:	9f 91       	pop	r25
     54c:	8f 91       	pop	r24
     54e:	7f 91       	pop	r23
     550:	6f 91       	pop	r22
     552:	5f 91       	pop	r21
     554:	4f 91       	pop	r20
     556:	3f 91       	pop	r19
     558:	2f 91       	pop	r18
     55a:	0f 90       	pop	r0
     55c:	0f be       	out	0x3f, r0	; 63
     55e:	0f 90       	pop	r0
     560:	1f 90       	pop	r1
     562:	18 95       	reti
     564:	f8 94       	cli
     566:	84 df       	rcall	.-248    	; 0x470 <mkm_wipe>
     568:	88 e0       	ldi	r24, 0x08	; 8
     56a:	30 df       	rcall	.-416    	; 0x3cc <ssp_write>
     56c:	26 df       	rcall	.-436    	; 0x3ba <ssp_int_reset>
     56e:	17 9a       	sbi	0x02, 7	; 2
     570:	16 98       	cbi	0x02, 6	; 2
     572:	78 94       	sei
     574:	e6 cf       	rjmp	.-52     	; 0x542 <__vector_1+0x32>

00000576 <process_message>:
     576:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <rcv_char>
     57a:	81 34       	cpi	r24, 0x41	; 65
     57c:	09 f4       	brne	.+2      	; 0x580 <process_message+0xa>
     57e:	cd c2       	rjmp	.+1434   	; 0xb1a <process_message+0x5a4>
     580:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <rcv_char>
     584:	82 34       	cpi	r24, 0x42	; 66
     586:	09 f4       	brne	.+2      	; 0x58a <process_message+0x14>
     588:	9a c2       	rjmp	.+1332   	; 0xabe <process_message+0x548>
     58a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <rcv_char>
     58e:	83 34       	cpi	r24, 0x43	; 67
     590:	09 f4       	brne	.+2      	; 0x594 <process_message+0x1e>
     592:	67 c2       	rjmp	.+1230   	; 0xa62 <process_message+0x4ec>
     594:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <rcv_char>
     598:	84 34       	cpi	r24, 0x44	; 68
     59a:	09 f4       	brne	.+2      	; 0x59e <process_message+0x28>
     59c:	f5 c1       	rjmp	.+1002   	; 0x988 <process_message+0x412>
     59e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <rcv_char>
     5a2:	85 34       	cpi	r24, 0x45	; 69
     5a4:	09 f4       	brne	.+2      	; 0x5a8 <process_message+0x32>
     5a6:	93 c1       	rjmp	.+806    	; 0x8ce <process_message+0x358>
     5a8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <rcv_char>
     5ac:	86 34       	cpi	r24, 0x46	; 70
     5ae:	09 f4       	brne	.+2      	; 0x5b2 <process_message+0x3c>
     5b0:	30 c1       	rjmp	.+608    	; 0x812 <process_message+0x29c>
     5b2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <rcv_char>
     5b6:	87 34       	cpi	r24, 0x47	; 71
     5b8:	09 f4       	brne	.+2      	; 0x5bc <process_message+0x46>
     5ba:	e6 c0       	rjmp	.+460    	; 0x788 <process_message+0x212>
     5bc:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <rcv_char>
     5c0:	88 34       	cpi	r24, 0x48	; 72
     5c2:	09 f4       	brne	.+2      	; 0x5c6 <process_message+0x50>
     5c4:	9c c0       	rjmp	.+312    	; 0x6fe <process_message+0x188>
     5c6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <rcv_char>
     5ca:	8a 34       	cpi	r24, 0x4A	; 74
     5cc:	09 f4       	brne	.+2      	; 0x5d0 <process_message+0x5a>
     5ce:	7b c0       	rjmp	.+246    	; 0x6c6 <process_message+0x150>
     5d0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <rcv_char>
     5d4:	8c 34       	cpi	r24, 0x4C	; 76
     5d6:	09 f1       	breq	.+66     	; 0x61a <process_message+0xa4>
     5d8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <rcv_char>
     5dc:	8b 34       	cpi	r24, 0x4B	; 75
     5de:	09 f0       	breq	.+2      	; 0x5e2 <process_message+0x6c>
     5e0:	08 95       	ret
     5e2:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     5e6:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <tamper_detected>
     5ea:	81 30       	cpi	r24, 0x01	; 1
     5ec:	09 f4       	brne	.+2      	; 0x5f0 <process_message+0x7a>
     5ee:	00 c3       	rjmp	.+1536   	; 0xbf0 <process_message+0x67a>
     5f0:	84 e1       	ldi	r24, 0x14	; 20
     5f2:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tx_char>
     5f6:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <tx_bit_count>
     5fa:	81 e0       	ldi	r24, 0x01	; 1
     5fc:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <start_bit>
     600:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <sending>
     604:	16 bc       	out	0x26, r1	; 38
     606:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     60a:	82 60       	ori	r24, 0x02	; 2
     60c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     610:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <sending>
     614:	81 11       	cpse	r24, r1
     616:	fc cf       	rjmp	.-8      	; 0x610 <process_message+0x9a>
     618:	08 95       	ret
     61a:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     61e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <fault_code>
     622:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tx_char>
     626:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <tx_bit_count>
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <start_bit>
     630:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <sending>
     634:	16 bc       	out	0x26, r1	; 38
     636:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     63a:	82 60       	ori	r24, 0x02	; 2
     63c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     640:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <sending>
     644:	81 11       	cpse	r24, r1
     646:	fc cf       	rjmp	.-8      	; 0x640 <process_message+0xca>
     648:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <fault_value1>
     64c:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tx_char>
     650:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <tx_bit_count>
     654:	81 e0       	ldi	r24, 0x01	; 1
     656:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <start_bit>
     65a:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <sending>
     65e:	16 bc       	out	0x26, r1	; 38
     660:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     664:	82 60       	ori	r24, 0x02	; 2
     666:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     66a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <sending>
     66e:	81 11       	cpse	r24, r1
     670:	fc cf       	rjmp	.-8      	; 0x66a <process_message+0xf4>
     672:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <fault_value2>
     676:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tx_char>
     67a:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <tx_bit_count>
     67e:	81 e0       	ldi	r24, 0x01	; 1
     680:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <start_bit>
     684:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <sending>
     688:	16 bc       	out	0x26, r1	; 38
     68a:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     68e:	82 60       	ori	r24, 0x02	; 2
     690:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     694:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <sending>
     698:	81 11       	cpse	r24, r1
     69a:	fc cf       	rjmp	.-8      	; 0x694 <process_message+0x11e>
     69c:	84 e1       	ldi	r24, 0x14	; 20
     69e:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tx_char>
     6a2:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <tx_bit_count>
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <start_bit>
     6ac:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <sending>
     6b0:	16 bc       	out	0x26, r1	; 38
     6b2:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     6b6:	82 60       	ori	r24, 0x02	; 2
     6b8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     6bc:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <sending>
     6c0:	81 11       	cpse	r24, r1
     6c2:	fc cf       	rjmp	.-8      	; 0x6bc <process_message+0x146>
     6c4:	89 cf       	rjmp	.-238    	; 0x5d8 <process_message+0x62>
     6c6:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     6ca:	16 9a       	sbi	0x02, 6	; 2
     6cc:	17 98       	cbi	0x02, 7	; 2
     6ce:	85 e5       	ldi	r24, 0x55	; 85
     6d0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <configured>
     6d4:	84 e1       	ldi	r24, 0x14	; 20
     6d6:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tx_char>
     6da:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <tx_bit_count>
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <start_bit>
     6e4:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <sending>
     6e8:	16 bc       	out	0x26, r1	; 38
     6ea:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     6ee:	82 60       	ori	r24, 0x02	; 2
     6f0:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     6f4:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <sending>
     6f8:	81 11       	cpse	r24, r1
     6fa:	fc cf       	rjmp	.-8      	; 0x6f4 <process_message+0x17e>
     6fc:	69 cf       	rjmp	.-302    	; 0x5d0 <process_message+0x5a>
     6fe:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     702:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <temperature>
     706:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <temperature+0x1>
     70a:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <tx_char>
     70e:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <tx_bit_count>
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <start_bit>
     718:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <sending>
     71c:	16 bc       	out	0x26, r1	; 38
     71e:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     722:	82 60       	ori	r24, 0x02	; 2
     724:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     728:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <sending>
     72c:	81 11       	cpse	r24, r1
     72e:	fc cf       	rjmp	.-8      	; 0x728 <process_message+0x1b2>
     730:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <temperature>
     734:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <temperature+0x1>
     738:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tx_char>
     73c:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <tx_bit_count>
     740:	81 e0       	ldi	r24, 0x01	; 1
     742:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <start_bit>
     746:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <sending>
     74a:	16 bc       	out	0x26, r1	; 38
     74c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     750:	82 60       	ori	r24, 0x02	; 2
     752:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     756:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <sending>
     75a:	81 11       	cpse	r24, r1
     75c:	fc cf       	rjmp	.-8      	; 0x756 <process_message+0x1e0>
     75e:	84 e1       	ldi	r24, 0x14	; 20
     760:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tx_char>
     764:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <tx_bit_count>
     768:	81 e0       	ldi	r24, 0x01	; 1
     76a:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <start_bit>
     76e:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <sending>
     772:	16 bc       	out	0x26, r1	; 38
     774:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     778:	82 60       	ori	r24, 0x02	; 2
     77a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     77e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <sending>
     782:	81 11       	cpse	r24, r1
     784:	fc cf       	rjmp	.-8      	; 0x77e <process_message+0x208>
     786:	1f cf       	rjmp	.-450    	; 0x5c6 <process_message+0x50>
     788:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     78c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <light>
     790:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <light+0x1>
     794:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <tx_char>
     798:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <tx_bit_count>
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <start_bit>
     7a2:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <sending>
     7a6:	16 bc       	out	0x26, r1	; 38
     7a8:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     7ac:	82 60       	ori	r24, 0x02	; 2
     7ae:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     7b2:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <sending>
     7b6:	81 11       	cpse	r24, r1
     7b8:	fc cf       	rjmp	.-8      	; 0x7b2 <process_message+0x23c>
     7ba:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <light>
     7be:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <light+0x1>
     7c2:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tx_char>
     7c6:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <tx_bit_count>
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <start_bit>
     7d0:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <sending>
     7d4:	16 bc       	out	0x26, r1	; 38
     7d6:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     7da:	82 60       	ori	r24, 0x02	; 2
     7dc:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     7e0:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <sending>
     7e4:	81 11       	cpse	r24, r1
     7e6:	fc cf       	rjmp	.-8      	; 0x7e0 <process_message+0x26a>
     7e8:	84 e1       	ldi	r24, 0x14	; 20
     7ea:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tx_char>
     7ee:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <tx_bit_count>
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <start_bit>
     7f8:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <sending>
     7fc:	16 bc       	out	0x26, r1	; 38
     7fe:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     802:	82 60       	ori	r24, 0x02	; 2
     804:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     808:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <sending>
     80c:	81 11       	cpse	r24, r1
     80e:	fc cf       	rjmp	.-8      	; 0x808 <process_message+0x292>
     810:	d5 ce       	rjmp	.-598    	; 0x5bc <process_message+0x46>
     812:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     816:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <rcv_valid>
     81a:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <rcv_error_stop>
     81e:	88 23       	and	r24, r24
     820:	b1 f1       	breq	.+108    	; 0x88e <process_message+0x318>
     822:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     826:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <rcv_error_stop>
     82a:	81 30       	cpi	r24, 0x01	; 1
     82c:	c1 f1       	breq	.+112    	; 0x89e <process_message+0x328>
     82e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <rcv_char>
     832:	80 95       	com	r24
     834:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <flags>
     838:	89 23       	and	r24, r25
     83a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <flags>
     83e:	80 ff       	sbrs	r24, 0
     840:	51 c2       	rjmp	.+1186   	; 0xce4 <process_message+0x76e>
     842:	91 e0       	ldi	r25, 0x01	; 1
     844:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <light_enable>
     848:	81 ff       	sbrs	r24, 1
     84a:	49 c2       	rjmp	.+1170   	; 0xcde <process_message+0x768>
     84c:	91 e0       	ldi	r25, 0x01	; 1
     84e:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <temp_enable>
     852:	82 ff       	sbrs	r24, 2
     854:	41 c2       	rjmp	.+1154   	; 0xcd8 <process_message+0x762>
     856:	91 e0       	ldi	r25, 0x01	; 1
     858:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <vibe_enable>
     85c:	83 fd       	sbrc	r24, 3
     85e:	4e c2       	rjmp	.+1180   	; 0xcfc <process_message+0x786>
     860:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <case_enable>
     864:	84 e1       	ldi	r24, 0x14	; 20
     866:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tx_char>
     86a:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <tx_bit_count>
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <start_bit>
     874:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <sending>
     878:	16 bc       	out	0x26, r1	; 38
     87a:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     87e:	82 60       	ori	r24, 0x02	; 2
     880:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     884:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <sending>
     888:	81 11       	cpse	r24, r1
     88a:	fc cf       	rjmp	.-8      	; 0x884 <process_message+0x30e>
     88c:	92 ce       	rjmp	.-732    	; 0x5b2 <process_message+0x3c>
     88e:	99 23       	and	r25, r25
     890:	11 f2       	breq	.-124    	; 0x816 <process_message+0x2a0>
     892:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     896:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <rcv_error_stop>
     89a:	81 30       	cpi	r24, 0x01	; 1
     89c:	41 f6       	brne	.-112    	; 0x82e <process_message+0x2b8>
     89e:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <rcv_error_stop>
     8a2:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <light_status>
     8a6:	95 e1       	ldi	r25, 0x15	; 21
     8a8:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <tx_char>
     8ac:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <tx_bit_count>
     8b0:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <start_bit>
     8b4:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <sending>
     8b8:	16 bc       	out	0x26, r1	; 38
     8ba:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     8be:	82 60       	ori	r24, 0x02	; 2
     8c0:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     8c4:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <sending>
     8c8:	81 11       	cpse	r24, r1
     8ca:	fc cf       	rjmp	.-8      	; 0x8c4 <process_message+0x34e>
     8cc:	72 ce       	rjmp	.-796    	; 0x5b2 <process_message+0x3c>
     8ce:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     8d2:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <rcv_valid>
     8d6:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <rcv_error_stop>
     8da:	88 23       	and	r24, r24
     8dc:	a9 f1       	breq	.+106    	; 0x948 <process_message+0x3d2>
     8de:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     8e2:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <rcv_error_stop>
     8e6:	81 30       	cpi	r24, 0x01	; 1
     8e8:	b9 f1       	breq	.+110    	; 0x958 <process_message+0x3e2>
     8ea:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <rcv_char>
     8ee:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <flags>
     8f2:	89 2b       	or	r24, r25
     8f4:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <flags>
     8f8:	80 ff       	sbrs	r24, 0
     8fa:	fd c1       	rjmp	.+1018   	; 0xcf6 <process_message+0x780>
     8fc:	91 e0       	ldi	r25, 0x01	; 1
     8fe:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <light_enable>
     902:	81 ff       	sbrs	r24, 1
     904:	f5 c1       	rjmp	.+1002   	; 0xcf0 <process_message+0x77a>
     906:	91 e0       	ldi	r25, 0x01	; 1
     908:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <temp_enable>
     90c:	82 ff       	sbrs	r24, 2
     90e:	ed c1       	rjmp	.+986    	; 0xcea <process_message+0x774>
     910:	91 e0       	ldi	r25, 0x01	; 1
     912:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <vibe_enable>
     916:	83 fd       	sbrc	r24, 3
     918:	f5 c1       	rjmp	.+1002   	; 0xd04 <process_message+0x78e>
     91a:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <case_enable>
     91e:	84 e1       	ldi	r24, 0x14	; 20
     920:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tx_char>
     924:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <tx_bit_count>
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <start_bit>
     92e:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <sending>
     932:	16 bc       	out	0x26, r1	; 38
     934:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     938:	82 60       	ori	r24, 0x02	; 2
     93a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     93e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <sending>
     942:	81 11       	cpse	r24, r1
     944:	fc cf       	rjmp	.-8      	; 0x93e <process_message+0x3c8>
     946:	30 ce       	rjmp	.-928    	; 0x5a8 <process_message+0x32>
     948:	99 23       	and	r25, r25
     94a:	19 f2       	breq	.-122    	; 0x8d2 <process_message+0x35c>
     94c:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     950:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <rcv_error_stop>
     954:	81 30       	cpi	r24, 0x01	; 1
     956:	49 f6       	brne	.-110    	; 0x8ea <process_message+0x374>
     958:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <rcv_error_stop>
     95c:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <light_status>
     960:	95 e1       	ldi	r25, 0x15	; 21
     962:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <tx_char>
     966:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <tx_bit_count>
     96a:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <start_bit>
     96e:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <sending>
     972:	16 bc       	out	0x26, r1	; 38
     974:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     978:	82 60       	ori	r24, 0x02	; 2
     97a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     97e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <sending>
     982:	81 11       	cpse	r24, r1
     984:	fc cf       	rjmp	.-8      	; 0x97e <process_message+0x408>
     986:	10 ce       	rjmp	.-992    	; 0x5a8 <process_message+0x32>
     988:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     98c:	81 e0       	ldi	r24, 0x01	; 1
     98e:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <vibe_status>
     992:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <rcv_valid>
     996:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <rcv_error_stop>
     99a:	88 23       	and	r24, r24
     99c:	e9 f1       	breq	.+122    	; 0xa18 <process_message+0x4a2>
     99e:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <rcv_char>
     9a2:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     9a6:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <rcv_error_stop>
     9aa:	81 30       	cpi	r24, 0x01	; 1
     9ac:	09 f4       	brne	.+2      	; 0x9b0 <process_message+0x43a>
     9ae:	34 c1       	rjmp	.+616    	; 0xc18 <process_message+0x6a2>
     9b0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <rcv_char>
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	38 2f       	mov	r19, r24
     9b8:	22 27       	eor	r18, r18
     9ba:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <rcv_valid>
     9be:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <rcv_error_stop>
     9c2:	88 23       	and	r24, r24
     9c4:	69 f1       	breq	.+90     	; 0xa20 <process_message+0x4aa>
     9c6:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     9ca:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <rcv_error_stop>
     9ce:	81 11       	cpse	r24, r1
     9d0:	2f c0       	rjmp	.+94     	; 0xa30 <process_message+0x4ba>
     9d2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <rcv_char>
     9d6:	40 91 35 01 	lds	r20, 0x0135	; 0x800135 <vibe_status>
     9da:	44 23       	and	r20, r20
     9dc:	09 f4       	brne	.+2      	; 0x9e0 <process_message+0x46a>
     9de:	df cd       	rjmp	.-1090   	; 0x59e <process_message+0x28>
     9e0:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <vibe_lo_thresh>
     9e4:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <vibe_hi_thresh>
     9e8:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <vibe_status>
     9ec:	34 db       	rcall	.-2456   	; 0x56 <adx_setup>
     9ee:	84 e1       	ldi	r24, 0x14	; 20
     9f0:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tx_char>
     9f4:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <tx_bit_count>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <start_bit>
     9fe:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <sending>
     a02:	16 bc       	out	0x26, r1	; 38
     a04:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     a08:	82 60       	ori	r24, 0x02	; 2
     a0a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     a0e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <sending>
     a12:	81 11       	cpse	r24, r1
     a14:	fc cf       	rjmp	.-8      	; 0xa0e <process_message+0x498>
     a16:	c3 cd       	rjmp	.-1146   	; 0x59e <process_message+0x28>
     a18:	99 23       	and	r25, r25
     a1a:	09 f4       	brne	.+2      	; 0xa1e <process_message+0x4a8>
     a1c:	ba cf       	rjmp	.-140    	; 0x992 <process_message+0x41c>
     a1e:	bf cf       	rjmp	.-130    	; 0x99e <process_message+0x428>
     a20:	99 23       	and	r25, r25
     a22:	59 f2       	breq	.-106    	; 0x9ba <process_message+0x444>
     a24:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     a28:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <rcv_error_stop>
     a2c:	88 23       	and	r24, r24
     a2e:	89 f2       	breq	.-94     	; 0x9d2 <process_message+0x45c>
     a30:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <vibe_status>
     a34:	85 e1       	ldi	r24, 0x15	; 21
     a36:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tx_char>
     a3a:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <tx_bit_count>
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <start_bit>
     a44:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <sending>
     a48:	16 bc       	out	0x26, r1	; 38
     a4a:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     a4e:	82 60       	ori	r24, 0x02	; 2
     a50:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     a54:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <sending>
     a58:	81 11       	cpse	r24, r1
     a5a:	fc cf       	rjmp	.-8      	; 0xa54 <process_message+0x4de>
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	ba cf       	rjmp	.-140    	; 0x9d6 <process_message+0x460>
     a62:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     a66:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <rcv_valid>
     a6a:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <rcv_error_stop>
     a6e:	88 23       	and	r24, r24
     a70:	19 f1       	breq	.+70     	; 0xab8 <process_message+0x542>
     a72:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     a76:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <rcv_error_stop>
     a7a:	81 30       	cpi	r24, 0x01	; 1
     a7c:	09 f4       	brne	.+2      	; 0xa80 <process_message+0x50a>
     a7e:	e4 c0       	rjmp	.+456    	; 0xc48 <process_message+0x6d2>
     a80:	84 e1       	ldi	r24, 0x14	; 20
     a82:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tx_char>
     a86:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <tx_bit_count>
     a8a:	81 e0       	ldi	r24, 0x01	; 1
     a8c:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <start_bit>
     a90:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <sending>
     a94:	16 bc       	out	0x26, r1	; 38
     a96:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     a9a:	82 60       	ori	r24, 0x02	; 2
     a9c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     aa0:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <sending>
     aa4:	81 11       	cpse	r24, r1
     aa6:	fc cf       	rjmp	.-8      	; 0xaa0 <process_message+0x52a>
     aa8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <rcv_char>
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <temp_hi_thresh+0x1>
     ab2:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <temp_hi_thresh>
     ab6:	6e cd       	rjmp	.-1316   	; 0x594 <process_message+0x1e>
     ab8:	99 23       	and	r25, r25
     aba:	a9 f2       	breq	.-86     	; 0xa66 <process_message+0x4f0>
     abc:	da cf       	rjmp	.-76     	; 0xa72 <process_message+0x4fc>
     abe:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     ac2:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <rcv_valid>
     ac6:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <rcv_error_stop>
     aca:	88 23       	and	r24, r24
     acc:	19 f1       	breq	.+70     	; 0xb14 <process_message+0x59e>
     ace:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     ad2:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <rcv_error_stop>
     ad6:	81 30       	cpi	r24, 0x01	; 1
     ad8:	09 f4       	brne	.+2      	; 0xadc <process_message+0x566>
     ada:	e6 c0       	rjmp	.+460    	; 0xca8 <process_message+0x732>
     adc:	84 e1       	ldi	r24, 0x14	; 20
     ade:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tx_char>
     ae2:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <tx_bit_count>
     ae6:	81 e0       	ldi	r24, 0x01	; 1
     ae8:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <start_bit>
     aec:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <sending>
     af0:	16 bc       	out	0x26, r1	; 38
     af2:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     af6:	82 60       	ori	r24, 0x02	; 2
     af8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     afc:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <sending>
     b00:	81 11       	cpse	r24, r1
     b02:	fc cf       	rjmp	.-8      	; 0xafc <process_message+0x586>
     b04:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <rcv_char>
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <temp_hi_thresh+0x1>
     b0e:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <temp_hi_thresh>
     b12:	3b cd       	rjmp	.-1418   	; 0x58a <process_message+0x14>
     b14:	99 23       	and	r25, r25
     b16:	a9 f2       	breq	.-86     	; 0xac2 <process_message+0x54c>
     b18:	da cf       	rjmp	.-76     	; 0xace <process_message+0x558>
     b1a:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     b1e:	81 e0       	ldi	r24, 0x01	; 1
     b20:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <light_status>
     b24:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <rcv_valid>
     b28:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <rcv_error_stop>
     b2c:	88 23       	and	r24, r24
     b2e:	e9 f1       	breq	.+122    	; 0xbaa <process_message+0x634>
     b30:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <rcv_char>
     b34:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     b38:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <rcv_error_stop>
     b3c:	81 30       	cpi	r24, 0x01	; 1
     b3e:	09 f4       	brne	.+2      	; 0xb42 <process_message+0x5cc>
     b40:	9b c0       	rjmp	.+310    	; 0xc78 <process_message+0x702>
     b42:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <rcv_char>
     b46:	30 e0       	ldi	r19, 0x00	; 0
     b48:	32 2f       	mov	r19, r18
     b4a:	22 27       	eor	r18, r18
     b4c:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <rcv_valid>
     b50:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <rcv_error_stop>
     b54:	88 23       	and	r24, r24
     b56:	69 f1       	breq	.+90     	; 0xbb2 <process_message+0x63c>
     b58:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     b5c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <rcv_error_stop>
     b60:	81 11       	cpse	r24, r1
     b62:	2f c0       	rjmp	.+94     	; 0xbc2 <process_message+0x64c>
     b64:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <rcv_char>
     b68:	28 2b       	or	r18, r24
     b6a:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <light_status>
     b6e:	88 23       	and	r24, r24
     b70:	09 f4       	brne	.+2      	; 0xb74 <process_message+0x5fe>
     b72:	06 cd       	rjmp	.-1524   	; 0x580 <process_message+0xa>
     b74:	30 93 32 01 	sts	0x0132, r19	; 0x800132 <light_thresh+0x1>
     b78:	20 93 31 01 	sts	0x0131, r18	; 0x800131 <light_thresh>
     b7c:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <light_status>
     b80:	84 e1       	ldi	r24, 0x14	; 20
     b82:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tx_char>
     b86:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <tx_bit_count>
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <start_bit>
     b90:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <sending>
     b94:	16 bc       	out	0x26, r1	; 38
     b96:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     b9a:	82 60       	ori	r24, 0x02	; 2
     b9c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     ba0:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <sending>
     ba4:	81 11       	cpse	r24, r1
     ba6:	fc cf       	rjmp	.-8      	; 0xba0 <process_message+0x62a>
     ba8:	eb cc       	rjmp	.-1578   	; 0x580 <process_message+0xa>
     baa:	99 23       	and	r25, r25
     bac:	09 f4       	brne	.+2      	; 0xbb0 <process_message+0x63a>
     bae:	ba cf       	rjmp	.-140    	; 0xb24 <process_message+0x5ae>
     bb0:	bf cf       	rjmp	.-130    	; 0xb30 <process_message+0x5ba>
     bb2:	99 23       	and	r25, r25
     bb4:	59 f2       	breq	.-106    	; 0xb4c <process_message+0x5d6>
     bb6:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     bba:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <rcv_error_stop>
     bbe:	88 23       	and	r24, r24
     bc0:	89 f2       	breq	.-94     	; 0xb64 <process_message+0x5ee>
     bc2:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <light_status>
     bc6:	85 e1       	ldi	r24, 0x15	; 21
     bc8:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tx_char>
     bcc:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <tx_bit_count>
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <start_bit>
     bd6:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <sending>
     bda:	16 bc       	out	0x26, r1	; 38
     bdc:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     be0:	82 60       	ori	r24, 0x02	; 2
     be2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     be6:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <sending>
     bea:	81 11       	cpse	r24, r1
     bec:	fc cf       	rjmp	.-8      	; 0xbe6 <process_message+0x670>
     bee:	bd cf       	rjmp	.-134    	; 0xb6a <process_message+0x5f4>
     bf0:	95 e1       	ldi	r25, 0x15	; 21
     bf2:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <tx_char>
     bf6:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <tx_bit_count>
     bfa:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <start_bit>
     bfe:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <sending>
     c02:	16 bc       	out	0x26, r1	; 38
     c04:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     c08:	82 60       	ori	r24, 0x02	; 2
     c0a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     c0e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <sending>
     c12:	81 11       	cpse	r24, r1
     c14:	fc cf       	rjmp	.-8      	; 0xc0e <process_message+0x698>
     c16:	08 95       	ret
     c18:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <rcv_error_stop>
     c1c:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <vibe_status>
     c20:	95 e1       	ldi	r25, 0x15	; 21
     c22:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <tx_char>
     c26:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <tx_bit_count>
     c2a:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <start_bit>
     c2e:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <sending>
     c32:	16 bc       	out	0x26, r1	; 38
     c34:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     c38:	82 60       	ori	r24, 0x02	; 2
     c3a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     c3e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <sending>
     c42:	81 11       	cpse	r24, r1
     c44:	fc cf       	rjmp	.-8      	; 0xc3e <process_message+0x6c8>
     c46:	b9 ce       	rjmp	.-654    	; 0x9ba <process_message+0x444>
     c48:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <rcv_error_stop>
     c4c:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <light_status>
     c50:	95 e1       	ldi	r25, 0x15	; 21
     c52:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <tx_char>
     c56:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <tx_bit_count>
     c5a:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <start_bit>
     c5e:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <sending>
     c62:	16 bc       	out	0x26, r1	; 38
     c64:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     c68:	82 60       	ori	r24, 0x02	; 2
     c6a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     c6e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <sending>
     c72:	81 11       	cpse	r24, r1
     c74:	fc cf       	rjmp	.-8      	; 0xc6e <process_message+0x6f8>
     c76:	8e cc       	rjmp	.-1764   	; 0x594 <process_message+0x1e>
     c78:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <rcv_error_stop>
     c7c:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <light_status>
     c80:	95 e1       	ldi	r25, 0x15	; 21
     c82:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <tx_char>
     c86:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <tx_bit_count>
     c8a:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <start_bit>
     c8e:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <sending>
     c92:	16 bc       	out	0x26, r1	; 38
     c94:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     c98:	82 60       	ori	r24, 0x02	; 2
     c9a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     c9e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <sending>
     ca2:	81 11       	cpse	r24, r1
     ca4:	fc cf       	rjmp	.-8      	; 0xc9e <process_message+0x728>
     ca6:	4f cf       	rjmp	.-354    	; 0xb46 <process_message+0x5d0>
     ca8:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <rcv_error_stop>
     cac:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <light_status>
     cb0:	95 e1       	ldi	r25, 0x15	; 21
     cb2:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <tx_char>
     cb6:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <tx_bit_count>
     cba:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <start_bit>
     cbe:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <sending>
     cc2:	16 bc       	out	0x26, r1	; 38
     cc4:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     cc8:	82 60       	ori	r24, 0x02	; 2
     cca:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     cce:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <sending>
     cd2:	81 11       	cpse	r24, r1
     cd4:	fc cf       	rjmp	.-8      	; 0xcce <process_message+0x758>
     cd6:	59 cc       	rjmp	.-1870   	; 0x58a <process_message+0x14>
     cd8:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <vibe_enable>
     cdc:	bf cd       	rjmp	.-1154   	; 0x85c <process_message+0x2e6>
     cde:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <temp_enable>
     ce2:	b7 cd       	rjmp	.-1170   	; 0x852 <process_message+0x2dc>
     ce4:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <light_enable>
     ce8:	af cd       	rjmp	.-1186   	; 0x848 <process_message+0x2d2>
     cea:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <vibe_enable>
     cee:	13 ce       	rjmp	.-986    	; 0x916 <process_message+0x3a0>
     cf0:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <temp_enable>
     cf4:	0b ce       	rjmp	.-1002   	; 0x90c <process_message+0x396>
     cf6:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <light_enable>
     cfa:	03 ce       	rjmp	.-1018   	; 0x902 <process_message+0x38c>
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <case_enable>
     d02:	b0 cd       	rjmp	.-1184   	; 0x864 <process_message+0x2ee>
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <case_enable>
     d0a:	09 ce       	rjmp	.-1006   	; 0x91e <process_message+0x3a8>

00000d0c <check_usart_faults>:

void check_usart_faults(){
	if ((light_fault > 20)&& (light_enable||temp_enable)){  //light and temp same chip
     d0c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <light_fault>
     d10:	85 31       	cpi	r24, 0x15	; 21
     d12:	78 f0       	brcs	.+30     	; 0xd32 <check_usart_faults+0x26>
     d14:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <light_enable>
     d18:	88 23       	and	r24, r24
     d1a:	09 f4       	brne	.+2      	; 0xd1e <check_usart_faults+0x12>
     d1c:	51 c0       	rjmp	.+162    	; 0xdc0 <check_usart_faults+0xb4>
		fault_code = USART;
     d1e:	80 e4       	ldi	r24, 0x40	; 64
     d20:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <fault_code>
		fault_value1 = LIGHT;
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <fault_value1>
		fault_value2 = 0x00;
     d2a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <fault_value2>
		tamper_detected = 1;
     d2e:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <tamper_detected>
	}
	if ((vibe_fault > 20) && vibe_enable){
     d32:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <vibe_fault>
     d36:	85 31       	cpi	r24, 0x15	; 21
     d38:	20 f0       	brcs	.+8      	; 0xd42 <check_usart_faults+0x36>
     d3a:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <vibe_enable>
     d3e:	81 11       	cpse	r24, r1
     d40:	33 c0       	rjmp	.+102    	; 0xda8 <check_usart_faults+0x9c>
		fault_code = USART;
		fault_value1 = VIBE;
		fault_value2 = 0x00;
		tamper_detected = 1;
	}
	if ((ssp_fault >20) && case_enable) {
     d42:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <ssp_fault>
     d46:	85 31       	cpi	r24, 0x15	; 21
     d48:	20 f0       	brcs	.+8      	; 0xd52 <check_usart_faults+0x46>
     d4a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <case_enable>
     d4e:	81 11       	cpse	r24, r1
     d50:	1f c0       	rjmp	.+62     	; 0xd90 <check_usart_faults+0x84>
		fault_code = USART;
		fault_value1 = SSP;
		fault_value2 = 0x00;
		tamper_detected = 1;
	}
	if (n25_fault >20) {
     d52:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <n25_fault>
     d56:	85 31       	cpi	r24, 0x15	; 21
     d58:	58 f0       	brcs	.+22     	; 0xd70 <check_usart_faults+0x64>
		fault_code = USART;
     d5a:	80 e4       	ldi	r24, 0x40	; 64
     d5c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <fault_code>
		fault_value1 = N25;
     d60:	80 e2       	ldi	r24, 0x20	; 32
     d62:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <fault_value1>
		fault_value2 = 0x00;
     d66:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <fault_value2>
		tamper_detected = 1;
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <tamper_detected>
	}
	if (unk_fault >20) {
     d70:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <unk_fault>
     d74:	85 31       	cpi	r24, 0x15	; 21
     d76:	58 f0       	brcs	.+22     	; 0xd8e <check_usart_faults+0x82>
		fault_code = USART;
     d78:	80 e4       	ldi	r24, 0x40	; 64
     d7a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <fault_code>
		fault_value1 = UNK;
     d7e:	80 e8       	ldi	r24, 0x80	; 128
     d80:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <fault_value1>
		fault_value2 = 0x00;
     d84:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <fault_value2>
		tamper_detected = 1;
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <tamper_detected>
     d8e:	08 95       	ret
		fault_value1 = VIBE;
		fault_value2 = 0x00;
		tamper_detected = 1;
	}
	if ((ssp_fault >20) && case_enable) {
		fault_code = USART;
     d90:	80 e4       	ldi	r24, 0x40	; 64
     d92:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <fault_code>
		fault_value1 = SSP;
     d96:	80 e1       	ldi	r24, 0x10	; 16
     d98:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <fault_value1>
		fault_value2 = 0x00;
     d9c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <fault_value2>
		tamper_detected = 1;
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <tamper_detected>
     da6:	d5 cf       	rjmp	.-86     	; 0xd52 <check_usart_faults+0x46>
		fault_value1 = LIGHT;
		fault_value2 = 0x00;
		tamper_detected = 1;
	}
	if ((vibe_fault > 20) && vibe_enable){
		fault_code = USART;
     da8:	80 e4       	ldi	r24, 0x40	; 64
     daa:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <fault_code>
		fault_value1 = VIBE;
     dae:	84 e0       	ldi	r24, 0x04	; 4
     db0:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <fault_value1>
		fault_value2 = 0x00;
     db4:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <fault_value2>
		tamper_detected = 1;
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <tamper_detected>
     dbe:	c1 cf       	rjmp	.-126    	; 0xd42 <check_usart_faults+0x36>
	TIMSK0 |= (1<<OCIE0A);
	while(sending);
}

void check_usart_faults(){
	if ((light_fault > 20)&& (light_enable||temp_enable)){  //light and temp same chip
     dc0:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <temp_enable>
     dc4:	88 23       	and	r24, r24
     dc6:	09 f4       	brne	.+2      	; 0xdca <check_usart_faults+0xbe>
     dc8:	b4 cf       	rjmp	.-152    	; 0xd32 <check_usart_faults+0x26>
     dca:	a9 cf       	rjmp	.-174    	; 0xd1e <check_usart_faults+0x12>

00000dcc <main>:
}

static inline void
mkm_grab()
{
  MKM_CONTROL_FPGA_PORT |= _BV(MKM_CONTROL_FPGA_BIT);
     dcc:	17 9a       	sbi	0x02, 7	; 2
  MKM_CONTROL_AVR_PORT &= ~_BV(MKM_CONTROL_AVR_BIT);
     dce:	16 98       	cbi	0x02, 6	; 2
static inline void
init_ports()
{
  /* Configure all PORTA pins except the tamper detection pin as
     outputs. */
  DDRA = 0xff & ~_BV(AVR_PANIC_BIT);
     dd0:	8f ee       	ldi	r24, 0xEF	; 239
     dd2:	81 b9       	out	0x01, r24	; 1
  //DDRB = 0xff & ~_BV(PINB3);
  //DDRB = 0xff & ~_BV(PINB2);
	DDRB = 0xf7; //was fb
     dd4:	87 ef       	ldi	r24, 0xF7	; 247
     dd6:	85 b9       	out	0x05, r24	; 5

static void
init_interrupts()
{
  //PCICR |= _BV(PCIE0|PCIE2);    /* Enable pin change interrupt on PCMSK0 & PCMSK2*/
  PCICR = (1<<PCIE0)|(1<<PCIE1)|(1<<PCIE2);
     dd8:	87 e0       	ldi	r24, 0x07	; 7
     dda:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__EEPROM_REGION_LENGTH__+0x7f0068>
  PCMSK0 |= _BV(PCINT4);        /* Set mask bit for PCINT4 (panic) */
     dde:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__EEPROM_REGION_LENGTH__+0x7f006b>
     de2:	80 61       	ori	r24, 0x10	; 16
     de4:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__EEPROM_REGION_LENGTH__+0x7f006b>
  /*setup PC6 as tamper disable */
  //PUEC = (1<<PUEC6);			/*enable internal pull-up to avoid false triggers */ 
  PORTC |= (1<<PORTC6);
     de8:	56 9a       	sbi	0x0a, 6	; 10
  //PCMSK2 |= _BV(PCINT22);
  /*setup PB2 as soft-UART RX*/
  //PUEB = (1<<PUEB3) | (1<<PUEB2);			/*enable internal pull-up to detect start bit */
  PUEB = (1<<PUEB3);
     dea:	88 e0       	ldi	r24, 0x08	; 8
     dec:	87 b9       	out	0x07, r24	; 7
  PCMSK1 |= _BV(PCINT11);
     dee:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__EEPROM_REGION_LENGTH__+0x7f006c>
     df2:	88 60       	ori	r24, 0x08	; 8
     df4:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__EEPROM_REGION_LENGTH__+0x7f006c>
 // PCMSK1 |= _BV(PCINT10);
  sei();
     df8:	78 94       	sei
  init_power_reduction();
  init_interrupts();
  //mlx_get_calib();
  //init_tamper_values(0, 1);
	
  flags = 0xFF;
     dfa:	8f ef       	ldi	r24, 0xFF	; 255
     dfc:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <flags>
  configured = 0;
     e00:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <configured>
  tamper_detected = 0;
     e04:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <tamper_detected>
  uint8_t ssp_status = 0;
  sending = 0;
     e08:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <sending>
  receiving = 0;
     e0c:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <receiving>
  tx_char = 0;
     e10:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <tx_char>
  tx_bit_count = 0;
     e14:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <tx_bit_count>
  light_fault = 0;
     e18:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <light_fault>
  vibe_fault = 0;
     e1c:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <vibe_fault>
  ssp_fault = 0;
     e20:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <ssp_fault>
  n25_fault = 0;
     e24:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <n25_fault>
  unk_fault = 0;
     e28:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <unk_fault>
  PORTB |= _BV(PORTB3);   //set TX idle high
     e2c:	33 9a       	sbi	0x06, 3	; 6
  wd_init = 0x01;
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <wd_init>
  ssp_out = WDOG_RS;
     e34:	90 e1       	ldi	r25, 0x10	; 16
     e36:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <ssp_out>
  PORTC |= _BV(PORTC6);
     e3a:	56 9a       	sbi	0x0a, 6	; 10
  TCNT0 = 0x00;
     e3c:	16 bc       	out	0x26, r1	; 38
  TCCR0A = (1<<COM0A1) | (1 << WGM01);             //CTC mode
     e3e:	92 e8       	ldi	r25, 0x82	; 130
     e40:	94 bd       	out	0x24, r25	; 36
  TCCR0B = (1 << CS00);              //div1
     e42:	85 bd       	out	0x25, r24	; 37
  OCR0A = 180;						// 208us compare value for 4800 baud
     e44:	24 eb       	ldi	r18, 0xB4	; 180
     e46:	27 bd       	out	0x27, r18	; 39
  
   TCNT1 = 0x00;
     e48:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     e4c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
   TCCR1A = (1<<COM1A1) | (1 << WGM01);             //CTC mode
     e50:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__EEPROM_REGION_LENGTH__+0x7f0080>
   TCCR1B = (1 << CS00);              //div1
     e54:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__EEPROM_REGION_LENGTH__+0x7f0081>
   OCR1A = 180;						// 208us compare value for 4800 baud
     e58:	84 eb       	ldi	r24, 0xB4	; 180
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__EEPROM_REGION_LENGTH__+0x7f0089>
     e60:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__EEPROM_REGION_LENGTH__+0x7f0088>
  
  //initTimer1(TWD_INIT);
  
  mkm_release();*/
  /* Flash LED's at startup. */
  AVR_LED_PORT |= 0x0f;
     e64:	82 b1       	in	r24, 0x02	; 2
     e66:	8f 60       	ori	r24, 0x0F	; 15
     e68:	82 b9       	out	0x02, r24	; 2
  for (int i = 0; i < 16000; i++);
  AVR_LED_PORT &= ~0x0f;
     e6a:	82 b1       	in	r24, 0x02	; 2
     e6c:	80 7f       	andi	r24, 0xF0	; 240
     e6e:	82 b9       	out	0x02, r24	; 2
  // go to sleep, interrupt will wake us
  //sleep();
  temperature = 80;
     e70:	80 e5       	ldi	r24, 0x50	; 80
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <temperature+0x1>
     e78:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <temperature>
  light = 0xaa55;
     e7c:	85 e5       	ldi	r24, 0x55	; 85
     e7e:	9a ea       	ldi	r25, 0xAA	; 170
     e80:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <light+0x1>
     e84:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <light>
  
  rcv_valid = 0;
     e88:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
  sei();
     e8c:	78 94       	sei
			//if ((ssp_status && LOW_VOLT)|(ssp_status && BATT_ON)) {
				//mkm_wipe();
			//}
			//read accelerometer 
			if ((adx_read_status() & ADX_ACT) && (vibe_enable)){
				fault_code = VIBE;
     e8e:	14 e0       	ldi	r17, 0x04	; 4
			//read light and temp
			mlx_get_meas();
			//if temp is out side normal storage or sensor is exposed to bright light
			//actual values 1TBD 
			if ((((temperature > temp_hi_thresh) | (temperature < temp_lo_thresh)) && temp_enable) ){
				fault_code = TEMP;
     e90:	d2 e0       	ldi	r29, 0x02	; 2
				fault_value1 = ((uint8_t) temperature>>8);
				fault_value2 = ((uint8_t) temperature&0xFF);
				mkm_wipe();
			}
			if((light > light_thresh) && light_enable ) {
				fault_code = LIGHT;
     e92:	c1 e0       	ldi	r28, 0x01	; 1
     e94:	04 c0       	rjmp	.+8      	; 0xe9e <main+0xd2>
			rcv_valid = 0;
			start_bit = 1;
			process_message();
		}
		
		if (configured == 0x55) {
     e96:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <configured>
     e9a:	85 35       	cpi	r24, 0x55	; 85
     e9c:	69 f0       	breq	.+26     	; 0xeb8 <main+0xec>
  sei();
  while (1)
    {
		//n25_read(0x00, 0x00, 0x00, 8);
		//read in character and echo back
		if (rcv_valid == 1){
     e9e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <rcv_valid>
     ea2:	81 30       	cpi	r24, 0x01	; 1
     ea4:	c1 f7       	brne	.-16     	; 0xe96 <main+0xca>
			rcv_valid = 0;
     ea6:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
			start_bit = 1;
     eaa:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <start_bit>
			process_message();
     eae:	63 db       	rcall	.-2362   	; 0x576 <process_message>
		}
		
		if (configured == 0x55) {
     eb0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <configured>
     eb4:	85 35       	cpi	r24, 0x55	; 85
     eb6:	99 f7       	brne	.-26     	; 0xe9e <main+0xd2>
			check_usart_faults();
     eb8:	29 df       	rcall	.-430    	; 0xd0c <check_usart_faults>
			//ssp_status = ssp_read_byte();
			//if ((ssp_status && LOW_VOLT)|(ssp_status && BATT_ON)) {
				//mkm_wipe();
			//}
			//read accelerometer 
			if ((adx_read_status() & ADX_ACT) && (vibe_enable)){
     eba:	36 d9       	rcall	.-3476   	; 0x128 <adx_read_status>
     ebc:	84 ff       	sbrs	r24, 4
     ebe:	04 c0       	rjmp	.+8      	; 0xec8 <main+0xfc>
     ec0:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <vibe_enable>
     ec4:	81 11       	cpse	r24, r1
     ec6:	53 c0       	rjmp	.+166    	; 0xf6e <main+0x1a2>
				fault_code = VIBE;
				mkm_wipe();
			}
			//}
			//read light and temp
			mlx_get_meas();
     ec8:	3b d9       	rcall	.-3466   	; 0x140 <mlx_get_meas>
			//if temp is out side normal storage or sensor is exposed to bright light
			//actual values 1TBD 
			if ((((temperature > temp_hi_thresh) | (temperature < temp_lo_thresh)) && temp_enable) ){
     eca:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <temperature>
     ece:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <temperature+0x1>
     ed2:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <temp_hi_thresh>
     ed6:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <temp_hi_thresh+0x1>
     eda:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <temperature>
     ede:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <temperature+0x1>
     ee2:	40 91 39 01 	lds	r20, 0x0139	; 0x800139 <temp_lo_thresh>
     ee6:	50 91 3a 01 	lds	r21, 0x013A	; 0x80013a <temp_lo_thresh+0x1>
     eea:	82 17       	cp	r24, r18
     eec:	93 07       	cpc	r25, r19
     eee:	44 f5       	brge	.+80     	; 0xf40 <main+0x174>
     ef0:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <temp_enable>
     ef4:	81 11       	cpse	r24, r1
     ef6:	2b c0       	rjmp	.+86     	; 0xf4e <main+0x182>
				fault_code = TEMP;
				fault_value1 = ((uint8_t) temperature>>8);
				fault_value2 = ((uint8_t) temperature&0xFF);
				mkm_wipe();
			}
			if((light > light_thresh) && light_enable ) {
     ef8:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <light>
     efc:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <light+0x1>
     f00:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <light_thresh>
     f04:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <light_thresh+0x1>
     f08:	82 17       	cp	r24, r18
     f0a:	93 07       	cpc	r25, r19
     f0c:	40 f6       	brcc	.-112    	; 0xe9e <main+0xd2>
     f0e:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <light_enable>
     f12:	88 23       	and	r24, r24
     f14:	21 f2       	breq	.-120    	; 0xe9e <main+0xd2>
				fault_code = LIGHT;
     f16:	c0 93 08 01 	sts	0x0108, r28	; 0x800108 <fault_code>
				fault_value1 = ((uint8_t) light>8);
     f1a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <light>
     f1e:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <light+0x1>
     f22:	99 27       	eor	r25, r25
     f24:	21 e0       	ldi	r18, 0x01	; 1
     f26:	09 97       	sbiw	r24, 0x09	; 9
     f28:	0c f4       	brge	.+2      	; 0xf2c <main+0x160>
     f2a:	20 e0       	ldi	r18, 0x00	; 0
     f2c:	20 93 07 01 	sts	0x0107, r18	; 0x800107 <fault_value1>
				fault_value2 = ((uint8_t) light&0xFF);
     f30:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <light>
     f34:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <light+0x1>
     f38:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <fault_value2>
				mkm_wipe();
     f3c:	99 da       	rcall	.-2766   	; 0x470 <mkm_wipe>
     f3e:	af cf       	rjmp	.-162    	; 0xe9e <main+0xd2>
			//}
			//read light and temp
			mlx_get_meas();
			//if temp is out side normal storage or sensor is exposed to bright light
			//actual values 1TBD 
			if ((((temperature > temp_hi_thresh) | (temperature < temp_lo_thresh)) && temp_enable) ){
     f40:	64 17       	cp	r22, r20
     f42:	75 07       	cpc	r23, r21
     f44:	cc f6       	brge	.-78     	; 0xef8 <main+0x12c>
     f46:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <temp_enable>
     f4a:	88 23       	and	r24, r24
     f4c:	a9 f2       	breq	.-86     	; 0xef8 <main+0x12c>
				fault_code = TEMP;
     f4e:	d0 93 08 01 	sts	0x0108, r29	; 0x800108 <fault_code>
				fault_value1 = ((uint8_t) temperature>>8);
     f52:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <temperature>
     f56:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <temperature+0x1>
     f5a:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <fault_value1>
				fault_value2 = ((uint8_t) temperature&0xFF);
     f5e:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <temperature>
     f62:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <temperature+0x1>
     f66:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <fault_value2>
				mkm_wipe();
     f6a:	82 da       	rcall	.-2812   	; 0x470 <mkm_wipe>
     f6c:	c5 cf       	rjmp	.-118    	; 0xef8 <main+0x12c>
			//if ((ssp_status && LOW_VOLT)|(ssp_status && BATT_ON)) {
				//mkm_wipe();
			//}
			//read accelerometer 
			if ((adx_read_status() & ADX_ACT) && (vibe_enable)){
				fault_code = VIBE;
     f6e:	10 93 08 01 	sts	0x0108, r17	; 0x800108 <fault_code>
				mkm_wipe();
     f72:	7e da       	rcall	.-2820   	; 0x470 <mkm_wipe>
     f74:	a9 cf       	rjmp	.-174    	; 0xec8 <main+0xfc>

00000f76 <__vector_12>:
}


//soft-uart timer
ISR (TIMER0_COMPA_vect)
{
     f76:	1f 92       	push	r1
     f78:	0f 92       	push	r0
     f7a:	0f b6       	in	r0, 0x3f	; 63
     f7c:	0f 92       	push	r0
     f7e:	11 24       	eor	r1, r1
     f80:	2f 93       	push	r18
     f82:	3f 93       	push	r19
     f84:	4f 93       	push	r20
     f86:	5f 93       	push	r21
     f88:	8f 93       	push	r24
     f8a:	9f 93       	push	r25
	/*disable interrupts, should we or allow NMI of tamper switch detect? */
	//cli();
	//sei();
	TCNT0 = 0x00;
     f8c:	16 bc       	out	0x26, r1	; 38
	int i;
	PORTC ^= _BV(PORTC6);		//toggle gp6 to check on progress
     f8e:	9a b1       	in	r25, 0x0a	; 10
     f90:	80 e4       	ldi	r24, 0x40	; 64
     f92:	89 27       	eor	r24, r25
     f94:	8a b9       	out	0x0a, r24	; 10
	if (receiving) {
     f96:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <receiving>
     f9a:	88 23       	and	r24, r24
     f9c:	49 f0       	breq	.+18     	; 0xfb0 <__vector_12+0x3a>
		if (start_bit)	{
     f9e:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <start_bit>
     fa2:	88 23       	and	r24, r24
     fa4:	79 f1       	breq	.+94     	; 0x1004 <__vector_12+0x8e>
			start_bit--;
     fa6:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <start_bit>
     faa:	81 50       	subi	r24, 0x01	; 1
     fac:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <start_bit>
				//return;
			}
			rcv_bit_count--;
		}
	}
	if (sending){
     fb0:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <sending>
     fb4:	88 23       	and	r24, r24
     fb6:	d9 f0       	breq	.+54     	; 0xfee <__vector_12+0x78>
		if (start_bit == 1)	{
     fb8:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <start_bit>
     fbc:	81 30       	cpi	r24, 0x01	; 1
     fbe:	09 f4       	brne	.+2      	; 0xfc2 <__vector_12+0x4c>
     fc0:	54 c0       	rjmp	.+168    	; 0x106a <__vector_12+0xf4>
			start_bit = 0;
			PORTB &= ~_BV(PORTB2);  //PORTB3 to PORTB2
		}
		else {
			if (tx_bit_count<8){
     fc2:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <tx_bit_count>
     fc6:	88 30       	cpi	r24, 0x08	; 8
     fc8:	d8 f5       	brcc	.+118    	; 0x1040 <__vector_12+0xca>
				if (tx_char & (1<<tx_bit_count)){  //check the bit sending LSB first
     fca:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <tx_char>
     fce:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <tx_bit_count>
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <__vector_12+0x64>
     fd6:	95 95       	asr	r25
     fd8:	87 95       	ror	r24
     fda:	2a 95       	dec	r18
     fdc:	e2 f7       	brpl	.-8      	; 0xfd6 <__vector_12+0x60>
     fde:	80 ff       	sbrs	r24, 0
     fe0:	3d c0       	rjmp	.+122    	; 0x105c <__vector_12+0xe6>
					PORTB |= _BV(PORTB2);
     fe2:	32 9a       	sbi	0x06, 2	; 6
				PORTB |= _BV(PORTB2);        //send stop bit
				TIMSK0 &= ~(1<<OCIE0A);		//stop the bit timer
				sending = 0;
				PORTC |= _BV(PORTC6);
			}
			tx_bit_count++;
     fe4:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <tx_bit_count>
     fe8:	8f 5f       	subi	r24, 0xFF	; 255
     fea:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <tx_bit_count>
		
	}
	//
	//sei();
	
}
     fee:	9f 91       	pop	r25
     ff0:	8f 91       	pop	r24
     ff2:	5f 91       	pop	r21
     ff4:	4f 91       	pop	r20
     ff6:	3f 91       	pop	r19
     ff8:	2f 91       	pop	r18
     ffa:	0f 90       	pop	r0
     ffc:	0f be       	out	0x3f, r0	; 63
     ffe:	0f 90       	pop	r0
    1000:	1f 90       	pop	r1
    1002:	18 95       	reti
		if (start_bit)	{
			start_bit--;
			//skip first bit
		}
		else {	
			if (rcv_bit_count-1 > 0) {     //looking for data) 
    1004:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <rcv_bit_count>
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	02 97       	sbiw	r24, 0x02	; 2
    100c:	94 f1       	brlt	.+100    	; 0x1072 <__vector_12+0xfc>
				rcv_char |= ((PINB & (1<<3))>>3)<<(9-rcv_bit_count);  //from (1<<2) to (1<<3)
    100e:	84 b1       	in	r24, 0x04	; 4
    1010:	50 91 27 01 	lds	r21, 0x0127	; 0x800127 <rcv_bit_count>
    1014:	40 91 20 01 	lds	r20, 0x0120	; 0x800120 <rcv_char>
    1018:	83 fb       	bst	r24, 3
    101a:	22 27       	eor	r18, r18
    101c:	20 f9       	bld	r18, 0
    101e:	89 e0       	ldi	r24, 0x09	; 9
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	85 1b       	sub	r24, r21
    1024:	91 09       	sbc	r25, r1
    1026:	01 c0       	rjmp	.+2      	; 0x102a <__vector_12+0xb4>
    1028:	22 0f       	add	r18, r18
    102a:	8a 95       	dec	r24
    102c:	ea f7       	brpl	.-6      	; 0x1028 <__vector_12+0xb2>
    102e:	24 2b       	or	r18, r20
    1030:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <rcv_char>
				//PCICR |= _BV(PCIE1);
				PORTC |= _BV(PORTC6);
				receiving = 0;
				//return;
			}
			rcv_bit_count--;
    1034:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <rcv_bit_count>
    1038:	81 50       	subi	r24, 0x01	; 1
    103a:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <rcv_bit_count>
    103e:	b8 cf       	rjmp	.-144    	; 0xfb0 <__vector_12+0x3a>
				}
				else{
					PORTB &= ~_BV(PORTB2);
				}
			}
			else if (tx_bit_count == 8){
    1040:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <tx_bit_count>
    1044:	88 30       	cpi	r24, 0x08	; 8
    1046:	71 f6       	brne	.-100    	; 0xfe4 <__vector_12+0x6e>
				PORTB |= _BV(PORTB2);        //send stop bit
    1048:	32 9a       	sbi	0x06, 2	; 6
				TIMSK0 &= ~(1<<OCIE0A);		//stop the bit timer
    104a:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
    104e:	8d 7f       	andi	r24, 0xFD	; 253
    1050:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
				sending = 0;
    1054:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <sending>
				PORTC |= _BV(PORTC6);
    1058:	56 9a       	sbi	0x0a, 6	; 10
    105a:	c4 cf       	rjmp	.-120    	; 0xfe4 <__vector_12+0x6e>
			if (tx_bit_count<8){
				if (tx_char & (1<<tx_bit_count)){  //check the bit sending LSB first
					PORTB |= _BV(PORTB2);
				}
				else{
					PORTB &= ~_BV(PORTB2);
    105c:	32 98       	cbi	0x06, 2	; 6
				PORTB |= _BV(PORTB2);        //send stop bit
				TIMSK0 &= ~(1<<OCIE0A);		//stop the bit timer
				sending = 0;
				PORTC |= _BV(PORTC6);
			}
			tx_bit_count++;
    105e:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <tx_bit_count>
    1062:	8f 5f       	subi	r24, 0xFF	; 255
    1064:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <tx_bit_count>
    1068:	c2 cf       	rjmp	.-124    	; 0xfee <__vector_12+0x78>
			rcv_bit_count--;
		}
	}
	if (sending){
		if (start_bit == 1)	{
			start_bit = 0;
    106a:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <start_bit>
			PORTB &= ~_BV(PORTB2);  //PORTB3 to PORTB2
    106e:	32 98       	cbi	0x06, 2	; 6
    1070:	be cf       	rjmp	.-132    	; 0xfee <__vector_12+0x78>
		else {	
			if (rcv_bit_count-1 > 0) {     //looking for data) 
				rcv_char |= ((PINB & (1<<3))>>3)<<(9-rcv_bit_count);  //from (1<<2) to (1<<3)
				//rcv[9-rcv_bit_count] = (PINB & (1<<3))>>3;
			}
			else if (rcv_bit_count == 0) {  //looking for stop bit
    1072:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <rcv_bit_count>
    1076:	81 11       	cpse	r24, r1
    1078:	dd cf       	rjmp	.-70     	; 0x1034 <__vector_12+0xbe>
				if (PINB & (1<<PINB3)) {    //PINB2 to PINB3
					rcv_valid = 1;
    107a:	81 e0       	ldi	r24, 0x01	; 1
			if (rcv_bit_count-1 > 0) {     //looking for data) 
				rcv_char |= ((PINB & (1<<3))>>3)<<(9-rcv_bit_count);  //from (1<<2) to (1<<3)
				//rcv[9-rcv_bit_count] = (PINB & (1<<3))>>3;
			}
			else if (rcv_bit_count == 0) {  //looking for stop bit
				if (PINB & (1<<PINB3)) {    //PINB2 to PINB3
    107c:	23 9b       	sbis	0x04, 3	; 4
    107e:	14 c0       	rjmp	.+40     	; 0x10a8 <__vector_12+0x132>
					rcv_valid = 1;
    1080:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <rcv_valid>
					AVR_LED_PORT ^= _BV(AVR_LED_RED_BIT);
    1084:	92 b1       	in	r25, 0x02	; 2
    1086:	88 e0       	ldi	r24, 0x08	; 8
    1088:	89 27       	eor	r24, r25
    108a:	82 b9       	out	0x02, r24	; 2
				}
				else {
					rcv_error_stop = 1;
				}
				TIMSK0 &= ~(1<<OCIE0A);		//stop the bit timer
    108c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
    1090:	8d 7f       	andi	r24, 0xFD	; 253
    1092:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
				PCMSK1 |= _BV(PCINT11);		//enable start bit detect INT10 to INT11
    1096:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__EEPROM_REGION_LENGTH__+0x7f006c>
    109a:	88 60       	ori	r24, 0x08	; 8
    109c:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__EEPROM_REGION_LENGTH__+0x7f006c>
				//PCICR |= _BV(PCIE1);
				PORTC |= _BV(PORTC6);
    10a0:	56 9a       	sbi	0x0a, 6	; 10
				receiving = 0;
    10a2:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <receiving>
    10a6:	c6 cf       	rjmp	.-116    	; 0x1034 <__vector_12+0xbe>
				if (PINB & (1<<PINB3)) {    //PINB2 to PINB3
					rcv_valid = 1;
					AVR_LED_PORT ^= _BV(AVR_LED_RED_BIT);
				}
				else {
					rcv_error_stop = 1;
    10a8:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <rcv_error_stop>
    10ac:	ef cf       	rjmp	.-34     	; 0x108c <__vector_12+0x116>

000010ae <__vector_9>:
	//sei();
	
}

ISR (TIMER1_COMPA_vect)
{
    10ae:	1f 92       	push	r1
    10b0:	0f 92       	push	r0
    10b2:	0f b6       	in	r0, 0x3f	; 63
    10b4:	0f 92       	push	r0
    10b6:	11 24       	eor	r1, r1
    10b8:	8f 93       	push	r24
    10ba:	ef 93       	push	r30
    10bc:	ff 93       	push	r31
	/*disable interrupts, should we or allow NMI of tamper switch detect? */
	//cli();
	//sei();
	TCNT1 = 0x00;
    10be:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
    10c2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	int i;
	//PORTC ^= _BV(PORTC6);		//toggle gp6 to check on progress
	TIMSK1 &= ~(1<<OCIE1A);		//stop the  timer
    10c6:	ef e6       	ldi	r30, 0x6F	; 111
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	8d 7f       	andi	r24, 0xFD	; 253
    10ce:	80 83       	st	Z, r24
	usart_to = 0;
	
    10d0:	ff 91       	pop	r31
    10d2:	ef 91       	pop	r30
    10d4:	8f 91       	pop	r24
    10d6:	0f 90       	pop	r0
    10d8:	0f be       	out	0x3f, r0	; 63
    10da:	0f 90       	pop	r0
    10dc:	1f 90       	pop	r1
    10de:	18 95       	reti

000010e0 <__divmodhi4>:
    10e0:	97 fb       	bst	r25, 7
    10e2:	07 2e       	mov	r0, r23
    10e4:	16 f4       	brtc	.+4      	; 0x10ea <__divmodhi4+0xa>
    10e6:	00 94       	com	r0
    10e8:	06 d0       	rcall	.+12     	; 0x10f6 <__divmodhi4_neg1>
    10ea:	77 fd       	sbrc	r23, 7
    10ec:	08 d0       	rcall	.+16     	; 0x10fe <__divmodhi4_neg2>
    10ee:	0b d0       	rcall	.+22     	; 0x1106 <__udivmodhi4>
    10f0:	07 fc       	sbrc	r0, 7
    10f2:	05 d0       	rcall	.+10     	; 0x10fe <__divmodhi4_neg2>
    10f4:	3e f4       	brtc	.+14     	; 0x1104 <__divmodhi4_exit>

000010f6 <__divmodhi4_neg1>:
    10f6:	90 95       	com	r25
    10f8:	81 95       	neg	r24
    10fa:	9f 4f       	sbci	r25, 0xFF	; 255
    10fc:	08 95       	ret

000010fe <__divmodhi4_neg2>:
    10fe:	70 95       	com	r23
    1100:	61 95       	neg	r22
    1102:	7f 4f       	sbci	r23, 0xFF	; 255

00001104 <__divmodhi4_exit>:
    1104:	08 95       	ret

00001106 <__udivmodhi4>:
    1106:	aa 1b       	sub	r26, r26
    1108:	bb 1b       	sub	r27, r27
    110a:	51 e1       	ldi	r21, 0x11	; 17
    110c:	07 c0       	rjmp	.+14     	; 0x111c <__udivmodhi4_ep>

0000110e <__udivmodhi4_loop>:
    110e:	aa 1f       	adc	r26, r26
    1110:	bb 1f       	adc	r27, r27
    1112:	a6 17       	cp	r26, r22
    1114:	b7 07       	cpc	r27, r23
    1116:	10 f0       	brcs	.+4      	; 0x111c <__udivmodhi4_ep>
    1118:	a6 1b       	sub	r26, r22
    111a:	b7 0b       	sbc	r27, r23

0000111c <__udivmodhi4_ep>:
    111c:	88 1f       	adc	r24, r24
    111e:	99 1f       	adc	r25, r25
    1120:	5a 95       	dec	r21
    1122:	a9 f7       	brne	.-22     	; 0x110e <__udivmodhi4_loop>
    1124:	80 95       	com	r24
    1126:	90 95       	com	r25
    1128:	bc 01       	movw	r22, r24
    112a:	cd 01       	movw	r24, r26
    112c:	08 95       	ret

0000112e <_exit>:
    112e:	f8 94       	cli

00001130 <__stop_program>:
    1130:	ff cf       	rjmp	.-2      	; 0x1130 <__stop_program>
