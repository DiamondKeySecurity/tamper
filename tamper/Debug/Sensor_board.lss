
Sensor_board.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000a9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a26  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800100  00800100  00000a9a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a9a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000acc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00000b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001342  00000000  00000000  00000cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b5c  00000000  00000000  00002032  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fdc  00000000  00000000  00002b8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000724  00000000  00000000  00003b6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006c1  00000000  00000000  00004290  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e69  00000000  00000000  00004951  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  000057ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	c6 c2       	rjmp	.+1420   	; 0x590 <__vector_1>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	ac c2       	rjmp	.+1368   	; 0x560 <__vector_3>
   8:	23 c3       	rjmp	.+1606   	; 0x650 <__vector_4>
   a:	f4 c2       	rjmp	.+1512   	; 0x5f4 <__vector_5>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	a5 c4       	rjmp	.+2378   	; 0x964 <__vector_12>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	21 e0       	ldi	r18, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	aa 30       	cpi	r26, 0x0A	; 10
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	1a d4       	rcall	.+2100   	; 0x886 <main>
  52:	e7 c4       	rjmp	.+2510   	; 0xa22 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <adx_chip_select>:
#include "tamper.h"
#include "ssp.h"


void adx_chip_select(int select_flag)
{
  56:	cf 93       	push	r28
  58:	df 93       	push	r29
  5a:	00 d0       	rcall	.+0      	; 0x5c <adx_chip_select+0x6>
  5c:	cd b7       	in	r28, 0x3d	; 61
  5e:	de b7       	in	r29, 0x3e	; 62
  60:	9a 83       	std	Y+2, r25	; 0x02
  62:	89 83       	std	Y+1, r24	; 0x01
	if (select_flag) {
  64:	89 81       	ldd	r24, Y+1	; 0x01
  66:	9a 81       	ldd	r25, Y+2	; 0x02
  68:	89 2b       	or	r24, r25
  6a:	51 f0       	breq	.+20     	; 0x80 <adx_chip_select+0x2a>
	AVR_GPIO_PORT &= ~_BV(DB_ADX_SS); /* CS low. */
  6c:	8a e2       	ldi	r24, 0x2A	; 42
  6e:	90 e0       	ldi	r25, 0x00	; 0
  70:	2a e2       	ldi	r18, 0x2A	; 42
  72:	30 e0       	ldi	r19, 0x00	; 0
  74:	f9 01       	movw	r30, r18
  76:	20 81       	ld	r18, Z
  78:	2f 7e       	andi	r18, 0xEF	; 239
  7a:	fc 01       	movw	r30, r24
  7c:	20 83       	st	Z, r18
	}
	else {
	AVR_GPIO_PORT |= _BV(DB_ADX_SS); /* CS high. */
	}
}
  7e:	09 c0       	rjmp	.+18     	; 0x92 <adx_chip_select+0x3c>
{
	if (select_flag) {
	AVR_GPIO_PORT &= ~_BV(DB_ADX_SS); /* CS low. */
	}
	else {
	AVR_GPIO_PORT |= _BV(DB_ADX_SS); /* CS high. */
  80:	8a e2       	ldi	r24, 0x2A	; 42
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	2a e2       	ldi	r18, 0x2A	; 42
  86:	30 e0       	ldi	r19, 0x00	; 0
  88:	f9 01       	movw	r30, r18
  8a:	20 81       	ld	r18, Z
  8c:	20 61       	ori	r18, 0x10	; 16
  8e:	fc 01       	movw	r30, r24
  90:	20 83       	st	Z, r18
	}
}
  92:	00 00       	nop
  94:	0f 90       	pop	r0
  96:	0f 90       	pop	r0
  98:	df 91       	pop	r29
  9a:	cf 91       	pop	r28
  9c:	08 95       	ret

0000009e <mlx_chip_select>:
void mlx_confirm_sleep(){
	mlx_chip_select(1);
	USART_Receive(MLX_CSLP);
	USART_Receive(0);
	mlx_chip_select(0);
}
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	00 d0       	rcall	.+0      	; 0xa4 <mlx_chip_select+0x6>
  a4:	cd b7       	in	r28, 0x3d	; 61
  a6:	de b7       	in	r29, 0x3e	; 62
  a8:	9a 83       	std	Y+2, r25	; 0x02
  aa:	89 83       	std	Y+1, r24	; 0x01
  ac:	89 81       	ldd	r24, Y+1	; 0x01
  ae:	9a 81       	ldd	r25, Y+2	; 0x02
  b0:	89 2b       	or	r24, r25
  b2:	51 f0       	breq	.+20     	; 0xc8 <mlx_chip_select+0x2a>
  b4:	8a e2       	ldi	r24, 0x2A	; 42
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	2a e2       	ldi	r18, 0x2A	; 42
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	f9 01       	movw	r30, r18
  be:	20 81       	ld	r18, Z
  c0:	2f 7d       	andi	r18, 0xDF	; 223
  c2:	fc 01       	movw	r30, r24
  c4:	20 83       	st	Z, r18
  c6:	09 c0       	rjmp	.+18     	; 0xda <mlx_chip_select+0x3c>
  c8:	8a e2       	ldi	r24, 0x2A	; 42
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	2a e2       	ldi	r18, 0x2A	; 42
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	f9 01       	movw	r30, r18
  d2:	20 81       	ld	r18, Z
  d4:	20 62       	ori	r18, 0x20	; 32
  d6:	fc 01       	movw	r30, r24
  d8:	20 83       	st	Z, r18
  da:	00 00       	nop
  dc:	0f 90       	pop	r0
  de:	0f 90       	pop	r0
  e0:	df 91       	pop	r29
  e2:	cf 91       	pop	r28
  e4:	08 95       	ret

000000e6 <mlx_sleep>:
uint8_t mlx_sleep()
{
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
  ea:	1f 92       	push	r1
  ec:	cd b7       	in	r28, 0x3d	; 61
  ee:	de b7       	in	r29, 0x3e	; 62
	uint8_t confirm;
	mlx_chip_select(1);
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	d4 df       	rcall	.-88     	; 0x9e <mlx_chip_select>
	USART_Receive(MLX_RS);
  f6:	80 ef       	ldi	r24, 0xF0	; 240
  f8:	96 d0       	rcall	.+300    	; 0x226 <USART_Receive>
	USART_Receive(0);
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	94 d0       	rcall	.+296    	; 0x226 <USART_Receive>
	mlx_chip_select(0);
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	cd df       	rcall	.-102    	; 0x9e <mlx_chip_select>
	/* put MLX in to lowest power, disables WDOG and measurements*/
	/*first make request*/
	mlx_chip_select(1);
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	ca df       	rcall	.-108    	; 0x9e <mlx_chip_select>
	USART_Receive(MLX_RSLP);
 10a:	81 ee       	ldi	r24, 0xE1	; 225
 10c:	8c d0       	rcall	.+280    	; 0x226 <USART_Receive>
	USART_Receive(0);
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	8a d0       	rcall	.+276    	; 0x226 <USART_Receive>
	mlx_chip_select(0);
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	c3 df       	rcall	.-122    	; 0x9e <mlx_chip_select>
	
	/*then confirm*/
	mlx_chip_select(1);
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	c0 df       	rcall	.-128    	; 0x9e <mlx_chip_select>
	confirm = USART_Receive(MLX_CSLP);
 11e:	83 ea       	ldi	r24, 0xA3	; 163
 120:	82 d0       	rcall	.+260    	; 0x226 <USART_Receive>
 122:	89 83       	std	Y+1, r24	; 0x01
	USART_Receive(0);
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	7f d0       	rcall	.+254    	; 0x226 <USART_Receive>
	mlx_chip_select(0);
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	b8 df       	rcall	.-144    	; 0x9e <mlx_chip_select>
	
	return confirm;	
 12e:	89 81       	ldd	r24, Y+1	; 0x01
 130:	0f 90       	pop	r0
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	08 95       	ret

00000138 <ssp_chip_select>:



void
ssp_chip_select(int select_flag)
{
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	00 d0       	rcall	.+0      	; 0x13e <ssp_chip_select+0x6>
 13e:	cd b7       	in	r28, 0x3d	; 61
 140:	de b7       	in	r29, 0x3e	; 62
 142:	9a 83       	std	Y+2, r25	; 0x02
 144:	89 83       	std	Y+1, r24	; 0x01
	if (select_flag)
 146:	89 81       	ldd	r24, Y+1	; 0x01
 148:	9a 81       	ldd	r25, Y+2	; 0x02
 14a:	89 2b       	or	r24, r25
 14c:	51 f0       	breq	.+20     	; 0x162 <ssp_chip_select+0x2a>
	AVR_GPIO_PORT &= ~_BV(DB_SSP_SS); /* CS low. */
 14e:	8a e2       	ldi	r24, 0x2A	; 42
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	2a e2       	ldi	r18, 0x2A	; 42
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	f9 01       	movw	r30, r18
 158:	20 81       	ld	r18, Z
 15a:	2f 77       	andi	r18, 0x7F	; 127
 15c:	fc 01       	movw	r30, r24
 15e:	20 83       	st	Z, r18
	else
	AVR_GPIO_PORT |= _BV(DB_SSP_SS); /* CS high. */
}
 160:	09 c0       	rjmp	.+18     	; 0x174 <ssp_chip_select+0x3c>
ssp_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_SSP_SS); /* CS low. */
	else
	AVR_GPIO_PORT |= _BV(DB_SSP_SS); /* CS high. */
 162:	8a e2       	ldi	r24, 0x2A	; 42
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	2a e2       	ldi	r18, 0x2A	; 42
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	f9 01       	movw	r30, r18
 16c:	20 81       	ld	r18, Z
 16e:	20 68       	ori	r18, 0x80	; 128
 170:	fc 01       	movw	r30, r24
 172:	20 83       	st	Z, r18
}
 174:	00 00       	nop
 176:	0f 90       	pop	r0
 178:	0f 90       	pop	r0
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	08 95       	ret

00000180 <spi_usart_setup>:

void
spi_usart_setup(int on_flag){
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	00 d0       	rcall	.+0      	; 0x186 <spi_usart_setup+0x6>
 186:	cd b7       	in	r28, 0x3d	; 61
 188:	de b7       	in	r29, 0x3e	; 62
 18a:	9a 83       	std	Y+2, r25	; 0x02
 18c:	89 83       	std	Y+1, r24	; 0x01
	if (on_flag)
 18e:	89 81       	ldd	r24, Y+1	; 0x01
 190:	9a 81       	ldd	r25, Y+2	; 0x02
 192:	89 2b       	or	r24, r25
 194:	21 f1       	breq	.+72     	; 0x1de <spi_usart_setup+0x5e>
	{
		UBRR = 0;
 196:	84 ec       	ldi	r24, 0xC4	; 196
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	fc 01       	movw	r30, r24
 19c:	11 82       	std	Z+1, r1	; 0x01
 19e:	10 82       	st	Z, r1
		/* set xck as output */
		DDRC = (1<<DDRC0) | (1<<DDRC4) | (1<<DDRC5) | (1<<DDRC7);
 1a0:	89 e2       	ldi	r24, 0x29	; 41
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	21 eb       	ldi	r18, 0xB1	; 177
 1a6:	fc 01       	movw	r30, r24
 1a8:	20 83       	st	Z, r18
		
		/*set USART to Master, SPI mode 0*/
		UCSRC = (1<<UMSEL1)|(1<<UMSEL0)|(1<<UCSZ0)|(1<UCPOL);
 1aa:	82 ec       	ldi	r24, 0xC2	; 194
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	22 ec       	ldi	r18, 0xC2	; 194
 1b0:	fc 01       	movw	r30, r24
 1b2:	20 83       	st	Z, r18
		/*Enable receiver and transmitter */
		UCSRB = (1<<RXEN)|(1<<TXEN);
 1b4:	81 ec       	ldi	r24, 0xC1	; 193
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	28 e1       	ldi	r18, 0x18	; 24
 1ba:	fc 01       	movw	r30, r24
 1bc:	20 83       	st	Z, r18
		/*set baud rate */
		UBRR = 0x0008;
 1be:	84 ec       	ldi	r24, 0xC4	; 196
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	28 e0       	ldi	r18, 0x08	; 8
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	fc 01       	movw	r30, r24
 1c8:	31 83       	std	Z+1, r19	; 0x01
 1ca:	20 83       	st	Z, r18
		ssp_chip_select(0);
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	b3 df       	rcall	.-154    	; 0x138 <ssp_chip_select>
		mlx_chip_select(0);
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	63 df       	rcall	.-314    	; 0x9e <mlx_chip_select>
		adx_chip_select(0);
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	3c df       	rcall	.-392    	; 0x56 <adx_chip_select>
	}
}
 1de:	00 00       	nop
 1e0:	0f 90       	pop	r0
 1e2:	0f 90       	pop	r0
 1e4:	df 91       	pop	r29
 1e6:	cf 91       	pop	r28
 1e8:	08 95       	ret

000001ea <ssp_boot>:

void
ssp_boot()
{
 1ea:	cf 93       	push	r28
 1ec:	df 93       	push	r29
 1ee:	00 d0       	rcall	.+0      	; 0x1f0 <ssp_boot+0x6>
 1f0:	cd b7       	in	r28, 0x3d	; 61
 1f2:	de b7       	in	r29, 0x3e	; 62
	/* on power up ssp chip needs it's chip select toggled once */
	ssp_chip_select(1);
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	9f df       	rcall	.-194    	; 0x138 <ssp_chip_select>
	for (int k = 0; k < 1500;k++);
 1fa:	1a 82       	std	Y+2, r1	; 0x02
 1fc:	19 82       	std	Y+1, r1	; 0x01
 1fe:	05 c0       	rjmp	.+10     	; 0x20a <ssp_boot+0x20>
 200:	89 81       	ldd	r24, Y+1	; 0x01
 202:	9a 81       	ldd	r25, Y+2	; 0x02
 204:	01 96       	adiw	r24, 0x01	; 1
 206:	9a 83       	std	Y+2, r25	; 0x02
 208:	89 83       	std	Y+1, r24	; 0x01
 20a:	89 81       	ldd	r24, Y+1	; 0x01
 20c:	9a 81       	ldd	r25, Y+2	; 0x02
 20e:	8c 3d       	cpi	r24, 0xDC	; 220
 210:	95 40       	sbci	r25, 0x05	; 5
 212:	b4 f3       	brlt	.-20     	; 0x200 <ssp_boot+0x16>
	ssp_chip_select(0);
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	8f df       	rcall	.-226    	; 0x138 <ssp_chip_select>
	
}
 21a:	00 00       	nop
 21c:	0f 90       	pop	r0
 21e:	0f 90       	pop	r0
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	08 95       	ret

00000226 <USART_Receive>:

uint8_t
USART_Receive (uint8_t data)
{
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
 22a:	1f 92       	push	r1
 22c:	cd b7       	in	r28, 0x3d	; 61
 22e:	de b7       	in	r29, 0x3e	; 62
 230:	89 83       	std	Y+1, r24	; 0x01
	/* wait for empty transmit buffer */
	while (!(UCSRA & (1<<UDRE)));
 232:	00 00       	nop
 234:	80 ec       	ldi	r24, 0xC0	; 192
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	fc 01       	movw	r30, r24
 23a:	80 81       	ld	r24, Z
 23c:	88 2f       	mov	r24, r24
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	80 72       	andi	r24, 0x20	; 32
 242:	99 27       	eor	r25, r25
 244:	89 2b       	or	r24, r25
 246:	b1 f3       	breq	.-20     	; 0x234 <USART_Receive+0xe>
	/*put data into buffer, sends data */
	UDR = data;
 248:	86 ec       	ldi	r24, 0xC6	; 198
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	29 81       	ldd	r18, Y+1	; 0x01
 24e:	fc 01       	movw	r30, r24
 250:	20 83       	st	Z, r18
	/*wait for the data to be received */
	while (!(UCSRA & (1<<RXC)));
 252:	00 00       	nop
 254:	80 ec       	ldi	r24, 0xC0	; 192
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	fc 01       	movw	r30, r24
 25a:	80 81       	ld	r24, Z
 25c:	88 23       	and	r24, r24
 25e:	d4 f7       	brge	.-12     	; 0x254 <USART_Receive+0x2e>
	return UDR;
 260:	86 ec       	ldi	r24, 0xC6	; 198
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	fc 01       	movw	r30, r24
 266:	80 81       	ld	r24, Z
}
 268:	0f 90       	pop	r0
 26a:	df 91       	pop	r29
 26c:	cf 91       	pop	r28
 26e:	08 95       	ret

00000270 <ssp_setup>:

void
ssp_setup()
{
 270:	cf 93       	push	r28
 272:	df 93       	push	r29
 274:	cd b7       	in	r28, 0x3d	; 61
 276:	de b7       	in	r29, 0x3e	; 62
	/* set for write and set I/O dir. register per board design */
	ssp_chip_select(1);
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	5d df       	rcall	.-326    	; 0x138 <ssp_chip_select>
	USART_Receive(SSP_WRITE);
 27e:	80 e4       	ldi	r24, 0x40	; 64
 280:	d2 df       	rcall	.-92     	; 0x226 <USART_Receive>
	USART_Receive(IODIRA);
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	d0 df       	rcall	.-96     	; 0x226 <USART_Receive>
	USART_Receive(SSP_IO);
 286:	81 e6       	ldi	r24, 0x61	; 97
 288:	ce df       	rcall	.-100    	; 0x226 <USART_Receive>
	ssp_chip_select(0);
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	54 df       	rcall	.-344    	; 0x138 <ssp_chip_select>
	
}
 290:	00 00       	nop
 292:	df 91       	pop	r29
 294:	cf 91       	pop	r28
 296:	08 95       	ret

00000298 <ssp_int_config>:

void
ssp_int_config()
{
 298:	cf 93       	push	r28
 29a:	df 93       	push	r29
 29c:	cd b7       	in	r28, 0x3d	; 61
 29e:	de b7       	in	r29, 0x3e	; 62
	
	/* set tamper gpio for interrupt on change */
	ssp_chip_select(1);
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	49 df       	rcall	.-366    	; 0x138 <ssp_chip_select>
	USART_Receive(SSP_WRITE);
 2a6:	80 e4       	ldi	r24, 0x40	; 64
 2a8:	be df       	rcall	.-132    	; 0x226 <USART_Receive>
	USART_Receive(INTCONA);
 2aa:	88 e0       	ldi	r24, 0x08	; 8
 2ac:	bc df       	rcall	.-136    	; 0x226 <USART_Receive>
	USART_Receive(TAMP_MON);
 2ae:	80 e4       	ldi	r24, 0x40	; 64
 2b0:	ba df       	rcall	.-140    	; 0x226 <USART_Receive>
	ssp_chip_select(0);
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	40 df       	rcall	.-384    	; 0x138 <ssp_chip_select>
	/* set tamper gpio for default value '0' */
	ssp_chip_select(1);
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	3d df       	rcall	.-390    	; 0x138 <ssp_chip_select>
	USART_Receive(SSP_WRITE);
 2be:	80 e4       	ldi	r24, 0x40	; 64
 2c0:	b2 df       	rcall	.-156    	; 0x226 <USART_Receive>
	USART_Receive(DEFVALA);
 2c2:	86 e0       	ldi	r24, 0x06	; 6
 2c4:	b0 df       	rcall	.-160    	; 0x226 <USART_Receive>
	USART_Receive(0x00);
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	ae df       	rcall	.-164    	; 0x226 <USART_Receive>
	ssp_chip_select(0);
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	34 df       	rcall	.-408    	; 0x138 <ssp_chip_select>
	//set IOCON INTPOL to 1?
	ssp_chip_select(1);
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	31 df       	rcall	.-414    	; 0x138 <ssp_chip_select>
	USART_Receive(SSP_WRITE);
 2d6:	80 e4       	ldi	r24, 0x40	; 64
 2d8:	a6 df       	rcall	.-180    	; 0x226 <USART_Receive>
	USART_Receive(IOCON);
 2da:	8a e0       	ldi	r24, 0x0A	; 10
 2dc:	a4 df       	rcall	.-184    	; 0x226 <USART_Receive>
	USART_Receive(0x00);
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	a2 df       	rcall	.-188    	; 0x226 <USART_Receive>
	ssp_chip_select(0);
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	28 df       	rcall	.-432    	; 0x138 <ssp_chip_select>
	/* read A to clear */
	ssp_chip_select(1);
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	25 df       	rcall	.-438    	; 0x138 <ssp_chip_select>
	USART_Receive(SSP_READ);
 2ee:	81 e4       	ldi	r24, 0x41	; 65
 2f0:	9a df       	rcall	.-204    	; 0x226 <USART_Receive>
	USART_Receive(GPIOA);
 2f2:	82 e1       	ldi	r24, 0x12	; 18
 2f4:	98 df       	rcall	.-208    	; 0x226 <USART_Receive>
	USART_Receive(0x00);
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	96 df       	rcall	.-212    	; 0x226 <USART_Receive>
	ssp_chip_select(0);
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	1c df       	rcall	.-456    	; 0x138 <ssp_chip_select>
	/* read incapA to clear */
	ssp_chip_select(1);
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	19 df       	rcall	.-462    	; 0x138 <ssp_chip_select>
	USART_Receive(SSP_READ);
 306:	81 e4       	ldi	r24, 0x41	; 65
 308:	8e df       	rcall	.-228    	; 0x226 <USART_Receive>
	USART_Receive(INTCAPA);
 30a:	80 e1       	ldi	r24, 0x10	; 16
 30c:	8c df       	rcall	.-232    	; 0x226 <USART_Receive>
	USART_Receive(0x00);
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	8a df       	rcall	.-236    	; 0x226 <USART_Receive>
	ssp_chip_select(0);
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	10 df       	rcall	.-480    	; 0x138 <ssp_chip_select>
	/* setup tamper gpio interrupt pin */
	ssp_chip_select(1);
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0d df       	rcall	.-486    	; 0x138 <ssp_chip_select>
	USART_Receive(SSP_WRITE);
 31e:	80 e4       	ldi	r24, 0x40	; 64
 320:	82 df       	rcall	.-252    	; 0x226 <USART_Receive>
	USART_Receive(GPINTENA);
 322:	84 e0       	ldi	r24, 0x04	; 4
 324:	80 df       	rcall	.-256    	; 0x226 <USART_Receive>
	USART_Receive(TAMP_MON);
 326:	80 e4       	ldi	r24, 0x40	; 64
 328:	7e df       	rcall	.-260    	; 0x226 <USART_Receive>
	ssp_chip_select(0);
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	04 df       	rcall	.-504    	; 0x138 <ssp_chip_select>
}
 330:	00 00       	nop
 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
 336:	08 95       	ret

00000338 <ssp_int_reset>:

void ssp_int_reset()
{
 338:	cf 93       	push	r28
 33a:	df 93       	push	r29
 33c:	cd b7       	in	r28, 0x3d	; 61
 33e:	de b7       	in	r29, 0x3e	; 62
	/* read incapA to clear */
	ssp_chip_select(1);
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	f9 de       	rcall	.-526    	; 0x138 <ssp_chip_select>
	USART_Receive(SSP_READ);
 346:	81 e4       	ldi	r24, 0x41	; 65
 348:	6e df       	rcall	.-292    	; 0x226 <USART_Receive>
	USART_Receive(INTCAPA);
 34a:	80 e1       	ldi	r24, 0x10	; 16
 34c:	6c df       	rcall	.-296    	; 0x226 <USART_Receive>
	USART_Receive(0x00);
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	6a df       	rcall	.-300    	; 0x226 <USART_Receive>
	ssp_chip_select(0);
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	f0 de       	rcall	.-544    	; 0x138 <ssp_chip_select>
}
 358:	00 00       	nop
 35a:	df 91       	pop	r29
 35c:	cf 91       	pop	r28
 35e:	08 95       	ret

00000360 <ssp_read_byte>:
	
                   
uint8_t
ssp_read_byte()
{
 360:	cf 93       	push	r28
 362:	df 93       	push	r29
 364:	1f 92       	push	r1
 366:	cd b7       	in	r28, 0x3d	; 61
 368:	de b7       	in	r29, 0x3e	; 62
	/* read port A */
	uint8_t temp;
	ssp_chip_select(1);
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	e4 de       	rcall	.-568    	; 0x138 <ssp_chip_select>
	USART_Receive(SSP_READ);
 370:	81 e4       	ldi	r24, 0x41	; 65
 372:	59 df       	rcall	.-334    	; 0x226 <USART_Receive>
	USART_Receive(INTFA);
 374:	8e e0       	ldi	r24, 0x0E	; 14
 376:	57 df       	rcall	.-338    	; 0x226 <USART_Receive>
	temp = USART_Receive(0x00);
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	55 df       	rcall	.-342    	; 0x226 <USART_Receive>
 37c:	89 83       	std	Y+1, r24	; 0x01
	ssp_chip_select(0);
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	da de       	rcall	.-588    	; 0x138 <ssp_chip_select>
	return temp;
 384:	89 81       	ldd	r24, Y+1	; 0x01
}
 386:	0f 90       	pop	r0
 388:	df 91       	pop	r29
 38a:	cf 91       	pop	r28
 38c:	08 95       	ret

0000038e <ssp_write>:

void
ssp_write(uint8_t value)
{
 38e:	cf 93       	push	r28
 390:	df 93       	push	r29
 392:	1f 92       	push	r1
 394:	cd b7       	in	r28, 0x3d	; 61
 396:	de b7       	in	r29, 0x3e	; 62
 398:	89 83       	std	Y+1, r24	; 0x01
	/* set for write and set I/O dir. register per board design */
	//ssp_out |= value;
	ssp_chip_select(1);
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	cc de       	rcall	.-616    	; 0x138 <ssp_chip_select>
	USART_Receive(SSP_WRITE);
 3a0:	80 e4       	ldi	r24, 0x40	; 64
 3a2:	41 df       	rcall	.-382    	; 0x226 <USART_Receive>
	USART_Receive(GPIOA);
 3a4:	82 e1       	ldi	r24, 0x12	; 18
 3a6:	3f df       	rcall	.-386    	; 0x226 <USART_Receive>
	USART_Receive(value);
 3a8:	89 81       	ldd	r24, Y+1	; 0x01
 3aa:	3d df       	rcall	.-390    	; 0x226 <USART_Receive>
	ssp_chip_select(0);
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	c3 de       	rcall	.-634    	; 0x138 <ssp_chip_select>
	ssp_chip_select(1);
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	c0 de       	rcall	.-640    	; 0x138 <ssp_chip_select>
	USART_Receive(SSP_WRITE);
 3b8:	80 e4       	ldi	r24, 0x40	; 64
 3ba:	35 df       	rcall	.-406    	; 0x226 <USART_Receive>
	USART_Receive(OLATA);
 3bc:	84 e1       	ldi	r24, 0x14	; 20
 3be:	33 df       	rcall	.-410    	; 0x226 <USART_Receive>
	USART_Receive(value);
 3c0:	89 81       	ldd	r24, Y+1	; 0x01
 3c2:	31 df       	rcall	.-414    	; 0x226 <USART_Receive>
	ssp_chip_select(0);
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	b7 de       	rcall	.-658    	; 0x138 <ssp_chip_select>
}
 3ca:	00 00       	nop
 3cc:	0f 90       	pop	r0
 3ce:	df 91       	pop	r29
 3d0:	cf 91       	pop	r28
 3d2:	08 95       	ret

000003d4 <mkm_chip_select>:
  mkm_chip_select(0);
  mkm_release();
  spi_setup(0);
  
  return data;
}
 3d4:	cf 93       	push	r28
 3d6:	df 93       	push	r29
 3d8:	00 d0       	rcall	.+0      	; 0x3da <mkm_chip_select+0x6>
 3da:	cd b7       	in	r28, 0x3d	; 61
 3dc:	de b7       	in	r29, 0x3e	; 62
 3de:	9a 83       	std	Y+2, r25	; 0x02
 3e0:	89 83       	std	Y+1, r24	; 0x01
 3e2:	89 81       	ldd	r24, Y+1	; 0x01
 3e4:	9a 81       	ldd	r25, Y+2	; 0x02
 3e6:	89 2b       	or	r24, r25
 3e8:	51 f0       	breq	.+20     	; 0x3fe <mkm_chip_select+0x2a>
 3ea:	82 e2       	ldi	r24, 0x22	; 34
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	22 e2       	ldi	r18, 0x22	; 34
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	f9 01       	movw	r30, r18
 3f4:	20 81       	ld	r18, Z
 3f6:	2f 7d       	andi	r18, 0xDF	; 223
 3f8:	fc 01       	movw	r30, r24
 3fa:	20 83       	st	Z, r18
 3fc:	09 c0       	rjmp	.+18     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3fe:	82 e2       	ldi	r24, 0x22	; 34
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	22 e2       	ldi	r18, 0x22	; 34
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	f9 01       	movw	r30, r18
 408:	20 81       	ld	r18, Z
 40a:	20 62       	ori	r18, 0x20	; 32
 40c:	fc 01       	movw	r30, r24
 40e:	20 83       	st	Z, r18
 410:	00 00       	nop
 412:	0f 90       	pop	r0
 414:	0f 90       	pop	r0
 416:	df 91       	pop	r29
 418:	cf 91       	pop	r28
 41a:	08 95       	ret

0000041c <mkm_grab>:
 41c:	cf 93       	push	r28
 41e:	df 93       	push	r29
 420:	cd b7       	in	r28, 0x3d	; 61
 422:	de b7       	in	r29, 0x3e	; 62
 424:	82 e2       	ldi	r24, 0x22	; 34
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	22 e2       	ldi	r18, 0x22	; 34
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	f9 01       	movw	r30, r18
 42e:	20 81       	ld	r18, Z
 430:	20 68       	ori	r18, 0x80	; 128
 432:	fc 01       	movw	r30, r24
 434:	20 83       	st	Z, r18
 436:	82 e2       	ldi	r24, 0x22	; 34
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	22 e2       	ldi	r18, 0x22	; 34
 43c:	30 e0       	ldi	r19, 0x00	; 0
 43e:	f9 01       	movw	r30, r18
 440:	20 81       	ld	r18, Z
 442:	2f 7b       	andi	r18, 0xBF	; 191
 444:	fc 01       	movw	r30, r24
 446:	20 83       	st	Z, r18
 448:	00 00       	nop
 44a:	df 91       	pop	r29
 44c:	cf 91       	pop	r28
 44e:	08 95       	ret

00000450 <mkm_release>:
 450:	cf 93       	push	r28
 452:	df 93       	push	r29
 454:	cd b7       	in	r28, 0x3d	; 61
 456:	de b7       	in	r29, 0x3e	; 62
 458:	82 e2       	ldi	r24, 0x22	; 34
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	22 e2       	ldi	r18, 0x22	; 34
 45e:	30 e0       	ldi	r19, 0x00	; 0
 460:	f9 01       	movw	r30, r18
 462:	20 81       	ld	r18, Z
 464:	20 64       	ori	r18, 0x40	; 64
 466:	fc 01       	movw	r30, r24
 468:	20 83       	st	Z, r18
 46a:	82 e2       	ldi	r24, 0x22	; 34
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	22 e2       	ldi	r18, 0x22	; 34
 470:	30 e0       	ldi	r19, 0x00	; 0
 472:	f9 01       	movw	r30, r18
 474:	20 81       	ld	r18, Z
 476:	2f 77       	andi	r18, 0x7F	; 127
 478:	fc 01       	movw	r30, r24
 47a:	20 83       	st	Z, r18
 47c:	00 00       	nop
 47e:	df 91       	pop	r29
 480:	cf 91       	pop	r28
 482:	08 95       	ret

00000484 <spi_setup>:
 484:	cf 93       	push	r28
 486:	df 93       	push	r29
 488:	00 d0       	rcall	.+0      	; 0x48a <spi_setup+0x6>
 48a:	cd b7       	in	r28, 0x3d	; 61
 48c:	de b7       	in	r29, 0x3e	; 62
 48e:	9a 83       	std	Y+2, r25	; 0x02
 490:	89 83       	std	Y+1, r24	; 0x01
 492:	89 81       	ldd	r24, Y+1	; 0x01
 494:	9a 81       	ldd	r25, Y+2	; 0x02
 496:	89 2b       	or	r24, r25
 498:	31 f1       	breq	.+76     	; 0x4e6 <spi_setup+0x62>
 49a:	84 e6       	ldi	r24, 0x64	; 100
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	24 e6       	ldi	r18, 0x64	; 100
 4a0:	30 e0       	ldi	r19, 0x00	; 0
 4a2:	f9 01       	movw	r30, r18
 4a4:	20 81       	ld	r18, Z
 4a6:	2b 7f       	andi	r18, 0xFB	; 251
 4a8:	fc 01       	movw	r30, r24
 4aa:	20 83       	st	Z, r18
 4ac:	8d e2       	ldi	r24, 0x2D	; 45
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	29 e0       	ldi	r18, 0x09	; 9
 4b2:	fc 01       	movw	r30, r24
 4b4:	20 83       	st	Z, r18
 4b6:	89 e2       	ldi	r24, 0x29	; 41
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	29 e2       	ldi	r18, 0x29	; 41
 4bc:	30 e0       	ldi	r19, 0x00	; 0
 4be:	f9 01       	movw	r30, r18
 4c0:	20 81       	ld	r18, Z
 4c2:	21 60       	ori	r18, 0x01	; 1
 4c4:	fc 01       	movw	r30, r24
 4c6:	20 83       	st	Z, r18
 4c8:	8c e4       	ldi	r24, 0x4C	; 76
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	21 e5       	ldi	r18, 0x51	; 81
 4ce:	fc 01       	movw	r30, r24
 4d0:	20 83       	st	Z, r18
 4d2:	82 e2       	ldi	r24, 0x22	; 34
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	22 e2       	ldi	r18, 0x22	; 34
 4d8:	30 e0       	ldi	r19, 0x00	; 0
 4da:	f9 01       	movw	r30, r18
 4dc:	20 81       	ld	r18, Z
 4de:	20 62       	ori	r18, 0x20	; 32
 4e0:	fc 01       	movw	r30, r24
 4e2:	20 83       	st	Z, r18
 4e4:	12 c0       	rjmp	.+36     	; 0x50a <spi_setup+0x86>
 4e6:	8c e4       	ldi	r24, 0x4C	; 76
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	2c e4       	ldi	r18, 0x4C	; 76
 4ec:	30 e0       	ldi	r19, 0x00	; 0
 4ee:	f9 01       	movw	r30, r18
 4f0:	20 81       	ld	r18, Z
 4f2:	2f 7b       	andi	r18, 0xBF	; 191
 4f4:	fc 01       	movw	r30, r24
 4f6:	20 83       	st	Z, r18
 4f8:	84 e6       	ldi	r24, 0x64	; 100
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	24 e6       	ldi	r18, 0x64	; 100
 4fe:	30 e0       	ldi	r19, 0x00	; 0
 500:	f9 01       	movw	r30, r18
 502:	20 81       	ld	r18, Z
 504:	24 60       	ori	r18, 0x04	; 4
 506:	fc 01       	movw	r30, r24
 508:	20 83       	st	Z, r18
 50a:	00 00       	nop
 50c:	0f 90       	pop	r0
 50e:	0f 90       	pop	r0
 510:	df 91       	pop	r29
 512:	cf 91       	pop	r28
 514:	08 95       	ret

00000516 <spi_write>:
 516:	cf 93       	push	r28
 518:	df 93       	push	r29
 51a:	1f 92       	push	r1
 51c:	cd b7       	in	r28, 0x3d	; 61
 51e:	de b7       	in	r29, 0x3e	; 62
 520:	89 83       	std	Y+1, r24	; 0x01
 522:	8e e4       	ldi	r24, 0x4E	; 78
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	29 81       	ldd	r18, Y+1	; 0x01
 528:	fc 01       	movw	r30, r24
 52a:	20 83       	st	Z, r18
 52c:	8d e4       	ldi	r24, 0x4D	; 77
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	fc 01       	movw	r30, r24
 532:	80 81       	ld	r24, Z
 534:	88 23       	and	r24, r24
 536:	d4 f7       	brge	.-12     	; 0x52c <spi_write+0x16>
 538:	00 00       	nop
 53a:	0f 90       	pop	r0
 53c:	df 91       	pop	r29
 53e:	cf 91       	pop	r28
 540:	08 95       	ret

00000542 <spi_set_operation>:
 542:	cf 93       	push	r28
 544:	df 93       	push	r29
 546:	1f 92       	push	r1
 548:	cd b7       	in	r28, 0x3d	; 61
 54a:	de b7       	in	r29, 0x3e	; 62
 54c:	89 83       	std	Y+1, r24	; 0x01
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	e2 df       	rcall	.-60     	; 0x516 <spi_write>
 552:	89 81       	ldd	r24, Y+1	; 0x01
 554:	e0 df       	rcall	.-64     	; 0x516 <spi_write>
 556:	00 00       	nop
 558:	0f 90       	pop	r0
 55a:	df 91       	pop	r29
 55c:	cf 91       	pop	r28
 55e:	08 95       	ret

00000560 <__vector_3>:
/* Interrupts         */
/* Tamper protection. */
#if 1
/* Interrupt handler for panic switch. */
ISR (PCINT0_vect)
{
 560:	1f 92       	push	r1
 562:	0f 92       	push	r0
 564:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
 568:	0f 92       	push	r0
 56a:	11 24       	eor	r1, r1
 56c:	cf 93       	push	r28
 56e:	df 93       	push	r29
 570:	00 d0       	rcall	.+0      	; 0x572 <__vector_3+0x12>
 572:	cd b7       	in	r28, 0x3d	; 61
 574:	de b7       	in	r29, 0x3e	; 62
volatile int i =0;
 576:	1a 82       	std	Y+2, r1	; 0x02
 578:	19 82       	std	Y+1, r1	; 0x01
}
 57a:	00 00       	nop
 57c:	0f 90       	pop	r0
 57e:	0f 90       	pop	r0
 580:	df 91       	pop	r29
 582:	cf 91       	pop	r28
 584:	0f 90       	pop	r0
 586:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
 58a:	0f 90       	pop	r0
 58c:	1f 90       	pop	r1
 58e:	18 95       	reti

00000590 <__vector_1>:
#endif

#if 1
/* Interrupt handler for case tamper switches. */
ISR (INT0_vect)
{
 590:	1f 92       	push	r1
 592:	0f 92       	push	r0
 594:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
 598:	0f 92       	push	r0
 59a:	11 24       	eor	r1, r1
 59c:	2f 93       	push	r18
 59e:	3f 93       	push	r19
 5a0:	4f 93       	push	r20
 5a2:	5f 93       	push	r21
 5a4:	6f 93       	push	r22
 5a6:	7f 93       	push	r23
 5a8:	8f 93       	push	r24
 5aa:	9f 93       	push	r25
 5ac:	af 93       	push	r26
 5ae:	bf 93       	push	r27
 5b0:	ef 93       	push	r30
 5b2:	ff 93       	push	r31
 5b4:	cf 93       	push	r28
 5b6:	df 93       	push	r29
 5b8:	cd b7       	in	r28, 0x3d	; 61
 5ba:	de b7       	in	r29, 0x3e	; 62
	/*disable interrupts until memory is cleared */

	cli();
 5bc:	f8 94       	cli
	mkm_wipe();
 5be:	f2 d0       	rcall	.+484    	; 0x7a4 <mkm_wipe>
	/*TAMP_ON turns on LED and provides falling edge signal to Pi to indicate tamper event */
	ssp_write(TAMP_ON);
 5c0:	88 e0       	ldi	r24, 0x08	; 8
 5c2:	e5 de       	rcall	.-566    	; 0x38e <ssp_write>
	ssp_int_reset();   /*read INTFA reg to reset flag*/
 5c4:	b9 de       	rcall	.-654    	; 0x338 <ssp_int_reset>
	mkm_grab();		   /*prevents FPGA from accessing MKM */
 5c6:	2a df       	rcall	.-428    	; 0x41c <mkm_grab>
	sei();				/* re-enabling interrupts allows additional tamper trigger or tamper reset */
 5c8:	78 94       	sei
	//sleep_disable();
}
 5ca:	00 00       	nop
 5cc:	df 91       	pop	r29
 5ce:	cf 91       	pop	r28
 5d0:	ff 91       	pop	r31
 5d2:	ef 91       	pop	r30
 5d4:	bf 91       	pop	r27
 5d6:	af 91       	pop	r26
 5d8:	9f 91       	pop	r25
 5da:	8f 91       	pop	r24
 5dc:	7f 91       	pop	r23
 5de:	6f 91       	pop	r22
 5e0:	5f 91       	pop	r21
 5e2:	4f 91       	pop	r20
 5e4:	3f 91       	pop	r19
 5e6:	2f 91       	pop	r18
 5e8:	0f 90       	pop	r0
 5ea:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
 5ee:	0f 90       	pop	r0
 5f0:	1f 90       	pop	r1
 5f2:	18 95       	reti

000005f4 <__vector_5>:

/* Tamper reset. */
#if 1
/* Interrupt handler for tamper reset */
ISR (PCINT2_vect)
{
 5f4:	1f 92       	push	r1
 5f6:	0f 92       	push	r0
 5f8:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
 5fc:	0f 92       	push	r0
 5fe:	11 24       	eor	r1, r1
 600:	2f 93       	push	r18
 602:	3f 93       	push	r19
 604:	4f 93       	push	r20
 606:	5f 93       	push	r21
 608:	6f 93       	push	r22
 60a:	7f 93       	push	r23
 60c:	8f 93       	push	r24
 60e:	9f 93       	push	r25
 610:	af 93       	push	r26
 612:	bf 93       	push	r27
 614:	ef 93       	push	r30
 616:	ff 93       	push	r31
 618:	cf 93       	push	r28
 61a:	df 93       	push	r29
 61c:	cd b7       	in	r28, 0x3d	; 61
 61e:	de b7       	in	r29, 0x3e	; 62
	/* tamper reset is triggered by a falling edge signal,
	this was due to the last minute changes that required this input
	and it was cleaner to do a pull-up on the AVR rather than a pull-up (or pull-down)
	in the external harness*/
	mkm_release();
 620:	17 df       	rcall	.-466    	; 0x450 <mkm_release>
	ssp_write(~TAMP_ON);
 622:	87 ef       	ldi	r24, 0xF7	; 247
 624:	b4 de       	rcall	.-664    	; 0x38e <ssp_write>
}
 626:	00 00       	nop
 628:	df 91       	pop	r29
 62a:	cf 91       	pop	r28
 62c:	ff 91       	pop	r31
 62e:	ef 91       	pop	r30
 630:	bf 91       	pop	r27
 632:	af 91       	pop	r26
 634:	9f 91       	pop	r25
 636:	8f 91       	pop	r24
 638:	7f 91       	pop	r23
 63a:	6f 91       	pop	r22
 63c:	5f 91       	pop	r21
 63e:	4f 91       	pop	r20
 640:	3f 91       	pop	r19
 642:	2f 91       	pop	r18
 644:	0f 90       	pop	r0
 646:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
 64a:	0f 90       	pop	r0
 64c:	1f 90       	pop	r1
 64e:	18 95       	reti

00000650 <__vector_4>:

/* soft-UART RX */
#if 1
/* Detection of start bit */
ISR (PCINT1_vect)
{
 650:	1f 92       	push	r1
 652:	0f 92       	push	r0
 654:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
 658:	0f 92       	push	r0
 65a:	11 24       	eor	r1, r1
 65c:	2f 93       	push	r18
 65e:	3f 93       	push	r19
 660:	4f 93       	push	r20
 662:	5f 93       	push	r21
 664:	6f 93       	push	r22
 666:	7f 93       	push	r23
 668:	8f 93       	push	r24
 66a:	9f 93       	push	r25
 66c:	af 93       	push	r26
 66e:	bf 93       	push	r27
 670:	ef 93       	push	r30
 672:	ff 93       	push	r31
 674:	cf 93       	push	r28
 676:	df 93       	push	r29
 678:	cd b7       	in	r28, 0x3d	; 61
 67a:	de b7       	in	r29, 0x3e	; 62
	1. stop reacting to PINB2 changes until either;
		a.) 10 bit character is received or
		b.) we have a 10 bit timeout
	2. reload bit counter
	3. set timer A0 for a half-bit timer*/
	PCMSK1 &= ~_BV(PCINT10);
 67c:	8c e6       	ldi	r24, 0x6C	; 108
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	2c e6       	ldi	r18, 0x6C	; 108
 682:	30 e0       	ldi	r19, 0x00	; 0
 684:	f9 01       	movw	r30, r18
 686:	20 81       	ld	r18, Z
 688:	2b 7f       	andi	r18, 0xFB	; 251
 68a:	fc 01       	movw	r30, r24
 68c:	20 83       	st	Z, r18
	start_bit = 1;
 68e:	81 e0       	ldi	r24, 0x01	; 1
 690:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <start_bit>
	bit_count = 8;   // TBD 7 or 8? look for the stop bit?
 694:	88 e0       	ldi	r24, 0x08	; 8
 696:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <bit_count>
	rcv_char = 0x00; //flush receive buffer
 69a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <rcv_char>
	initTimer1(HALF_BIT);
 69e:	8f ef       	ldi	r24, 0xFF	; 255
 6a0:	3e d1       	rcall	.+636    	; 0x91e <initTimer1>
}
 6a2:	00 00       	nop
 6a4:	df 91       	pop	r29
 6a6:	cf 91       	pop	r28
 6a8:	ff 91       	pop	r31
 6aa:	ef 91       	pop	r30
 6ac:	bf 91       	pop	r27
 6ae:	af 91       	pop	r26
 6b0:	9f 91       	pop	r25
 6b2:	8f 91       	pop	r24
 6b4:	7f 91       	pop	r23
 6b6:	6f 91       	pop	r22
 6b8:	5f 91       	pop	r21
 6ba:	4f 91       	pop	r20
 6bc:	3f 91       	pop	r19
 6be:	2f 91       	pop	r18
 6c0:	0f 90       	pop	r0
 6c2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
 6c6:	0f 90       	pop	r0
 6c8:	1f 90       	pop	r1
 6ca:	18 95       	reti

000006cc <init_ports>:
  return !bit_is_set(AVR_PANIC_PIN, AVR_PANIC_BIT);
}

static inline void
init_ports()
{
 6cc:	cf 93       	push	r28
 6ce:	df 93       	push	r29
 6d0:	cd b7       	in	r28, 0x3d	; 61
 6d2:	de b7       	in	r29, 0x3e	; 62
  /* Configure all PORTA pins except the tamper detection pin as
     outputs. */
  DDRA = 0xff & ~_BV(AVR_PANIC_BIT);
 6d4:	81 e2       	ldi	r24, 0x21	; 33
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	2f ee       	ldi	r18, 0xEF	; 239
 6da:	fc 01       	movw	r30, r24
 6dc:	20 83       	st	Z, r18
  DDRB = 0xff & ~_BV(PINB3);
 6de:	85 e2       	ldi	r24, 0x25	; 37
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	27 ef       	ldi	r18, 0xF7	; 247
 6e4:	fc 01       	movw	r30, r24
 6e6:	20 83       	st	Z, r18
  DDRB = 0xff & ~_BV(PINB2);
 6e8:	85 e2       	ldi	r24, 0x25	; 37
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	2b ef       	ldi	r18, 0xFB	; 251
 6ee:	fc 01       	movw	r30, r24
 6f0:	20 83       	st	Z, r18
}
 6f2:	00 00       	nop
 6f4:	df 91       	pop	r29
 6f6:	cf 91       	pop	r28
 6f8:	08 95       	ret

000006fa <init_interrupts>:

static void
init_interrupts()
{
 6fa:	cf 93       	push	r28
 6fc:	df 93       	push	r29
 6fe:	cd b7       	in	r28, 0x3d	; 61
 700:	de b7       	in	r29, 0x3e	; 62
  //PCICR |= _BV(PCIE0|PCIE2);    /* Enable pin change interrupt on PCMSK0 & PCMSK2*/
  PCICR = (1<<PCIE0)|(1<<PCIE1)|(1<<PCIE2);
 702:	88 e6       	ldi	r24, 0x68	; 104
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	27 e0       	ldi	r18, 0x07	; 7
 708:	fc 01       	movw	r30, r24
 70a:	20 83       	st	Z, r18
  PCMSK0 |= _BV(PCINT4);        /* Set mask bit for PCINT4 (panic) */
 70c:	8b e6       	ldi	r24, 0x6B	; 107
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	2b e6       	ldi	r18, 0x6B	; 107
 712:	30 e0       	ldi	r19, 0x00	; 0
 714:	f9 01       	movw	r30, r18
 716:	20 81       	ld	r18, Z
 718:	20 61       	ori	r18, 0x10	; 16
 71a:	fc 01       	movw	r30, r24
 71c:	20 83       	st	Z, r18
  /*setup PC6 as tamper disable */
  PUEC = (1<<PUEC6);			/*enable internal pull-up to avoid false triggers */
 71e:	8b e2       	ldi	r24, 0x2B	; 43
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	20 e4       	ldi	r18, 0x40	; 64
 724:	fc 01       	movw	r30, r24
 726:	20 83       	st	Z, r18
  PCMSK2 |= _BV(PCINT22);
 728:	8d e6       	ldi	r24, 0x6D	; 109
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	2d e6       	ldi	r18, 0x6D	; 109
 72e:	30 e0       	ldi	r19, 0x00	; 0
 730:	f9 01       	movw	r30, r18
 732:	20 81       	ld	r18, Z
 734:	20 64       	ori	r18, 0x40	; 64
 736:	fc 01       	movw	r30, r24
 738:	20 83       	st	Z, r18
  /*setup PB2 as soft-UART RX*/
  PUEB = (1<<PUEB3) | (1<<PUEB2);			/*enable internal pull-up to detect start bit */
 73a:	87 e2       	ldi	r24, 0x27	; 39
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	2c e0       	ldi	r18, 0x0C	; 12
 740:	fc 01       	movw	r30, r24
 742:	20 83       	st	Z, r18
  PCMSK1 |= _BV(PCINT11);
 744:	8c e6       	ldi	r24, 0x6C	; 108
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	2c e6       	ldi	r18, 0x6C	; 108
 74a:	30 e0       	ldi	r19, 0x00	; 0
 74c:	f9 01       	movw	r30, r18
 74e:	20 81       	ld	r18, Z
 750:	28 60       	ori	r18, 0x08	; 8
 752:	fc 01       	movw	r30, r24
 754:	20 83       	st	Z, r18
  PCMSK1 |= _BV(PCINT10);
 756:	8c e6       	ldi	r24, 0x6C	; 108
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	2c e6       	ldi	r18, 0x6C	; 108
 75c:	30 e0       	ldi	r19, 0x00	; 0
 75e:	f9 01       	movw	r30, r18
 760:	20 81       	ld	r18, Z
 762:	24 60       	ori	r18, 0x04	; 4
 764:	fc 01       	movw	r30, r24
 766:	20 83       	st	Z, r18
  sei();
 768:	78 94       	sei
}
 76a:	00 00       	nop
 76c:	df 91       	pop	r29
 76e:	cf 91       	pop	r28
 770:	08 95       	ret

00000772 <init_int0>:

static void
init_int0()
{
 772:	cf 93       	push	r28
 774:	df 93       	push	r29
 776:	cd b7       	in	r28, 0x3d	; 61
 778:	de b7       	in	r29, 0x3e	; 62
	//this has to be done after the SPI expander has been set up for the proper levels
	//
	/*lets use the INT0 pin as triggered form the SPI expander low level */
	EICRA = 0x00;   /* insure that we are interrupting on low-level */
 77a:	89 e6       	ldi	r24, 0x69	; 105
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	fc 01       	movw	r30, r24
 780:	10 82       	st	Z, r1
	EIMSK = 0x01;		/*enable INT0 */
 782:	8d e3       	ldi	r24, 0x3D	; 61
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	21 e0       	ldi	r18, 0x01	; 1
 788:	fc 01       	movw	r30, r24
 78a:	20 83       	st	Z, r18
	//sei();
}
 78c:	00 00       	nop
 78e:	df 91       	pop	r29
 790:	cf 91       	pop	r28
 792:	08 95       	ret

00000794 <init_power_reduction>:

static void
init_power_reduction()
{
 794:	cf 93       	push	r28
 796:	df 93       	push	r29
 798:	cd b7       	in	r28, 0x3d	; 61
 79a:	de b7       	in	r29, 0x3e	; 62
  /* TBD: Disable everything that we don't need? Note that the effect
     of this should marginal since it's only saving energy when we're
     awaken and actualy wiping memory. */
  //MAD not sure what the original devloper meant by this.
}
 79c:	00 00       	nop
 79e:	df 91       	pop	r29
 7a0:	cf 91       	pop	r28
 7a2:	08 95       	ret

000007a4 <mkm_wipe>:

/*static inline*/ void
mkm_wipe()
{
 7a4:	cf 93       	push	r28
 7a6:	df 93       	push	r29
 7a8:	00 d0       	rcall	.+0      	; 0x7aa <mkm_wipe+0x6>
 7aa:	00 d0       	rcall	.+0      	; 0x7ac <mkm_wipe+0x8>
 7ac:	00 d0       	rcall	.+0      	; 0x7ae <mkm_wipe+0xa>
 7ae:	cd b7       	in	r28, 0x3d	; 61
 7b0:	de b7       	in	r29, 0x3e	; 62
  AVR_LED_PORT |= _BV(AVR_LED_RED_BIT);
 7b2:	82 e2       	ldi	r24, 0x22	; 34
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	22 e2       	ldi	r18, 0x22	; 34
 7b8:	30 e0       	ldi	r19, 0x00	; 0
 7ba:	f9 01       	movw	r30, r18
 7bc:	20 81       	ld	r18, Z
 7be:	28 60       	ori	r18, 0x08	; 8
 7c0:	fc 01       	movw	r30, r24
 7c2:	20 83       	st	Z, r18

  spi_setup(1);
 7c4:	81 e0       	ldi	r24, 0x01	; 1
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	5d de       	rcall	.-838    	; 0x484 <spi_setup>
  mkm_grab();
 7ca:	28 de       	rcall	.-944    	; 0x41c <mkm_grab>

  mkm_chip_select(1);
 7cc:	81 e0       	ldi	r24, 0x01	; 1
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	01 de       	rcall	.-1022   	; 0x3d4 <mkm_chip_select>
  spi_set_operation(SPI_OPERATION_SEQUENCE);
 7d2:	80 e4       	ldi	r24, 0x40	; 64
 7d4:	b6 de       	rcall	.-660    	; 0x542 <spi_set_operation>
  mkm_chip_select(0);
 7d6:	80 e0       	ldi	r24, 0x00	; 0
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	fc dd       	rcall	.-1032   	; 0x3d4 <mkm_chip_select>

  mkm_chip_select(1);
 7dc:	81 e0       	ldi	r24, 0x01	; 1
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	f9 dd       	rcall	.-1038   	; 0x3d4 <mkm_chip_select>
  spi_write(SPI_WRITE);
 7e2:	82 e0       	ldi	r24, 0x02	; 2
 7e4:	98 de       	rcall	.-720    	; 0x516 <spi_write>
  spi_write(0);                    /* Address, high byte. */
 7e6:	80 e0       	ldi	r24, 0x00	; 0
 7e8:	96 de       	rcall	.-724    	; 0x516 <spi_write>
  spi_write(0);                    /* Address, low byte. */
 7ea:	80 e0       	ldi	r24, 0x00	; 0
 7ec:	94 de       	rcall	.-728    	; 0x516 <spi_write>
  for (int i = 0; i < 0x1fff; i++) /* 8192 bytes (64Kbit). */
 7ee:	1a 82       	std	Y+2, r1	; 0x02
 7f0:	19 82       	std	Y+1, r1	; 0x01
 7f2:	07 c0       	rjmp	.+14     	; 0x802 <mkm_wipe+0x5e>
    spi_write(0);
 7f4:	80 e0       	ldi	r24, 0x00	; 0
 7f6:	8f de       	rcall	.-738    	; 0x516 <spi_write>

  mkm_chip_select(1);
  spi_write(SPI_WRITE);
  spi_write(0);                    /* Address, high byte. */
  spi_write(0);                    /* Address, low byte. */
  for (int i = 0; i < 0x1fff; i++) /* 8192 bytes (64Kbit). */
 7f8:	89 81       	ldd	r24, Y+1	; 0x01
 7fa:	9a 81       	ldd	r25, Y+2	; 0x02
 7fc:	01 96       	adiw	r24, 0x01	; 1
 7fe:	9a 83       	std	Y+2, r25	; 0x02
 800:	89 83       	std	Y+1, r24	; 0x01
 802:	89 81       	ldd	r24, Y+1	; 0x01
 804:	9a 81       	ldd	r25, Y+2	; 0x02
 806:	8f 3f       	cpi	r24, 0xFF	; 255
 808:	9f 41       	sbci	r25, 0x1F	; 31
 80a:	a4 f3       	brlt	.-24     	; 0x7f4 <mkm_wipe+0x50>
    spi_write(0);
  mkm_chip_select(0);
 80c:	80 e0       	ldi	r24, 0x00	; 0
 80e:	90 e0       	ldi	r25, 0x00	; 0
 810:	e1 dd       	rcall	.-1086   	; 0x3d4 <mkm_chip_select>

  mkm_release();
 812:	1e de       	rcall	.-964    	; 0x450 <mkm_release>
  spi_setup(0);
 814:	80 e0       	ldi	r24, 0x00	; 0
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	35 de       	rcall	.-918    	; 0x484 <spi_setup>

  AVR_LED_PORT &= ~_BV(AVR_LED_RED_BIT);
 81a:	82 e2       	ldi	r24, 0x22	; 34
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	22 e2       	ldi	r18, 0x22	; 34
 820:	30 e0       	ldi	r19, 0x00	; 0
 822:	f9 01       	movw	r30, r18
 824:	20 81       	ld	r18, Z
 826:	27 7f       	andi	r18, 0xF7	; 247
 828:	fc 01       	movw	r30, r24
 82a:	20 83       	st	Z, r18

  /* Flash blue LED three times to indicate wipe is done */
  for (int x = 0; x < 6; x++) {
 82c:	1c 82       	std	Y+4, r1	; 0x04
 82e:	1b 82       	std	Y+3, r1	; 0x03
 830:	1c c0       	rjmp	.+56     	; 0x86a <mkm_wipe+0xc6>
    AVR_LED_PORT ^= _BV(AVR_LED_BLUE_BIT);
 832:	82 e2       	ldi	r24, 0x22	; 34
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	22 e2       	ldi	r18, 0x22	; 34
 838:	30 e0       	ldi	r19, 0x00	; 0
 83a:	f9 01       	movw	r30, r18
 83c:	30 81       	ld	r19, Z
 83e:	21 e0       	ldi	r18, 0x01	; 1
 840:	23 27       	eor	r18, r19
 842:	fc 01       	movw	r30, r24
 844:	20 83       	st	Z, r18
    for (int i = 0; i < 3200; i++);
 846:	1e 82       	std	Y+6, r1	; 0x06
 848:	1d 82       	std	Y+5, r1	; 0x05
 84a:	05 c0       	rjmp	.+10     	; 0x856 <mkm_wipe+0xb2>
 84c:	8d 81       	ldd	r24, Y+5	; 0x05
 84e:	9e 81       	ldd	r25, Y+6	; 0x06
 850:	01 96       	adiw	r24, 0x01	; 1
 852:	9e 83       	std	Y+6, r25	; 0x06
 854:	8d 83       	std	Y+5, r24	; 0x05
 856:	8d 81       	ldd	r24, Y+5	; 0x05
 858:	9e 81       	ldd	r25, Y+6	; 0x06
 85a:	80 38       	cpi	r24, 0x80	; 128
 85c:	9c 40       	sbci	r25, 0x0C	; 12
 85e:	b4 f3       	brlt	.-20     	; 0x84c <mkm_wipe+0xa8>
  spi_setup(0);

  AVR_LED_PORT &= ~_BV(AVR_LED_RED_BIT);

  /* Flash blue LED three times to indicate wipe is done */
  for (int x = 0; x < 6; x++) {
 860:	8b 81       	ldd	r24, Y+3	; 0x03
 862:	9c 81       	ldd	r25, Y+4	; 0x04
 864:	01 96       	adiw	r24, 0x01	; 1
 866:	9c 83       	std	Y+4, r25	; 0x04
 868:	8b 83       	std	Y+3, r24	; 0x03
 86a:	8b 81       	ldd	r24, Y+3	; 0x03
 86c:	9c 81       	ldd	r25, Y+4	; 0x04
 86e:	06 97       	sbiw	r24, 0x06	; 6
 870:	04 f3       	brlt	.-64     	; 0x832 <mkm_wipe+0x8e>
    AVR_LED_PORT ^= _BV(AVR_LED_BLUE_BIT);
    for (int i = 0; i < 3200; i++);
  }
}
 872:	00 00       	nop
 874:	26 96       	adiw	r28, 0x06	; 6
 876:	0f b6       	in	r0, 0x3f	; 63
 878:	f8 94       	cli
 87a:	de bf       	out	0x3e, r29	; 62
 87c:	0f be       	out	0x3f, r0	; 63
 87e:	cd bf       	out	0x3d, r28	; 61
 880:	df 91       	pop	r29
 882:	cf 91       	pop	r28
 884:	08 95       	ret

00000886 <main>:
  //sleep_cpu();			  /*MAD also redundant? ok, enough redundnacy already*/
 //SMCR &= ~0x1;               /* Disable sleep. Nah, let's not and say we did. */
}
int
main()
{
 886:	cf 93       	push	r28
 888:	df 93       	push	r29
 88a:	00 d0       	rcall	.+0      	; 0x88c <main+0x6>
 88c:	00 d0       	rcall	.+0      	; 0x88e <main+0x8>
 88e:	00 d0       	rcall	.+0      	; 0x890 <main+0xa>
 890:	cd b7       	in	r28, 0x3d	; 61
 892:	de b7       	in	r29, 0x3e	; 62
  init_ports();
 894:	1b df       	rcall	.-458    	; 0x6cc <init_ports>
  init_power_reduction();
 896:	7e df       	rcall	.-260    	; 0x794 <init_power_reduction>
  init_interrupts();
 898:	30 df       	rcall	.-416    	; 0x6fa <init_interrupts>
  uint8_t ssp_status = 0;
 89a:	1b 82       	std	Y+3, r1	; 0x03
  wd_init = 0x01;
 89c:	81 e0       	ldi	r24, 0x01	; 1
 89e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <wd_init>
  ssp_out = WDOG_RS;
 8a2:	80 e1       	ldi	r24, 0x10	; 16
 8a4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  
  spi_usart_setup(1);
 8a8:	81 e0       	ldi	r24, 0x01	; 1
 8aa:	90 e0       	ldi	r25, 0x00	; 0
 8ac:	69 dc       	rcall	.-1838   	; 0x180 <spi_usart_setup>
  mlx_sleep();
  //ensure that adx is also at low power mode

  adx_wr_reg(ADX_POWER_CTL, 0x00);
  adx_rd_reg(ADX_STATUS);*/
  ssp_boot();
 8ae:	9d dc       	rcall	.-1734   	; 0x1ea <ssp_boot>
  //ssp_read_byte();
  //setup directions for ssp pins
  ssp_setup();
 8b0:	df dc       	rcall	.-1602   	; 0x270 <ssp_setup>
  //cycle the TAMP_CLR to reset the relays and turn of LEDS
  //to save power. Keep WDOG signal in high state
  ssp_write(ssp_out|0x02);
 8b2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 8b6:	82 60       	ori	r24, 0x02	; 2
 8b8:	6a dd       	rcall	.-1324   	; 0x38e <ssp_write>
  ssp_write(ssp_out);
 8ba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 8be:	67 dd       	rcall	.-1330   	; 0x38e <ssp_write>
  //setup the tamper monitoring input
  ssp_int_config();
 8c0:	eb dc       	rcall	.-1578   	; 0x298 <ssp_int_config>
 uint8_t check =  ssp_read_byte();
 8c2:	4e dd       	rcall	.-1380   	; 0x360 <ssp_read_byte>
 8c4:	8c 83       	std	Y+4, r24	; 0x04
  init_int0();
 8c6:	55 df       	rcall	.-342    	; 0x772 <init_int0>
  mlx_sleep();
 8c8:	0e dc       	rcall	.-2020   	; 0xe6 <mlx_sleep>
  mlx_setup();
  mlx_start_meas();*/
  
  //initTimer1(TWD_INIT);
  
  mkm_release();
 8ca:	c2 dd       	rcall	.-1148   	; 0x450 <mkm_release>
  /* Flash LED's at startup. */
  AVR_LED_PORT |= 0x0f;
 8cc:	82 e2       	ldi	r24, 0x22	; 34
 8ce:	90 e0       	ldi	r25, 0x00	; 0
 8d0:	22 e2       	ldi	r18, 0x22	; 34
 8d2:	30 e0       	ldi	r19, 0x00	; 0
 8d4:	f9 01       	movw	r30, r18
 8d6:	20 81       	ld	r18, Z
 8d8:	2f 60       	ori	r18, 0x0F	; 15
 8da:	fc 01       	movw	r30, r24
 8dc:	20 83       	st	Z, r18
  for (int i = 0; i < 16000; i++);
 8de:	1a 82       	std	Y+2, r1	; 0x02
 8e0:	19 82       	std	Y+1, r1	; 0x01
 8e2:	05 c0       	rjmp	.+10     	; 0x8ee <main+0x68>
 8e4:	89 81       	ldd	r24, Y+1	; 0x01
 8e6:	9a 81       	ldd	r25, Y+2	; 0x02
 8e8:	01 96       	adiw	r24, 0x01	; 1
 8ea:	9a 83       	std	Y+2, r25	; 0x02
 8ec:	89 83       	std	Y+1, r24	; 0x01
 8ee:	89 81       	ldd	r24, Y+1	; 0x01
 8f0:	9a 81       	ldd	r25, Y+2	; 0x02
 8f2:	80 38       	cpi	r24, 0x80	; 128
 8f4:	9e 43       	sbci	r25, 0x3E	; 62
 8f6:	b4 f3       	brlt	.-20     	; 0x8e4 <main+0x5e>
  AVR_LED_PORT &= ~0x0f;
 8f8:	82 e2       	ldi	r24, 0x22	; 34
 8fa:	90 e0       	ldi	r25, 0x00	; 0
 8fc:	22 e2       	ldi	r18, 0x22	; 34
 8fe:	30 e0       	ldi	r19, 0x00	; 0
 900:	f9 01       	movw	r30, r18
 902:	20 81       	ld	r18, Z
 904:	20 7f       	andi	r18, 0xF0	; 240
 906:	fc 01       	movw	r30, r24
 908:	20 83       	st	Z, r18
// go to sleep, interrupt will wake us
  //sleep();
  rcv_valid = 0;
 90a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <rcv_valid>
  sei();
 90e:	78 94       	sei
  while (1)
    {
		if (rcv_valid ==1){
 910:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <rcv_valid>
 914:	81 30       	cpi	r24, 0x01	; 1
 916:	e1 f7       	brne	.-8      	; 0x910 <main+0x8a>
			volatile int stop = 0;
 918:	1e 82       	std	Y+6, r1	; 0x06
 91a:	1d 82       	std	Y+5, r1	; 0x05
	 when brought out of sleep mode by a press on the panic button).
	MAD 11/29/18 -Because the sleep power mode did not catch PCINTx type interupts
	 if (!panic_p())
	   sleep();
      */
    }
 91c:	f9 cf       	rjmp	.-14     	; 0x910 <main+0x8a>

0000091e <initTimer1>:
#include "timer.h"
#include "tamper.h"
#include "ssp.h"

void initTimer1(uint8_t timer)
{
 91e:	cf 93       	push	r28
 920:	df 93       	push	r29
 922:	1f 92       	push	r1
 924:	cd b7       	in	r28, 0x3d	; 61
 926:	de b7       	in	r29, 0x3e	; 62
 928:	89 83       	std	Y+1, r24	; 0x01
	TCCR0A = (1 << WGM01);             //CTC mode
 92a:	84 e4       	ldi	r24, 0x44	; 68
 92c:	90 e0       	ldi	r25, 0x00	; 0
 92e:	22 e0       	ldi	r18, 0x02	; 2
 930:	fc 01       	movw	r30, r24
 932:	20 83       	st	Z, r18
	TCCR0B = (1 << CS00);              //div1
 934:	85 e4       	ldi	r24, 0x45	; 69
 936:	90 e0       	ldi	r25, 0x00	; 0
 938:	21 e0       	ldi	r18, 0x01	; 1
 93a:	fc 01       	movw	r30, r24
 93c:	20 83       	st	Z, r18
	OCR0A = timer;						// 50us compare value
 93e:	87 e4       	ldi	r24, 0x47	; 71
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	29 81       	ldd	r18, Y+1	; 0x01
 944:	fc 01       	movw	r30, r24
 946:	20 83       	st	Z, r18
	TIMSK0 |= (1<<OCIE0A);              //if you want interrupt
 948:	8e e6       	ldi	r24, 0x6E	; 110
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	2e e6       	ldi	r18, 0x6E	; 110
 94e:	30 e0       	ldi	r19, 0x00	; 0
 950:	f9 01       	movw	r30, r18
 952:	20 81       	ld	r18, Z
 954:	22 60       	ori	r18, 0x02	; 2
 956:	fc 01       	movw	r30, r24
 958:	20 83       	st	Z, r18
}
 95a:	00 00       	nop
 95c:	0f 90       	pop	r0
 95e:	df 91       	pop	r29
 960:	cf 91       	pop	r28
 962:	08 95       	ret

00000964 <__vector_12>:



//watchdog timer
ISR (TIMER0_COMPA_vect)
{
 964:	1f 92       	push	r1
 966:	0f 92       	push	r0
 968:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
 96c:	0f 92       	push	r0
 96e:	11 24       	eor	r1, r1
 970:	2f 93       	push	r18
 972:	3f 93       	push	r19
 974:	8f 93       	push	r24
 976:	9f 93       	push	r25
 978:	ef 93       	push	r30
 97a:	ff 93       	push	r31
 97c:	cf 93       	push	r28
 97e:	df 93       	push	r29
 980:	cd b7       	in	r28, 0x3d	; 61
 982:	de b7       	in	r29, 0x3e	; 62
	/*disable interrupts, should we or allow NMI of tamper switch detect? */
	cli();
 984:	f8 94       	cli
	else {
		//ssp_write(ssp_out | WDOG_RS);
		wd_init = 0x01;
		PORTC &= (0<<PORTC6);
	}*/
	if (start_bit == 1){
 986:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <start_bit>
 98a:	81 30       	cpi	r24, 0x01	; 1
 98c:	31 f4       	brne	.+12     	; 0x99a <__vector_12+0x36>
		if (!PORTB3) {	//looking for and found valid start bit
			start_bit = 0;
		}
		else {
			OCR0A = FULL_BIT;    // 104uS bit time
 98e:	87 e4       	ldi	r24, 0x47	; 71
 990:	90 e0       	ldi	r25, 0x00	; 0
 992:	28 e6       	ldi	r18, 0x68	; 104
 994:	fc 01       	movw	r30, r24
 996:	20 83       	st	Z, r18
 998:	34 c0       	rjmp	.+104    	; 0xa02 <__vector_12+0x9e>
		}
	}
	else {
		if (bit_count > 0) {     //looking for data
 99a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <bit_count>
 99e:	88 23       	and	r24, r24
 9a0:	b9 f0       	breq	.+46     	; 0x9d0 <__vector_12+0x6c>
			rcv_char |= ((bit_count-1)<<PORTB3);
 9a2:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <bit_count>
 9a6:	88 2f       	mov	r24, r24
 9a8:	90 e0       	ldi	r25, 0x00	; 0
 9aa:	01 97       	sbiw	r24, 0x01	; 1
 9ac:	88 0f       	add	r24, r24
 9ae:	99 1f       	adc	r25, r25
 9b0:	88 0f       	add	r24, r24
 9b2:	99 1f       	adc	r25, r25
 9b4:	88 0f       	add	r24, r24
 9b6:	99 1f       	adc	r25, r25
 9b8:	98 2f       	mov	r25, r24
 9ba:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <rcv_char>
 9be:	89 2b       	or	r24, r25
 9c0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <rcv_char>
			bit_count--;
 9c4:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <bit_count>
 9c8:	81 50       	subi	r24, 0x01	; 1
 9ca:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <bit_count>
 9ce:	19 c0       	rjmp	.+50     	; 0xa02 <__vector_12+0x9e>
		}
		else if (bit_count == 0) {  //looking for stop bit
 9d0:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <bit_count>
 9d4:	88 23       	and	r24, r24
 9d6:	a9 f4       	brne	.+42     	; 0xa02 <__vector_12+0x9e>
			if (!PORTB3) {
				rcv_valid = 1;
			}
			else {
				rcv_error_stop = 1;
 9d8:	81 e0       	ldi	r24, 0x01	; 1
 9da:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <rcv_error_stop>
			}
			TIMSK0 &= ~(1<<OCIE0A);		//stop bit timer
 9de:	8e e6       	ldi	r24, 0x6E	; 110
 9e0:	90 e0       	ldi	r25, 0x00	; 0
 9e2:	2e e6       	ldi	r18, 0x6E	; 110
 9e4:	30 e0       	ldi	r19, 0x00	; 0
 9e6:	f9 01       	movw	r30, r18
 9e8:	20 81       	ld	r18, Z
 9ea:	2d 7f       	andi	r18, 0xFD	; 253
 9ec:	fc 01       	movw	r30, r24
 9ee:	20 83       	st	Z, r18
			PCMSK1 |= _BV(PCINT11);		//enable start bit detect
 9f0:	8c e6       	ldi	r24, 0x6C	; 108
 9f2:	90 e0       	ldi	r25, 0x00	; 0
 9f4:	2c e6       	ldi	r18, 0x6C	; 108
 9f6:	30 e0       	ldi	r19, 0x00	; 0
 9f8:	f9 01       	movw	r30, r18
 9fa:	20 81       	ld	r18, Z
 9fc:	28 60       	ori	r18, 0x08	; 8
 9fe:	fc 01       	movw	r30, r24
 a00:	20 83       	st	Z, r18
			
		}
	}
	sei();
 a02:	78 94       	sei
 a04:	00 00       	nop
 a06:	df 91       	pop	r29
 a08:	cf 91       	pop	r28
 a0a:	ff 91       	pop	r31
 a0c:	ef 91       	pop	r30
 a0e:	9f 91       	pop	r25
 a10:	8f 91       	pop	r24
 a12:	3f 91       	pop	r19
 a14:	2f 91       	pop	r18
 a16:	0f 90       	pop	r0
 a18:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
 a1c:	0f 90       	pop	r0
 a1e:	1f 90       	pop	r1
 a20:	18 95       	reti

00000a22 <_exit>:
 a22:	f8 94       	cli

00000a24 <__stop_program>:
 a24:	ff cf       	rjmp	.-2      	; 0xa24 <__stop_program>
