
Sensor_board.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001f8e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f1a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005f  00800100  00800100  00001f8e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001f8e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001fc0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  00001ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005c86  00000000  00000000  0000221c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000120d  00000000  00000000  00007ea2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002671  00000000  00000000  000090af  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000508  00000000  00000000  0000b720  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a61  00000000  00000000  0000bc28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001927  00000000  00000000  0000c689  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000308  00000000  00000000  0000dfb0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
       2:	d2 c4       	rjmp	.+2468   	; 0x9a8 <__vector_1>
       4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
       6:	51 c4       	rjmp	.+2210   	; 0x8aa <__vector_3>
       8:	65 c4       	rjmp	.+2250   	; 0x8d4 <__vector_4>
       a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
       c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
       e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
      10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
      12:	7d cd       	rjmp	.-1286   	; 0xfffffb0e <__eeprom_end+0xff7efb0e>
      14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
      16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
      18:	13 ce       	rjmp	.-986    	; 0xfffffc40 <__eeprom_end+0xff7efc40>
      1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
      1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
      1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
      20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
      22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
      24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
      26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
      28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
      2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
      2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
      2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
      30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
      32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
      34:	11 24       	eor	r1, r1
      36:	1f be       	out	0x3f, r1	; 63
      38:	cf ef       	ldi	r28, 0xFF	; 255
      3a:	d2 e0       	ldi	r29, 0x02	; 2
      3c:	de bf       	out	0x3e, r29	; 62
      3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
      40:	21 e0       	ldi	r18, 0x01	; 1
      42:	a0 e0       	ldi	r26, 0x00	; 0
      44:	b1 e0       	ldi	r27, 0x01	; 1
      46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
      48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
      4a:	af 35       	cpi	r26, 0x5F	; 95
      4c:	b2 07       	cpc	r27, r18
      4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
      50:	06 db       	rcall	.-2548   	; 0xfffff65e <__eeprom_end+0xff7ef65e>
      52:	61 cf       	rjmp	.-318    	; 0xffffff16 <__eeprom_end+0xff7eff16>

00000054 <__bad_interrupt>:
      54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <adx_chip_select>:
	USART_Receive(ADX_RD, VIBE);
	USART_Receive(reg, VIBE);  //device id address 0x00
	temp = USART_Receive(0x00, VIBE);
	adx_chip_select(0);
	return temp;
}
      56:	89 2b       	or	r24, r25
      58:	11 f4       	brne	.+4      	; 0x5e <adx_chip_select+0x8>
      5a:	54 9a       	sbi	0x0a, 4	; 10
      5c:	08 95       	ret
      5e:	54 98       	cbi	0x0a, 4	; 10
      60:	08 95       	ret

00000062 <adx_read_id>:
      62:	54 98       	cbi	0x0a, 4	; 10
      64:	64 e0       	ldi	r22, 0x04	; 4
      66:	8b e0       	ldi	r24, 0x0B	; 11
      68:	09 d3       	rcall	.+1554   	; 0x67c <USART_Receive>
      6a:	64 e0       	ldi	r22, 0x04	; 4
      6c:	80 e0       	ldi	r24, 0x00	; 0
      6e:	06 d3       	rcall	.+1548   	; 0x67c <USART_Receive>
      70:	64 e0       	ldi	r22, 0x04	; 4
      72:	80 e0       	ldi	r24, 0x00	; 0
      74:	03 d3       	rcall	.+1542   	; 0x67c <USART_Receive>
      76:	54 9a       	sbi	0x0a, 4	; 10
      78:	08 95       	ret

0000007a <adx_soft_r>:
      7a:	54 98       	cbi	0x0a, 4	; 10
      7c:	64 e0       	ldi	r22, 0x04	; 4
      7e:	8a e0       	ldi	r24, 0x0A	; 10
      80:	fd d2       	rcall	.+1530   	; 0x67c <USART_Receive>
      82:	64 e0       	ldi	r22, 0x04	; 4
      84:	8f e1       	ldi	r24, 0x1F	; 31
      86:	fa d2       	rcall	.+1524   	; 0x67c <USART_Receive>
      88:	64 e0       	ldi	r22, 0x04	; 4
      8a:	82 e5       	ldi	r24, 0x52	; 82
      8c:	f7 d2       	rcall	.+1518   	; 0x67c <USART_Receive>
      8e:	54 9a       	sbi	0x0a, 4	; 10
      90:	08 95       	ret

00000092 <adx_setup>:
      92:	54 98       	cbi	0x0a, 4	; 10
      94:	64 e0       	ldi	r22, 0x04	; 4
      96:	8a e0       	ldi	r24, 0x0A	; 10
      98:	f1 d2       	rcall	.+1506   	; 0x67c <USART_Receive>
      9a:	64 e0       	ldi	r22, 0x04	; 4
      9c:	8f e1       	ldi	r24, 0x1F	; 31
      9e:	ee d2       	rcall	.+1500   	; 0x67c <USART_Receive>
      a0:	64 e0       	ldi	r22, 0x04	; 4
      a2:	82 e5       	ldi	r24, 0x52	; 82
      a4:	eb d2       	rcall	.+1494   	; 0x67c <USART_Receive>
      a6:	54 9a       	sbi	0x0a, 4	; 10
      a8:	54 98       	cbi	0x0a, 4	; 10
      aa:	64 e0       	ldi	r22, 0x04	; 4
      ac:	8a e0       	ldi	r24, 0x0A	; 10
      ae:	e6 d2       	rcall	.+1484   	; 0x67c <USART_Receive>
      b0:	64 e0       	ldi	r22, 0x04	; 4
      b2:	80 e2       	ldi	r24, 0x20	; 32
      b4:	e3 d2       	rcall	.+1478   	; 0x67c <USART_Receive>
      b6:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <vibe_lo_thresh>
      ba:	64 e0       	ldi	r22, 0x04	; 4
      bc:	df d2       	rcall	.+1470   	; 0x67c <USART_Receive>
      be:	54 9a       	sbi	0x0a, 4	; 10
      c0:	54 98       	cbi	0x0a, 4	; 10
      c2:	64 e0       	ldi	r22, 0x04	; 4
      c4:	8a e0       	ldi	r24, 0x0A	; 10
      c6:	da d2       	rcall	.+1460   	; 0x67c <USART_Receive>
      c8:	64 e0       	ldi	r22, 0x04	; 4
      ca:	81 e2       	ldi	r24, 0x21	; 33
      cc:	d7 d2       	rcall	.+1454   	; 0x67c <USART_Receive>
      ce:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <vibe_hi_thresh>
      d2:	64 e0       	ldi	r22, 0x04	; 4
      d4:	d3 d2       	rcall	.+1446   	; 0x67c <USART_Receive>
      d6:	54 9a       	sbi	0x0a, 4	; 10
      d8:	54 98       	cbi	0x0a, 4	; 10
      da:	64 e0       	ldi	r22, 0x04	; 4
      dc:	8a e0       	ldi	r24, 0x0A	; 10
      de:	ce d2       	rcall	.+1436   	; 0x67c <USART_Receive>
      e0:	64 e0       	ldi	r22, 0x04	; 4
      e2:	82 e2       	ldi	r24, 0x22	; 34
      e4:	cb d2       	rcall	.+1430   	; 0x67c <USART_Receive>
      e6:	64 e0       	ldi	r22, 0x04	; 4
      e8:	80 e0       	ldi	r24, 0x00	; 0
      ea:	c8 d2       	rcall	.+1424   	; 0x67c <USART_Receive>
      ec:	54 9a       	sbi	0x0a, 4	; 10
      ee:	54 98       	cbi	0x0a, 4	; 10
      f0:	64 e0       	ldi	r22, 0x04	; 4
      f2:	8a e0       	ldi	r24, 0x0A	; 10
      f4:	c3 d2       	rcall	.+1414   	; 0x67c <USART_Receive>
      f6:	64 e0       	ldi	r22, 0x04	; 4
      f8:	87 e2       	ldi	r24, 0x27	; 39
      fa:	c0 d2       	rcall	.+1408   	; 0x67c <USART_Receive>
      fc:	64 e0       	ldi	r22, 0x04	; 4
      fe:	80 e0       	ldi	r24, 0x00	; 0
     100:	bd d2       	rcall	.+1402   	; 0x67c <USART_Receive>
     102:	54 9a       	sbi	0x0a, 4	; 10
     104:	54 98       	cbi	0x0a, 4	; 10
     106:	64 e0       	ldi	r22, 0x04	; 4
     108:	8a e0       	ldi	r24, 0x0A	; 10
     10a:	b8 d2       	rcall	.+1392   	; 0x67c <USART_Receive>
     10c:	64 e0       	ldi	r22, 0x04	; 4
     10e:	88 e2       	ldi	r24, 0x28	; 40
     110:	b5 d2       	rcall	.+1386   	; 0x67c <USART_Receive>
     112:	64 e0       	ldi	r22, 0x04	; 4
     114:	80 e0       	ldi	r24, 0x00	; 0
     116:	b2 d2       	rcall	.+1380   	; 0x67c <USART_Receive>
     118:	54 9a       	sbi	0x0a, 4	; 10
     11a:	54 98       	cbi	0x0a, 4	; 10
     11c:	64 e0       	ldi	r22, 0x04	; 4
     11e:	8a e0       	ldi	r24, 0x0A	; 10
     120:	ad d2       	rcall	.+1370   	; 0x67c <USART_Receive>
     122:	64 e0       	ldi	r22, 0x04	; 4
     124:	89 e2       	ldi	r24, 0x29	; 41
     126:	aa d2       	rcall	.+1364   	; 0x67c <USART_Receive>
     128:	64 e0       	ldi	r22, 0x04	; 4
     12a:	88 ec       	ldi	r24, 0xC8	; 200
     12c:	a7 d2       	rcall	.+1358   	; 0x67c <USART_Receive>
     12e:	54 9a       	sbi	0x0a, 4	; 10
     130:	54 98       	cbi	0x0a, 4	; 10
     132:	64 e0       	ldi	r22, 0x04	; 4
     134:	8a e0       	ldi	r24, 0x0A	; 10
     136:	a2 d2       	rcall	.+1348   	; 0x67c <USART_Receive>
     138:	64 e0       	ldi	r22, 0x04	; 4
     13a:	8a e2       	ldi	r24, 0x2A	; 42
     13c:	9f d2       	rcall	.+1342   	; 0x67c <USART_Receive>
     13e:	64 e0       	ldi	r22, 0x04	; 4
     140:	80 e1       	ldi	r24, 0x10	; 16
     142:	9c d2       	rcall	.+1336   	; 0x67c <USART_Receive>
     144:	54 9a       	sbi	0x0a, 4	; 10
     146:	54 98       	cbi	0x0a, 4	; 10
     148:	64 e0       	ldi	r22, 0x04	; 4
     14a:	8a e0       	ldi	r24, 0x0A	; 10
     14c:	97 d2       	rcall	.+1326   	; 0x67c <USART_Receive>
     14e:	64 e0       	ldi	r22, 0x04	; 4
     150:	8b e2       	ldi	r24, 0x2B	; 43
     152:	94 d2       	rcall	.+1320   	; 0x67c <USART_Receive>
     154:	64 e0       	ldi	r22, 0x04	; 4
     156:	80 e1       	ldi	r24, 0x10	; 16
     158:	91 d2       	rcall	.+1314   	; 0x67c <USART_Receive>
     15a:	54 9a       	sbi	0x0a, 4	; 10
     15c:	54 98       	cbi	0x0a, 4	; 10
     15e:	64 e0       	ldi	r22, 0x04	; 4
     160:	8a e0       	ldi	r24, 0x0A	; 10
     162:	8c d2       	rcall	.+1304   	; 0x67c <USART_Receive>
     164:	64 e0       	ldi	r22, 0x04	; 4
     166:	8c e2       	ldi	r24, 0x2C	; 44
     168:	89 d2       	rcall	.+1298   	; 0x67c <USART_Receive>
     16a:	64 e0       	ldi	r22, 0x04	; 4
     16c:	83 e0       	ldi	r24, 0x03	; 3
     16e:	86 d2       	rcall	.+1292   	; 0x67c <USART_Receive>
     170:	54 9a       	sbi	0x0a, 4	; 10
     172:	54 98       	cbi	0x0a, 4	; 10
     174:	64 e0       	ldi	r22, 0x04	; 4
     176:	8a e0       	ldi	r24, 0x0A	; 10
     178:	81 d2       	rcall	.+1282   	; 0x67c <USART_Receive>
     17a:	64 e0       	ldi	r22, 0x04	; 4
     17c:	8d e2       	ldi	r24, 0x2D	; 45
     17e:	7e d2       	rcall	.+1276   	; 0x67c <USART_Receive>
     180:	64 e0       	ldi	r22, 0x04	; 4
     182:	8a e0       	ldi	r24, 0x0A	; 10
     184:	7b d2       	rcall	.+1270   	; 0x67c <USART_Receive>
     186:	54 9a       	sbi	0x0a, 4	; 10
     188:	08 95       	ret

0000018a <adx_temp>:
     18a:	cf 93       	push	r28
     18c:	54 98       	cbi	0x0a, 4	; 10
     18e:	64 e0       	ldi	r22, 0x04	; 4
     190:	8b e0       	ldi	r24, 0x0B	; 11
     192:	74 d2       	rcall	.+1256   	; 0x67c <USART_Receive>
     194:	64 e0       	ldi	r22, 0x04	; 4
     196:	84 e1       	ldi	r24, 0x14	; 20
     198:	71 d2       	rcall	.+1250   	; 0x67c <USART_Receive>
     19a:	64 e0       	ldi	r22, 0x04	; 4
     19c:	80 e0       	ldi	r24, 0x00	; 0
     19e:	6e d2       	rcall	.+1244   	; 0x67c <USART_Receive>
     1a0:	c8 2f       	mov	r28, r24
     1a2:	64 e0       	ldi	r22, 0x04	; 4
     1a4:	80 e0       	ldi	r24, 0x00	; 0
     1a6:	6a d2       	rcall	.+1236   	; 0x67c <USART_Receive>
     1a8:	54 9a       	sbi	0x0a, 4	; 10
     1aa:	6c 2f       	mov	r22, r28
     1ac:	70 e0       	ldi	r23, 0x00	; 0
     1ae:	78 2b       	or	r23, r24
     1b0:	07 2e       	mov	r0, r23
     1b2:	00 0c       	add	r0, r0
     1b4:	88 0b       	sbc	r24, r24
     1b6:	99 0b       	sbc	r25, r25
     1b8:	b7 dd       	rcall	.-1170   	; 0xfffffd28 <__eeprom_end+0xff7efd28>
     1ba:	28 eb       	ldi	r18, 0xB8	; 184
     1bc:	3e e1       	ldi	r19, 0x1E	; 30
     1be:	45 e8       	ldi	r20, 0x85	; 133
     1c0:	5d e3       	ldi	r21, 0x3D	; 61
     1c2:	16 de       	rcall	.-980    	; 0xfffffdf0 <__eeprom_end+0xff7efdf0>
     1c4:	7e dd       	rcall	.-1284   	; 0xfffffcc2 <__eeprom_end+0xff7efcc2>
     1c6:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <temperature>
     1ca:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <temperature+0x1>
     1ce:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <temperature+0x2>
     1d2:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <temperature+0x3>
     1d6:	cf 91       	pop	r28
     1d8:	08 95       	ret

000001da <adx_read_status>:

uint8_t adx_read_status(){
     1da:	0f 93       	push	r16
     1dc:	1f 93       	push	r17
     1de:	cf 93       	push	r28


void adx_chip_select(int select_flag)
{
	if (select_flag) {
	AVR_GPIO_PORT &= ~_BV(DB_ADX_SS); /* CS low. */
     1e0:	54 98       	cbi	0x0a, 4	; 10

uint8_t adx_read_status(){
	/* ADX status */
	uint8_t temp;
	adx_chip_select(1);
	USART_Receive(ADX_RD, VIBE);
     1e2:	64 e0       	ldi	r22, 0x04	; 4
     1e4:	8b e0       	ldi	r24, 0x0B	; 11
     1e6:	4a d2       	rcall	.+1172   	; 0x67c <USART_Receive>
	USART_Receive(ADX_STATUS, VIBE);  //device id address 0x00
     1e8:	64 e0       	ldi	r22, 0x04	; 4
     1ea:	8b e0       	ldi	r24, 0x0B	; 11
     1ec:	47 d2       	rcall	.+1166   	; 0x67c <USART_Receive>
	temp = USART_Receive(0x00, VIBE);
     1ee:	64 e0       	ldi	r22, 0x04	; 4
     1f0:	80 e0       	ldi	r24, 0x00	; 0
     1f2:	44 d2       	rcall	.+1160   	; 0x67c <USART_Receive>
     1f4:	c8 2f       	mov	r28, r24
{
	if (select_flag) {
	AVR_GPIO_PORT &= ~_BV(DB_ADX_SS); /* CS low. */
	}
	else {
	AVR_GPIO_PORT |= _BV(DB_ADX_SS); /* CS high. */
     1f6:	54 9a       	sbi	0x0a, 4	; 10


void adx_chip_select(int select_flag)
{
	if (select_flag) {
	AVR_GPIO_PORT &= ~_BV(DB_ADX_SS); /* CS low. */
     1f8:	54 98       	cbi	0x0a, 4	; 10
	USART_Receive(ADX_STATUS, VIBE);  //device id address 0x00
	temp = USART_Receive(0x00, VIBE);
	//temp = USART_Receive(0x00, VIBE);
    adx_chip_select(0);
	adx_chip_select(1);
	USART_Receive(ADX_RD, VIBE);
     1fa:	64 e0       	ldi	r22, 0x04	; 4
     1fc:	8b e0       	ldi	r24, 0x0B	; 11
     1fe:	3e d2       	rcall	.+1148   	; 0x67c <USART_Receive>
	USART_Receive(0x0E, VIBE);  //register 0x27
     200:	64 e0       	ldi	r22, 0x04	; 4
     202:	8e e0       	ldi	r24, 0x0E	; 14
     204:	3b d2       	rcall	.+1142   	; 0x67c <USART_Receive>
	xlo = USART_Receive(0x00, VIBE);		// x-axis LSB
     206:	64 e0       	ldi	r22, 0x04	; 4
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	38 d2       	rcall	.+1136   	; 0x67c <USART_Receive>
     20c:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <xlo>
	xhi = USART_Receive(0x00, VIBE);	// x-axis MSB
     210:	64 e0       	ldi	r22, 0x04	; 4
     212:	80 e0       	ldi	r24, 0x00	; 0
     214:	33 d2       	rcall	.+1126   	; 0x67c <USART_Receive>
     216:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <xhi>
	ylo = USART_Receive(0x00, VIBE);		// y-axis LSB
     21a:	64 e0       	ldi	r22, 0x04	; 4
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	2e d2       	rcall	.+1116   	; 0x67c <USART_Receive>
     220:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <ylo>
	yhi = USART_Receive(0x00, VIBE);		// y-axis MSB
     224:	64 e0       	ldi	r22, 0x04	; 4
     226:	80 e0       	ldi	r24, 0x00	; 0
     228:	29 d2       	rcall	.+1106   	; 0x67c <USART_Receive>
     22a:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <yhi>
	zlo = USART_Receive(0x00, VIBE);			// z-axis LSB
     22e:	64 e0       	ldi	r22, 0x04	; 4
     230:	80 e0       	ldi	r24, 0x00	; 0
     232:	24 d2       	rcall	.+1096   	; 0x67c <USART_Receive>
     234:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <zlo>
	zhi = USART_Receive(0x00, VIBE);	// z-axis MSB
     238:	64 e0       	ldi	r22, 0x04	; 4
     23a:	80 e0       	ldi	r24, 0x00	; 0
     23c:	1f d2       	rcall	.+1086   	; 0x67c <USART_Receive>
     23e:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <zhi>
{
	if (select_flag) {
	AVR_GPIO_PORT &= ~_BV(DB_ADX_SS); /* CS low. */
	}
	else {
	AVR_GPIO_PORT |= _BV(DB_ADX_SS); /* CS high. */
     242:	54 9a       	sbi	0x0a, 4	; 10
	ylo = USART_Receive(0x00, VIBE);		// y-axis LSB
	yhi = USART_Receive(0x00, VIBE);		// y-axis MSB
	zlo = USART_Receive(0x00, VIBE);			// z-axis LSB
	zhi = USART_Receive(0x00, VIBE);	// z-axis MSB
	adx_chip_select(0);
	x = (uint16_t)xhi<<8 | (uint16_t)xlo;
     244:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <xhi>
     248:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <xlo>
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	92 2b       	or	r25, r18
     250:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <x+0x1>
     254:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <x>
	y = (uint16_t)yhi<<8 | (uint16_t)ylo;
     258:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <yhi>
     25c:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <ylo>
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	92 2b       	or	r25, r18
     264:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <y+0x1>
     268:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <y>
	z = (uint16_t)zhi<<8 | (uint16_t)zlo;
     26c:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <zhi>
     270:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <zlo>
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	92 2b       	or	r25, r18
     278:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <z+0x1>
     27c:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <z>
	//x and y vlaues are static at rest , while z has a constant 1G, at least on earth
	if (abs(x)>vibe_thresh | abs(y) > vibe_thresh | abs(z) > vibe_thresh + 1000)
     280:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <x>
     284:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <x+0x1>
     288:	00 91 5d 01 	lds	r16, 0x015D	; 0x80015d <vibe_thresh>
     28c:	10 91 5e 01 	lds	r17, 0x015E	; 0x80015e <vibe_thresh+0x1>
     290:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <y>
     294:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <y+0x1>
     298:	a0 91 5d 01 	lds	r26, 0x015D	; 0x80015d <vibe_thresh>
     29c:	b0 91 5e 01 	lds	r27, 0x015E	; 0x80015e <vibe_thresh+0x1>
     2a0:	40 91 33 01 	lds	r20, 0x0133	; 0x800133 <z>
     2a4:	50 91 34 01 	lds	r21, 0x0134	; 0x800134 <z+0x1>
     2a8:	60 91 5d 01 	lds	r22, 0x015D	; 0x80015d <vibe_thresh>
     2ac:	70 91 5e 01 	lds	r23, 0x015E	; 0x80015e <vibe_thresh+0x1>
     2b0:	37 fd       	sbrc	r19, 7
     2b2:	1c c0       	rjmp	.+56     	; 0x2ec <adx_read_status+0x112>
     2b4:	e1 e0       	ldi	r30, 0x01	; 1
     2b6:	02 17       	cp	r16, r18
     2b8:	13 07       	cpc	r17, r19
     2ba:	08 f0       	brcs	.+2      	; 0x2be <adx_read_status+0xe4>
     2bc:	e0 e0       	ldi	r30, 0x00	; 0
     2be:	97 fd       	sbrc	r25, 7
     2c0:	19 c0       	rjmp	.+50     	; 0x2f4 <adx_read_status+0x11a>
     2c2:	21 e0       	ldi	r18, 0x01	; 1
     2c4:	a8 17       	cp	r26, r24
     2c6:	b9 07       	cpc	r27, r25
     2c8:	08 f0       	brcs	.+2      	; 0x2cc <adx_read_status+0xf2>
     2ca:	20 e0       	ldi	r18, 0x00	; 0
     2cc:	2e 2b       	or	r18, r30
     2ce:	41 f4       	brne	.+16     	; 0x2e0 <adx_read_status+0x106>
     2d0:	ca 01       	movw	r24, r20
     2d2:	57 fd       	sbrc	r21, 7
     2d4:	13 c0       	rjmp	.+38     	; 0x2fc <adx_read_status+0x122>
     2d6:	68 51       	subi	r22, 0x18	; 24
     2d8:	7c 4f       	sbci	r23, 0xFC	; 252
     2da:	68 17       	cp	r22, r24
     2dc:	79 07       	cpc	r23, r25
     2de:	08 f4       	brcc	.+2      	; 0x2e2 <adx_read_status+0x108>
	{
		temp |= 0x10;
     2e0:	c0 61       	ori	r28, 0x10	; 16
	}
	


	return temp;
}
     2e2:	8c 2f       	mov	r24, r28
     2e4:	cf 91       	pop	r28
     2e6:	1f 91       	pop	r17
     2e8:	0f 91       	pop	r16
     2ea:	08 95       	ret
	adx_chip_select(0);
	x = (uint16_t)xhi<<8 | (uint16_t)xlo;
	y = (uint16_t)yhi<<8 | (uint16_t)ylo;
	z = (uint16_t)zhi<<8 | (uint16_t)zlo;
	//x and y vlaues are static at rest , while z has a constant 1G, at least on earth
	if (abs(x)>vibe_thresh | abs(y) > vibe_thresh | abs(z) > vibe_thresh + 1000)
     2ec:	31 95       	neg	r19
     2ee:	21 95       	neg	r18
     2f0:	31 09       	sbc	r19, r1
     2f2:	e0 cf       	rjmp	.-64     	; 0x2b4 <adx_read_status+0xda>
     2f4:	91 95       	neg	r25
     2f6:	81 95       	neg	r24
     2f8:	91 09       	sbc	r25, r1
     2fa:	e3 cf       	rjmp	.-58     	; 0x2c2 <adx_read_status+0xe8>
     2fc:	91 95       	neg	r25
     2fe:	81 95       	neg	r24
     300:	91 09       	sbc	r25, r1
     302:	e9 cf       	rjmp	.-46     	; 0x2d6 <adx_read_status+0xfc>

00000304 <adx_set_threshold>:


void adx_chip_select(int select_flag)
{
	if (select_flag) {
	AVR_GPIO_PORT &= ~_BV(DB_ADX_SS); /* CS low. */
     304:	54 98       	cbi	0x0a, 4	; 10
}

void adx_set_threshold(){
	//adx_wr_reg(ADX_THRESH_ACT_L, vibe_lo_thresh);
	adx_chip_select(1);
	USART_Receive(ADX_WR, VIBE);
     306:	64 e0       	ldi	r22, 0x04	; 4
     308:	8a e0       	ldi	r24, 0x0A	; 10
     30a:	b8 d1       	rcall	.+880    	; 0x67c <USART_Receive>
	USART_Receive(ADX_THRESH_ACT_L, VIBE);		//0x20
     30c:	64 e0       	ldi	r22, 0x04	; 4
     30e:	80 e2       	ldi	r24, 0x20	; 32
     310:	b5 d1       	rcall	.+874    	; 0x67c <USART_Receive>
	USART_Receive(vibe_lo_thresh, VIBE);		//register
     312:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <vibe_lo_thresh>
     316:	64 e0       	ldi	r22, 0x04	; 4
     318:	b1 d1       	rcall	.+866    	; 0x67c <USART_Receive>
{
	if (select_flag) {
	AVR_GPIO_PORT &= ~_BV(DB_ADX_SS); /* CS low. */
	}
	else {
	AVR_GPIO_PORT |= _BV(DB_ADX_SS); /* CS high. */
     31a:	54 9a       	sbi	0x0a, 4	; 10


void adx_chip_select(int select_flag)
{
	if (select_flag) {
	AVR_GPIO_PORT &= ~_BV(DB_ADX_SS); /* CS low. */
     31c:	54 98       	cbi	0x0a, 4	; 10
	USART_Receive(ADX_THRESH_ACT_L, VIBE);		//0x20
	USART_Receive(vibe_lo_thresh, VIBE);		//register
	adx_chip_select(0);
	//adx_wr_reg(ADX_THRESH_ACT_H, vibe_hi_thresh);
	adx_chip_select(1);
	USART_Receive(ADX_WR, VIBE);
     31e:	64 e0       	ldi	r22, 0x04	; 4
     320:	8a e0       	ldi	r24, 0x0A	; 10
     322:	ac d1       	rcall	.+856    	; 0x67c <USART_Receive>
	USART_Receive(ADX_THRESH_ACT_H, VIBE);		//0x21
     324:	64 e0       	ldi	r22, 0x04	; 4
     326:	81 e2       	ldi	r24, 0x21	; 33
     328:	a9 d1       	rcall	.+850    	; 0x67c <USART_Receive>
	USART_Receive(vibe_hi_thresh, VIBE);		//register
     32a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <vibe_hi_thresh>
     32e:	64 e0       	ldi	r22, 0x04	; 4
     330:	a5 d1       	rcall	.+842    	; 0x67c <USART_Receive>
{
	if (select_flag) {
	AVR_GPIO_PORT &= ~_BV(DB_ADX_SS); /* CS low. */
	}
	else {
	AVR_GPIO_PORT |= _BV(DB_ADX_SS); /* CS high. */
     332:	54 9a       	sbi	0x0a, 4	; 10
     334:	08 95       	ret

00000336 <adx_read_fifo_count>:
	USART_Receive(ADX_THRESH_ACT_H, VIBE);		//0x21
	USART_Receive(vibe_hi_thresh, VIBE);		//register
	adx_chip_select(0);
}

uint16_t adx_read_fifo_count(){
     336:	cf 93       	push	r28


void adx_chip_select(int select_flag)
{
	if (select_flag) {
	AVR_GPIO_PORT &= ~_BV(DB_ADX_SS); /* CS low. */
     338:	54 98       	cbi	0x0a, 4	; 10
uint16_t adx_read_fifo_count(){
	/* get number of samples in fifo */
	uint8_t temp;
	uint16_t samples, sample;
	adx_chip_select(1);
	USART_Receive(ADX_RD, VIBE);
     33a:	64 e0       	ldi	r22, 0x04	; 4
     33c:	8b e0       	ldi	r24, 0x0B	; 11
     33e:	9e d1       	rcall	.+828    	; 0x67c <USART_Receive>
	USART_Receive(ADX_FIFO_ENTRIES, VIBE);  //device id address 0x00
     340:	64 e0       	ldi	r22, 0x04	; 4
     342:	8c e0       	ldi	r24, 0x0C	; 12
     344:	9b d1       	rcall	.+822    	; 0x67c <USART_Receive>
	temp = USART_Receive(0x00, VIBE);
     346:	64 e0       	ldi	r22, 0x04	; 4
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	98 d1       	rcall	.+816    	; 0x67c <USART_Receive>
     34c:	c8 2f       	mov	r28, r24
	samples = (uint16_t)  USART_Receive(0x00, VIBE)<<8 |(uint16_t) temp;
     34e:	64 e0       	ldi	r22, 0x04	; 4
     350:	80 e0       	ldi	r24, 0x00	; 0
     352:	94 d1       	rcall	.+808    	; 0x67c <USART_Receive>
{
	if (select_flag) {
	AVR_GPIO_PORT &= ~_BV(DB_ADX_SS); /* CS low. */
	}
	else {
	AVR_GPIO_PORT |= _BV(DB_ADX_SS); /* CS high. */
     354:	54 9a       	sbi	0x0a, 4	; 10
	USART_Receive(ADX_RD, VIBE);
	USART_Receive(ADX_FIFO_ENTRIES, VIBE);  //device id address 0x00
	temp = USART_Receive(0x00, VIBE);
	samples = (uint16_t)  USART_Receive(0x00, VIBE)<<8 |(uint16_t) temp;
    adx_chip_select(0);
	return samples;
     356:	2c 2f       	mov	r18, r28
     358:	30 e0       	ldi	r19, 0x00	; 0
}
     35a:	a9 01       	movw	r20, r18
     35c:	58 2b       	or	r21, r24
     35e:	ca 01       	movw	r24, r20
     360:	cf 91       	pop	r28
     362:	08 95       	ret

00000364 <n25_chip_select>:
#include "tamper.h"
#include "ssp.h"


void n25_chip_select(int select_flag)
{
     364:	08 95       	ret

00000366 <mlx_chip_select>:
void mlx_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_MLX_SS); /* CS low. */
	else
	AVR_GPIO_PORT |= _BV(DB_MLX_SS); /* CS high. */
     366:	89 2b       	or	r24, r25
     368:	11 f4       	brne	.+4      	; 0x36e <mlx_chip_select+0x8>
     36a:	55 9a       	sbi	0x0a, 5	; 10
     36c:	08 95       	ret
     36e:	55 98       	cbi	0x0a, 5	; 10
     370:	08 95       	ret

00000372 <mlx_start_meas>:
     372:	55 98       	cbi	0x0a, 5	; 10
     374:	61 e0       	ldi	r22, 0x01	; 1
     376:	80 ed       	ldi	r24, 0xD0	; 208
     378:	81 d1       	rcall	.+770    	; 0x67c <USART_Receive>
     37a:	61 e0       	ldi	r22, 0x01	; 1
     37c:	80 ec       	ldi	r24, 0xC0	; 192
     37e:	7e d1       	rcall	.+764    	; 0x67c <USART_Receive>
     380:	55 9a       	sbi	0x0a, 5	; 10
     382:	08 95       	ret

00000384 <mlx_get_meas>:
     384:	cf 93       	push	r28
     386:	df 93       	push	r29
     388:	00 d0       	rcall	.+0      	; 0x38a <mlx_get_meas+0x6>
     38a:	cd b7       	in	r28, 0x3d	; 61
     38c:	de b7       	in	r29, 0x3e	; 62
     38e:	55 98       	cbi	0x0a, 5	; 10
     390:	61 e0       	ldi	r22, 0x01	; 1
     392:	83 ec       	ldi	r24, 0xC3	; 195
     394:	73 d1       	rcall	.+742    	; 0x67c <USART_Receive>
     396:	61 e0       	ldi	r22, 0x01	; 1
     398:	80 e0       	ldi	r24, 0x00	; 0
     39a:	70 d1       	rcall	.+736    	; 0x67c <USART_Receive>
     39c:	61 e0       	ldi	r22, 0x01	; 1
     39e:	80 e0       	ldi	r24, 0x00	; 0
     3a0:	6d d1       	rcall	.+730    	; 0x67c <USART_Receive>
     3a2:	8a 83       	std	Y+2, r24	; 0x02
     3a4:	61 e0       	ldi	r22, 0x01	; 1
     3a6:	80 e0       	ldi	r24, 0x00	; 0
     3a8:	69 d1       	rcall	.+722    	; 0x67c <USART_Receive>
     3aa:	89 83       	std	Y+1, r24	; 0x01
     3ac:	8a 81       	ldd	r24, Y+2	; 0x02
     3ae:	89 81       	ldd	r24, Y+1	; 0x01
     3b0:	61 e0       	ldi	r22, 0x01	; 1
     3b2:	80 e0       	ldi	r24, 0x00	; 0
     3b4:	63 d1       	rcall	.+710    	; 0x67c <USART_Receive>
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	98 2f       	mov	r25, r24
     3ba:	88 27       	eor	r24, r24
     3bc:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <light+0x1>
     3c0:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <light>
     3c4:	61 e0       	ldi	r22, 0x01	; 1
     3c6:	80 e0       	ldi	r24, 0x00	; 0
     3c8:	59 d1       	rcall	.+690    	; 0x67c <USART_Receive>
     3ca:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <light>
     3ce:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <light+0x1>
     3d2:	28 2b       	or	r18, r24
     3d4:	30 93 2f 01 	sts	0x012F, r19	; 0x80012f <light+0x1>
     3d8:	20 93 2e 01 	sts	0x012E, r18	; 0x80012e <light>
     3dc:	55 9a       	sbi	0x0a, 5	; 10
     3de:	0f 90       	pop	r0
     3e0:	0f 90       	pop	r0
     3e2:	df 91       	pop	r29
     3e4:	cf 91       	pop	r28
     3e6:	08 95       	ret

000003e8 <mlx_write_reg>:
     3e8:	0f 93       	push	r16
     3ea:	1f 93       	push	r17
     3ec:	cf 93       	push	r28
     3ee:	c6 2f       	mov	r28, r22
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	46 2f       	mov	r20, r22
     3f4:	50 e0       	ldi	r21, 0x00	; 0
     3f6:	42 95       	swap	r20
     3f8:	52 95       	swap	r21
     3fa:	50 7f       	andi	r21, 0xF0	; 240
     3fc:	54 27       	eor	r21, r20
     3fe:	40 7f       	andi	r20, 0xF0	; 240
     400:	54 27       	eor	r21, r20
     402:	48 0f       	add	r20, r24
     404:	59 1f       	adc	r21, r25
     406:	40 ff       	sbrs	r20, 0
     408:	5f c0       	rjmp	.+190    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
     40a:	61 e0       	ldi	r22, 0x01	; 1
     40c:	70 e0       	ldi	r23, 0x00	; 0
     40e:	41 ff       	sbrs	r20, 1
     410:	5f c0       	rjmp	.+190    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     412:	21 e0       	ldi	r18, 0x01	; 1
     414:	30 e0       	ldi	r19, 0x00	; 0
     416:	26 0f       	add	r18, r22
     418:	37 1f       	adc	r19, r23
     41a:	42 ff       	sbrs	r20, 2
     41c:	5f c0       	rjmp	.+190    	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
     41e:	61 e0       	ldi	r22, 0x01	; 1
     420:	70 e0       	ldi	r23, 0x00	; 0
     422:	26 0f       	add	r18, r22
     424:	37 1f       	adc	r19, r23
     426:	43 ff       	sbrs	r20, 3
     428:	5f c0       	rjmp	.+190    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
     42a:	61 e0       	ldi	r22, 0x01	; 1
     42c:	70 e0       	ldi	r23, 0x00	; 0
     42e:	26 0f       	add	r18, r22
     430:	37 1f       	adc	r19, r23
     432:	44 ff       	sbrs	r20, 4
     434:	5f c0       	rjmp	.+190    	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
     436:	61 e0       	ldi	r22, 0x01	; 1
     438:	70 e0       	ldi	r23, 0x00	; 0
     43a:	26 0f       	add	r18, r22
     43c:	37 1f       	adc	r19, r23
     43e:	45 ff       	sbrs	r20, 5
     440:	5f c0       	rjmp	.+190    	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
     442:	61 e0       	ldi	r22, 0x01	; 1
     444:	70 e0       	ldi	r23, 0x00	; 0
     446:	26 0f       	add	r18, r22
     448:	37 1f       	adc	r19, r23
     44a:	46 ff       	sbrs	r20, 6
     44c:	5f c0       	rjmp	.+190    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
     44e:	61 e0       	ldi	r22, 0x01	; 1
     450:	70 e0       	ldi	r23, 0x00	; 0
     452:	26 0f       	add	r18, r22
     454:	37 1f       	adc	r19, r23
     456:	47 ff       	sbrs	r20, 7
     458:	5f c0       	rjmp	.+190    	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
     45a:	61 e0       	ldi	r22, 0x01	; 1
     45c:	70 e0       	ldi	r23, 0x00	; 0
     45e:	26 0f       	add	r18, r22
     460:	37 1f       	adc	r19, r23
     462:	50 ff       	sbrs	r21, 0
     464:	5f c0       	rjmp	.+190    	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
     466:	61 e0       	ldi	r22, 0x01	; 1
     468:	70 e0       	ldi	r23, 0x00	; 0
     46a:	26 0f       	add	r18, r22
     46c:	37 1f       	adc	r19, r23
     46e:	51 ff       	sbrs	r21, 1
     470:	5f c0       	rjmp	.+190    	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
     472:	61 e0       	ldi	r22, 0x01	; 1
     474:	70 e0       	ldi	r23, 0x00	; 0
     476:	26 0f       	add	r18, r22
     478:	37 1f       	adc	r19, r23
     47a:	52 ff       	sbrs	r21, 2
     47c:	5f c0       	rjmp	.+190    	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
     47e:	61 e0       	ldi	r22, 0x01	; 1
     480:	70 e0       	ldi	r23, 0x00	; 0
     482:	26 0f       	add	r18, r22
     484:	37 1f       	adc	r19, r23
     486:	53 ff       	sbrs	r21, 3
     488:	5f c0       	rjmp	.+190    	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
     48a:	41 e0       	ldi	r20, 0x01	; 1
     48c:	50 e0       	ldi	r21, 0x00	; 0
     48e:	24 0f       	add	r18, r20
     490:	35 1f       	adc	r19, r21
     492:	8c 01       	movw	r16, r24
     494:	02 95       	swap	r16
     496:	12 95       	swap	r17
     498:	10 7f       	andi	r17, 0xF0	; 240
     49a:	10 27       	eor	r17, r16
     49c:	00 7f       	andi	r16, 0xF0	; 240
     49e:	10 27       	eor	r17, r16
     4a0:	11 27       	eor	r17, r17
     4a2:	20 ff       	sbrs	r18, 0
     4a4:	54 c0       	rjmp	.+168    	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
     4a6:	0c 5f       	subi	r16, 0xFC	; 252
     4a8:	1f 4f       	sbci	r17, 0xFF	; 255
     4aa:	55 98       	cbi	0x0a, 5	; 10
     4ac:	61 e0       	ldi	r22, 0x01	; 1
     4ae:	87 e8       	ldi	r24, 0x87	; 135
     4b0:	e5 d0       	rcall	.+458    	; 0x67c <USART_Receive>
     4b2:	61 e0       	ldi	r22, 0x01	; 1
     4b4:	8c 2f       	mov	r24, r28
     4b6:	e2 d0       	rcall	.+452    	; 0x67c <USART_Receive>
     4b8:	61 e0       	ldi	r22, 0x01	; 1
     4ba:	80 2f       	mov	r24, r16
     4bc:	df d0       	rcall	.+446    	; 0x67c <USART_Receive>
     4be:	55 9a       	sbi	0x0a, 5	; 10
     4c0:	cf 91       	pop	r28
     4c2:	1f 91       	pop	r17
     4c4:	0f 91       	pop	r16
     4c6:	08 95       	ret
     4c8:	60 e0       	ldi	r22, 0x00	; 0
     4ca:	70 e0       	ldi	r23, 0x00	; 0
     4cc:	41 fd       	sbrc	r20, 1
     4ce:	a1 cf       	rjmp	.-190    	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     4d0:	20 e0       	ldi	r18, 0x00	; 0
     4d2:	30 e0       	ldi	r19, 0x00	; 0
     4d4:	26 0f       	add	r18, r22
     4d6:	37 1f       	adc	r19, r23
     4d8:	42 fd       	sbrc	r20, 2
     4da:	a1 cf       	rjmp	.-190    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     4dc:	60 e0       	ldi	r22, 0x00	; 0
     4de:	70 e0       	ldi	r23, 0x00	; 0
     4e0:	26 0f       	add	r18, r22
     4e2:	37 1f       	adc	r19, r23
     4e4:	43 fd       	sbrc	r20, 3
     4e6:	a1 cf       	rjmp	.-190    	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     4e8:	60 e0       	ldi	r22, 0x00	; 0
     4ea:	70 e0       	ldi	r23, 0x00	; 0
     4ec:	26 0f       	add	r18, r22
     4ee:	37 1f       	adc	r19, r23
     4f0:	44 fd       	sbrc	r20, 4
     4f2:	a1 cf       	rjmp	.-190    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     4f4:	60 e0       	ldi	r22, 0x00	; 0
     4f6:	70 e0       	ldi	r23, 0x00	; 0
     4f8:	26 0f       	add	r18, r22
     4fa:	37 1f       	adc	r19, r23
     4fc:	45 fd       	sbrc	r20, 5
     4fe:	a1 cf       	rjmp	.-190    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     500:	60 e0       	ldi	r22, 0x00	; 0
     502:	70 e0       	ldi	r23, 0x00	; 0
     504:	26 0f       	add	r18, r22
     506:	37 1f       	adc	r19, r23
     508:	46 fd       	sbrc	r20, 6
     50a:	a1 cf       	rjmp	.-190    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     50c:	60 e0       	ldi	r22, 0x00	; 0
     50e:	70 e0       	ldi	r23, 0x00	; 0
     510:	26 0f       	add	r18, r22
     512:	37 1f       	adc	r19, r23
     514:	47 fd       	sbrc	r20, 7
     516:	a1 cf       	rjmp	.-190    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     518:	60 e0       	ldi	r22, 0x00	; 0
     51a:	70 e0       	ldi	r23, 0x00	; 0
     51c:	26 0f       	add	r18, r22
     51e:	37 1f       	adc	r19, r23
     520:	50 fd       	sbrc	r21, 0
     522:	a1 cf       	rjmp	.-190    	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
     524:	60 e0       	ldi	r22, 0x00	; 0
     526:	70 e0       	ldi	r23, 0x00	; 0
     528:	26 0f       	add	r18, r22
     52a:	37 1f       	adc	r19, r23
     52c:	51 fd       	sbrc	r21, 1
     52e:	a1 cf       	rjmp	.-190    	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     530:	60 e0       	ldi	r22, 0x00	; 0
     532:	70 e0       	ldi	r23, 0x00	; 0
     534:	26 0f       	add	r18, r22
     536:	37 1f       	adc	r19, r23
     538:	52 fd       	sbrc	r21, 2
     53a:	a1 cf       	rjmp	.-190    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     53c:	60 e0       	ldi	r22, 0x00	; 0
     53e:	70 e0       	ldi	r23, 0x00	; 0
     540:	26 0f       	add	r18, r22
     542:	37 1f       	adc	r19, r23
     544:	53 fd       	sbrc	r21, 3
     546:	a1 cf       	rjmp	.-190    	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     548:	40 e0       	ldi	r20, 0x00	; 0
     54a:	50 e0       	ldi	r21, 0x00	; 0
     54c:	a0 cf       	rjmp	.-192    	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
     54e:	08 5f       	subi	r16, 0xF8	; 248
     550:	1f 4f       	sbci	r17, 0xFF	; 255
     552:	ab cf       	rjmp	.-170    	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>

00000554 <mlx_get_calib>:
     554:	55 98       	cbi	0x0a, 5	; 10
     556:	61 e0       	ldi	r22, 0x01	; 1
     558:	8e e8       	ldi	r24, 0x8E	; 142
     55a:	90 d0       	rcall	.+288    	; 0x67c <USART_Receive>
     55c:	61 e0       	ldi	r22, 0x01	; 1
     55e:	80 eb       	ldi	r24, 0xB0	; 176
     560:	8d d0       	rcall	.+282    	; 0x67c <USART_Receive>
     562:	61 e0       	ldi	r22, 0x01	; 1
     564:	80 e0       	ldi	r24, 0x00	; 0
     566:	8a d0       	rcall	.+276    	; 0x67c <USART_Receive>
     568:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <calib1>
     56c:	55 9a       	sbi	0x0a, 5	; 10
     56e:	55 98       	cbi	0x0a, 5	; 10
     570:	61 e0       	ldi	r22, 0x01	; 1
     572:	8e e8       	ldi	r24, 0x8E	; 142
     574:	83 d0       	rcall	.+262    	; 0x67c <USART_Receive>
     576:	61 e0       	ldi	r22, 0x01	; 1
     578:	80 ec       	ldi	r24, 0xC0	; 192
     57a:	80 d0       	rcall	.+256    	; 0x67c <USART_Receive>
     57c:	61 e0       	ldi	r22, 0x01	; 1
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	7d d0       	rcall	.+250    	; 0x67c <USART_Receive>
     582:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <calib2>
     586:	55 9a       	sbi	0x0a, 5	; 10
     588:	08 95       	ret

0000058a <mlx_reset>:


void mlx_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_MLX_SS); /* CS low. */
     58a:	55 98       	cbi	0x0a, 5	; 10
	USART_Receive(0, LIGHT);
	mlx_chip_select(0);
}
void mlx_reset(){
	mlx_chip_select(1);
	USART_Receive(MLX_RS, LIGHT);
     58c:	61 e0       	ldi	r22, 0x01	; 1
     58e:	80 ef       	ldi	r24, 0xF0	; 240
     590:	75 d0       	rcall	.+234    	; 0x67c <USART_Receive>
	USART_Receive(0, LIGHT);
     592:	61 e0       	ldi	r22, 0x01	; 1
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	72 d0       	rcall	.+228    	; 0x67c <USART_Receive>
void mlx_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_MLX_SS); /* CS low. */
	else
	AVR_GPIO_PORT |= _BV(DB_MLX_SS); /* CS high. */
     598:	55 9a       	sbi	0x0a, 5	; 10
     59a:	08 95       	ret

0000059c <USART_Receive.constprop.2>:
		case LIGHT:
			light_fault++;
			break;
		case VIBE:
			vibe_fault++;
			break;
     59c:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <spi_disable>
     5a0:	91 11       	cpse	r25, r1
     5a2:	3b c0       	rjmp	.+118    	; 0x61a <USART_Receive.constprop.2+0x7e>
     5a4:	91 e0       	ldi	r25, 0x01	; 1
     5a6:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <spi_to_flag>
     5aa:	90 93 5c 01 	sts	0x015C, r25	; 0x80015c <spi_to>
     5ae:	16 bc       	out	0x26, r1	; 38
     5b0:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     5b4:	92 60       	ori	r25, 0x02	; 2
     5b6:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     5ba:	04 c0       	rjmp	.+8      	; 0x5c4 <USART_Receive.constprop.2+0x28>
     5bc:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <spi_to_flag>
     5c0:	99 23       	and	r25, r25
     5c2:	a1 f1       	breq	.+104    	; 0x62c <USART_Receive.constprop.2+0x90>
     5c4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     5c8:	95 ff       	sbrs	r25, 5
     5ca:	f8 cf       	rjmp	.-16     	; 0x5bc <USART_Receive.constprop.2+0x20>
     5cc:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     5d0:	9d 7f       	andi	r25, 0xFD	; 253
     5d2:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     5d6:	a9 9a       	sbi	0x15, 1	; 21
     5d8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <spi_to_flag>
     5e2:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <spi_to>
     5e6:	16 bc       	out	0x26, r1	; 38
     5e8:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     5ec:	82 60       	ori	r24, 0x02	; 2
     5ee:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     5f2:	04 c0       	rjmp	.+8      	; 0x5fc <USART_Receive.constprop.2+0x60>
     5f4:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <spi_to_flag>
     5f8:	88 23       	and	r24, r24
     5fa:	91 f0       	breq	.+36     	; 0x620 <USART_Receive.constprop.2+0x84>
     5fc:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     600:	87 ff       	sbrs	r24, 7
     602:	f8 cf       	rjmp	.-16     	; 0x5f4 <USART_Receive.constprop.2+0x58>
     604:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     608:	8d 7f       	andi	r24, 0xFD	; 253
     60a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     60e:	a9 9a       	sbi	0x15, 1	; 21
     610:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <spi_to_flag>
     614:	81 11       	cpse	r24, r1
     616:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <ssp_fault>
     61a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
     61e:	08 95       	ret
     620:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <ssp_fault>
     624:	8f 5f       	subi	r24, 0xFF	; 255
     626:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <ssp_fault>
     62a:	ec cf       	rjmp	.-40     	; 0x604 <USART_Receive.constprop.2+0x68>
     62c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <ssp_fault>
     630:	9f 5f       	subi	r25, 0xFF	; 255
     632:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <ssp_fault>
     636:	ca cf       	rjmp	.-108    	; 0x5cc <USART_Receive.constprop.2+0x30>

00000638 <spi_usart_setup>:
     638:	89 2b       	or	r24, r25
     63a:	09 f4       	brne	.+2      	; 0x63e <spi_usart_setup+0x6>
     63c:	08 95       	ret
     63e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__EEPROM_REGION_LENGTH__+0x7f00c5>
     642:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__EEPROM_REGION_LENGTH__+0x7f00c4>
     646:	81 ef       	ldi	r24, 0xF1	; 241
     648:	89 b9       	out	0x09, r24	; 9
     64a:	83 ec       	ldi	r24, 0xC3	; 195
     64c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__EEPROM_REGION_LENGTH__+0x7f00c2>
     650:	88 e1       	ldi	r24, 0x18	; 24
     652:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__EEPROM_REGION_LENGTH__+0x7f00c1>
     656:	88 e0       	ldi	r24, 0x08	; 8
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__EEPROM_REGION_LENGTH__+0x7f00c5>
     65e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__EEPROM_REGION_LENGTH__+0x7f00c4>
     662:	57 9a       	sbi	0x0a, 7	; 10
     664:	80 e0       	ldi	r24, 0x00	; 0
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	7e de       	rcall	.-772    	; 0x366 <mlx_chip_select>
     66a:	80 e0       	ldi	r24, 0x00	; 0
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	f3 dc       	rcall	.-1562   	; 0x56 <adx_chip_select>
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	77 ce       	rjmp	.-786    	; 0x364 <n25_chip_select>

00000676 <ssp_boot>:
     676:	57 98       	cbi	0x0a, 7	; 10
     678:	57 9a       	sbi	0x0a, 7	; 10
     67a:	08 95       	ret

0000067c <USART_Receive>:
     67c:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <spi_disable>
     680:	91 11       	cpse	r25, r1
     682:	44 c0       	rjmp	.+136    	; 0x70c <USART_Receive+0x90>
     684:	91 e0       	ldi	r25, 0x01	; 1
     686:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <spi_to_flag>
     68a:	90 93 5c 01 	sts	0x015C, r25	; 0x80015c <spi_to>
     68e:	16 bc       	out	0x26, r1	; 38
     690:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     694:	92 60       	ori	r25, 0x02	; 2
     696:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     69a:	04 c0       	rjmp	.+8      	; 0x6a4 <USART_Receive+0x28>
     69c:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <spi_to_flag>
     6a0:	99 23       	and	r25, r25
     6a2:	b9 f1       	breq	.+110    	; 0x712 <USART_Receive+0x96>
     6a4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     6a8:	95 ff       	sbrs	r25, 5
     6aa:	f8 cf       	rjmp	.-16     	; 0x69c <USART_Receive+0x20>
     6ac:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     6b0:	9d 7f       	andi	r25, 0xFD	; 253
     6b2:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     6b6:	a9 9a       	sbi	0x15, 1	; 21
     6b8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
     6bc:	81 e0       	ldi	r24, 0x01	; 1
     6be:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <spi_to_flag>
     6c2:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <spi_to>
     6c6:	16 bc       	out	0x26, r1	; 38
     6c8:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     6cc:	82 60       	ori	r24, 0x02	; 2
     6ce:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     6d2:	04 c0       	rjmp	.+8      	; 0x6dc <USART_Receive+0x60>
     6d4:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <spi_to_flag>
     6d8:	88 23       	and	r24, r24
     6da:	49 f1       	breq	.+82     	; 0x72e <USART_Receive+0xb2>
     6dc:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     6e0:	87 ff       	sbrs	r24, 7
     6e2:	f8 cf       	rjmp	.-16     	; 0x6d4 <USART_Receive+0x58>
     6e4:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     6e8:	8d 7f       	andi	r24, 0xFD	; 253
     6ea:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     6ee:	a9 9a       	sbi	0x15, 1	; 21
     6f0:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <spi_to_flag>
     6f4:	88 23       	and	r24, r24
     6f6:	51 f0       	breq	.+20     	; 0x70c <USART_Receive+0x90>
     6f8:	64 30       	cpi	r22, 0x04	; 4
     6fa:	09 f4       	brne	.+2      	; 0x6fe <USART_Receive+0x82>
     6fc:	4c c0       	rjmp	.+152    	; 0x796 <USART_Receive+0x11a>
     6fe:	60 31       	cpi	r22, 0x10	; 16
     700:	89 f1       	breq	.+98     	; 0x764 <USART_Receive+0xe8>
     702:	61 30       	cpi	r22, 0x01	; 1
     704:	09 f4       	brne	.+2      	; 0x708 <USART_Receive+0x8c>
     706:	5a c0       	rjmp	.+180    	; 0x7bc <USART_Receive+0x140>
     708:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
     70c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
     710:	08 95       	ret
     712:	64 30       	cpi	r22, 0x04	; 4
     714:	09 f4       	brne	.+2      	; 0x718 <USART_Receive+0x9c>
     716:	55 c0       	rjmp	.+170    	; 0x7c2 <USART_Receive+0x146>
     718:	60 31       	cpi	r22, 0x10	; 16
     71a:	39 f1       	breq	.+78     	; 0x76a <USART_Receive+0xee>
     71c:	61 30       	cpi	r22, 0x01	; 1
     71e:	09 f4       	brne	.+2      	; 0x722 <USART_Receive+0xa6>
     720:	56 c0       	rjmp	.+172    	; 0x7ce <USART_Receive+0x152>
     722:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
     726:	9f 5f       	subi	r25, 0xFF	; 255
     728:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
     72c:	bf cf       	rjmp	.-130    	; 0x6ac <USART_Receive+0x30>
     72e:	64 30       	cpi	r22, 0x04	; 4
     730:	11 f1       	breq	.+68     	; 0x776 <USART_Receive+0xfa>
     732:	60 31       	cpi	r22, 0x10	; 16
     734:	41 f0       	breq	.+16     	; 0x746 <USART_Receive+0xca>
     736:	61 30       	cpi	r22, 0x01	; 1
     738:	89 f1       	breq	.+98     	; 0x79c <USART_Receive+0x120>
     73a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     73e:	8f 5f       	subi	r24, 0xFF	; 255
     740:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
     744:	cf cf       	rjmp	.-98     	; 0x6e4 <USART_Receive+0x68>
     746:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <ssp_fault>
     74a:	8f 5f       	subi	r24, 0xFF	; 255
     74c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <ssp_fault>
     750:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     754:	8d 7f       	andi	r24, 0xFD	; 253
     756:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     75a:	a9 9a       	sbi	0x15, 1	; 21
     75c:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <spi_to_flag>
     760:	88 23       	and	r24, r24
     762:	a1 f2       	breq	.-88     	; 0x70c <USART_Receive+0x90>
     764:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <ssp_fault>
     768:	d1 cf       	rjmp	.-94     	; 0x70c <USART_Receive+0x90>
     76a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <ssp_fault>
     76e:	9f 5f       	subi	r25, 0xFF	; 255
     770:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <ssp_fault>
     774:	9b cf       	rjmp	.-202    	; 0x6ac <USART_Receive+0x30>
     776:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <vibe_fault>
     77a:	8f 5f       	subi	r24, 0xFF	; 255
     77c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <vibe_fault>
     780:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     784:	8d 7f       	andi	r24, 0xFD	; 253
     786:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     78a:	a9 9a       	sbi	0x15, 1	; 21
     78c:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <spi_to_flag>
     790:	88 23       	and	r24, r24
     792:	09 f4       	brne	.+2      	; 0x796 <USART_Receive+0x11a>
     794:	bb cf       	rjmp	.-138    	; 0x70c <USART_Receive+0x90>
     796:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <vibe_fault>
     79a:	b8 cf       	rjmp	.-144    	; 0x70c <USART_Receive+0x90>
     79c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <light_fault>
     7a0:	8f 5f       	subi	r24, 0xFF	; 255
     7a2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <light_fault>
     7a6:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     7aa:	8d 7f       	andi	r24, 0xFD	; 253
     7ac:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     7b0:	a9 9a       	sbi	0x15, 1	; 21
     7b2:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <spi_to_flag>
     7b6:	88 23       	and	r24, r24
     7b8:	09 f4       	brne	.+2      	; 0x7bc <USART_Receive+0x140>
     7ba:	a8 cf       	rjmp	.-176    	; 0x70c <USART_Receive+0x90>
     7bc:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <light_fault>
     7c0:	a5 cf       	rjmp	.-182    	; 0x70c <USART_Receive+0x90>
     7c2:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <vibe_fault>
     7c6:	9f 5f       	subi	r25, 0xFF	; 255
     7c8:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <vibe_fault>
     7cc:	6f cf       	rjmp	.-290    	; 0x6ac <USART_Receive+0x30>
     7ce:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <light_fault>
     7d2:	9f 5f       	subi	r25, 0xFF	; 255
     7d4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <light_fault>
     7d8:	69 cf       	rjmp	.-302    	; 0x6ac <USART_Receive+0x30>

000007da <ssp_setup>:

void
ssp_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_SSP_SS); /* CS low. */
     7da:	57 98       	cbi	0x0a, 7	; 10
void
ssp_setup()
{
	/* set for write and set I/O dir. register per board design */
	ssp_chip_select(1);
	USART_Receive(SSP_WRITE, SSP);
     7dc:	80 e4       	ldi	r24, 0x40	; 64
     7de:	de de       	rcall	.-580    	; 0x59c <USART_Receive.constprop.2>
	USART_Receive(IODIRA, SSP);
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	dc de       	rcall	.-584    	; 0x59c <USART_Receive.constprop.2>
	USART_Receive(SSP_IO, SSP);
     7e4:	81 e6       	ldi	r24, 0x61	; 97
     7e6:	da de       	rcall	.-588    	; 0x59c <USART_Receive.constprop.2>
ssp_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_SSP_SS); /* CS low. */
	else
	AVR_GPIO_PORT |= _BV(DB_SSP_SS); /* CS high. */
     7e8:	57 9a       	sbi	0x0a, 7	; 10

void
ssp_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_SSP_SS); /* CS low. */
     7ea:	57 98       	cbi	0x0a, 7	; 10
	USART_Receive(IODIRA, SSP);
	USART_Receive(SSP_IO, SSP);
	ssp_chip_select(0);
	
	ssp_chip_select(1);
	USART_Receive(SSP_WRITE, SSP);
     7ec:	80 e4       	ldi	r24, 0x40	; 64
     7ee:	d6 de       	rcall	.-596    	; 0x59c <USART_Receive.constprop.2>
	USART_Receive(GPPUA, SSP);
     7f0:	8c e0       	ldi	r24, 0x0C	; 12
     7f2:	d4 de       	rcall	.-600    	; 0x59c <USART_Receive.constprop.2>
	USART_Receive(0x21, SSP);
     7f4:	81 e2       	ldi	r24, 0x21	; 33
     7f6:	d2 de       	rcall	.-604    	; 0x59c <USART_Receive.constprop.2>
ssp_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_SSP_SS); /* CS low. */
	else
	AVR_GPIO_PORT |= _BV(DB_SSP_SS); /* CS high. */
     7f8:	57 9a       	sbi	0x0a, 7	; 10
     7fa:	08 95       	ret

000007fc <ssp_int_config>:

void
ssp_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_SSP_SS); /* CS low. */
     7fc:	57 98       	cbi	0x0a, 7	; 10
ssp_int_config()
{
	
	/* set tamper gpio for interrupt on change */
	ssp_chip_select(1);
	USART_Receive(SSP_WRITE, SSP);
     7fe:	80 e4       	ldi	r24, 0x40	; 64
     800:	cd de       	rcall	.-614    	; 0x59c <USART_Receive.constprop.2>
	USART_Receive(INTCONA, SSP);
     802:	88 e0       	ldi	r24, 0x08	; 8
     804:	cb de       	rcall	.-618    	; 0x59c <USART_Receive.constprop.2>
	USART_Receive(TAMP_MON, SSP);
     806:	80 e4       	ldi	r24, 0x40	; 64
     808:	c9 de       	rcall	.-622    	; 0x59c <USART_Receive.constprop.2>
ssp_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_SSP_SS); /* CS low. */
	else
	AVR_GPIO_PORT |= _BV(DB_SSP_SS); /* CS high. */
     80a:	57 9a       	sbi	0x0a, 7	; 10

void
ssp_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_SSP_SS); /* CS low. */
     80c:	57 98       	cbi	0x0a, 7	; 10
	USART_Receive(INTCONA, SSP);
	USART_Receive(TAMP_MON, SSP);
	ssp_chip_select(0);
	/* set tamper gpio for default value '1' at TAMP_MON */
	ssp_chip_select(1);
	USART_Receive(SSP_WRITE, SSP);
     80e:	80 e4       	ldi	r24, 0x40	; 64
     810:	c5 de       	rcall	.-630    	; 0x59c <USART_Receive.constprop.2>
	USART_Receive(DEFVALA, SSP);
     812:	86 e0       	ldi	r24, 0x06	; 6
     814:	c3 de       	rcall	.-634    	; 0x59c <USART_Receive.constprop.2>
	USART_Receive(TAMP_MON, SSP);
     816:	80 e4       	ldi	r24, 0x40	; 64
     818:	c1 de       	rcall	.-638    	; 0x59c <USART_Receive.constprop.2>
ssp_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_SSP_SS); /* CS low. */
	else
	AVR_GPIO_PORT |= _BV(DB_SSP_SS); /* CS high. */
     81a:	57 9a       	sbi	0x0a, 7	; 10

void
ssp_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_SSP_SS); /* CS low. */
     81c:	57 98       	cbi	0x0a, 7	; 10
	USART_Receive(DEFVALA, SSP);
	USART_Receive(TAMP_MON, SSP);
	ssp_chip_select(0);
	//set IOCON INTPOL to 1?
	ssp_chip_select(1);
	USART_Receive(SSP_WRITE, SSP);
     81e:	80 e4       	ldi	r24, 0x40	; 64
     820:	bd de       	rcall	.-646    	; 0x59c <USART_Receive.constprop.2>
	USART_Receive(IOCON, SSP);
     822:	8a e0       	ldi	r24, 0x0A	; 10
     824:	bb de       	rcall	.-650    	; 0x59c <USART_Receive.constprop.2>
	USART_Receive(0x00, SSP);
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	b9 de       	rcall	.-654    	; 0x59c <USART_Receive.constprop.2>
ssp_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_SSP_SS); /* CS low. */
	else
	AVR_GPIO_PORT |= _BV(DB_SSP_SS); /* CS high. */
     82a:	57 9a       	sbi	0x0a, 7	; 10

void
ssp_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_SSP_SS); /* CS low. */
     82c:	57 98       	cbi	0x0a, 7	; 10
	USART_Receive(IOCON, SSP);
	USART_Receive(0x00, SSP);
	ssp_chip_select(0);
	/* read A to clear */
	ssp_chip_select(1);
	USART_Receive(SSP_READ, SSP);
     82e:	81 e4       	ldi	r24, 0x41	; 65
     830:	b5 de       	rcall	.-662    	; 0x59c <USART_Receive.constprop.2>
	USART_Receive(GPIOA, SSP);
     832:	82 e1       	ldi	r24, 0x12	; 18
     834:	b3 de       	rcall	.-666    	; 0x59c <USART_Receive.constprop.2>
	USART_Receive(0x00, SSP);
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	b1 de       	rcall	.-670    	; 0x59c <USART_Receive.constprop.2>
ssp_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_SSP_SS); /* CS low. */
	else
	AVR_GPIO_PORT |= _BV(DB_SSP_SS); /* CS high. */
     83a:	57 9a       	sbi	0x0a, 7	; 10

void
ssp_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_SSP_SS); /* CS low. */
     83c:	57 98       	cbi	0x0a, 7	; 10
	USART_Receive(GPIOA, SSP);
	USART_Receive(0x00, SSP);
	ssp_chip_select(0);
	/* read incapA to clear */
	ssp_chip_select(1);
	USART_Receive(SSP_READ, SSP);
     83e:	81 e4       	ldi	r24, 0x41	; 65
     840:	ad de       	rcall	.-678    	; 0x59c <USART_Receive.constprop.2>
	USART_Receive(INTCAPA, SSP);
     842:	80 e1       	ldi	r24, 0x10	; 16
     844:	ab de       	rcall	.-682    	; 0x59c <USART_Receive.constprop.2>
	USART_Receive(0x00, SSP);
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	a9 de       	rcall	.-686    	; 0x59c <USART_Receive.constprop.2>
ssp_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_SSP_SS); /* CS low. */
	else
	AVR_GPIO_PORT |= _BV(DB_SSP_SS); /* CS high. */
     84a:	57 9a       	sbi	0x0a, 7	; 10

void
ssp_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_SSP_SS); /* CS low. */
     84c:	57 98       	cbi	0x0a, 7	; 10
	USART_Receive(INTCAPA, SSP);
	USART_Receive(0x00, SSP);
	ssp_chip_select(0);
	/* setup tamper gpio interrupt pin */
	ssp_chip_select(1);
	USART_Receive(SSP_WRITE, SSP);
     84e:	80 e4       	ldi	r24, 0x40	; 64
     850:	a5 de       	rcall	.-694    	; 0x59c <USART_Receive.constprop.2>
	USART_Receive(GPINTENA, SSP);
     852:	84 e0       	ldi	r24, 0x04	; 4
     854:	a3 de       	rcall	.-698    	; 0x59c <USART_Receive.constprop.2>
	USART_Receive(TAMP_MON, SSP);
     856:	80 e4       	ldi	r24, 0x40	; 64
     858:	a1 de       	rcall	.-702    	; 0x59c <USART_Receive.constprop.2>
ssp_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_SSP_SS); /* CS low. */
	else
	AVR_GPIO_PORT |= _BV(DB_SSP_SS); /* CS high. */
     85a:	57 9a       	sbi	0x0a, 7	; 10
     85c:	08 95       	ret

0000085e <ssp_int_reset>:

void
ssp_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_SSP_SS); /* CS low. */
     85e:	57 98       	cbi	0x0a, 7	; 10

void ssp_int_reset()
{
	/* read incapA to clear */
	ssp_chip_select(1);
	USART_Receive(SSP_READ, SSP);
     860:	81 e4       	ldi	r24, 0x41	; 65
     862:	9c de       	rcall	.-712    	; 0x59c <USART_Receive.constprop.2>
	USART_Receive(INTCAPA, SSP);
     864:	80 e1       	ldi	r24, 0x10	; 16
     866:	9a de       	rcall	.-716    	; 0x59c <USART_Receive.constprop.2>
	USART_Receive(0x00, SSP);
     868:	80 e0       	ldi	r24, 0x00	; 0
     86a:	98 de       	rcall	.-720    	; 0x59c <USART_Receive.constprop.2>
ssp_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_SSP_SS); /* CS low. */
	else
	AVR_GPIO_PORT |= _BV(DB_SSP_SS); /* CS high. */
     86c:	57 9a       	sbi	0x0a, 7	; 10
     86e:	08 95       	ret

00000870 <ssp_read_byte>:

void
ssp_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_SSP_SS); /* CS low. */
     870:	57 98       	cbi	0x0a, 7	; 10
ssp_read_byte()
{
	/* read port A */
	uint8_t temp;
	ssp_chip_select(1);
	USART_Receive(SSP_READ, SSP);
     872:	81 e4       	ldi	r24, 0x41	; 65
     874:	93 de       	rcall	.-730    	; 0x59c <USART_Receive.constprop.2>
	USART_Receive(GPIOA, SSP);
     876:	82 e1       	ldi	r24, 0x12	; 18
     878:	91 de       	rcall	.-734    	; 0x59c <USART_Receive.constprop.2>
	temp = USART_Receive(0x00, SSP);
     87a:	80 e0       	ldi	r24, 0x00	; 0
     87c:	8f de       	rcall	.-738    	; 0x59c <USART_Receive.constprop.2>
ssp_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_SSP_SS); /* CS low. */
	else
	AVR_GPIO_PORT |= _BV(DB_SSP_SS); /* CS high. */
     87e:	57 9a       	sbi	0x0a, 7	; 10
	USART_Receive(SSP_READ, SSP);
	USART_Receive(GPIOA, SSP);
	temp = USART_Receive(0x00, SSP);
	ssp_chip_select(0);
	return temp;
}
     880:	08 95       	ret

00000882 <ssp_write>:

void
ssp_write(uint8_t value)
{
     882:	cf 93       	push	r28
     884:	c8 2f       	mov	r28, r24

void
ssp_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_SSP_SS); /* CS low. */
     886:	57 98       	cbi	0x0a, 7	; 10
ssp_write(uint8_t value)
{
	/* set for write and set I/O dir. register per board design */
	//ssp_out |= value;
	ssp_chip_select(1);
	USART_Receive(SSP_WRITE, SSP);
     888:	80 e4       	ldi	r24, 0x40	; 64
     88a:	88 de       	rcall	.-752    	; 0x59c <USART_Receive.constprop.2>
	USART_Receive(GPIOA, SSP);
     88c:	82 e1       	ldi	r24, 0x12	; 18
     88e:	86 de       	rcall	.-756    	; 0x59c <USART_Receive.constprop.2>
	USART_Receive(value, SSP);
     890:	8c 2f       	mov	r24, r28
     892:	84 de       	rcall	.-760    	; 0x59c <USART_Receive.constprop.2>
ssp_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_SSP_SS); /* CS low. */
	else
	AVR_GPIO_PORT |= _BV(DB_SSP_SS); /* CS high. */
     894:	57 9a       	sbi	0x0a, 7	; 10

void
ssp_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_SSP_SS); /* CS low. */
     896:	57 98       	cbi	0x0a, 7	; 10
	USART_Receive(SSP_WRITE, SSP);
	USART_Receive(GPIOA, SSP);
	USART_Receive(value, SSP);
	ssp_chip_select(0);
	ssp_chip_select(1);
	USART_Receive(SSP_WRITE, SSP);
     898:	80 e4       	ldi	r24, 0x40	; 64
     89a:	80 de       	rcall	.-768    	; 0x59c <USART_Receive.constprop.2>
	USART_Receive(OLATA, SSP);
     89c:	84 e1       	ldi	r24, 0x14	; 20
     89e:	7e de       	rcall	.-772    	; 0x59c <USART_Receive.constprop.2>
	USART_Receive(value, SSP);
     8a0:	8c 2f       	mov	r24, r28
     8a2:	7c de       	rcall	.-776    	; 0x59c <USART_Receive.constprop.2>
ssp_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_SSP_SS); /* CS low. */
	else
	AVR_GPIO_PORT |= _BV(DB_SSP_SS); /* CS high. */
     8a4:	57 9a       	sbi	0x0a, 7	; 10
	ssp_chip_select(1);
	USART_Receive(SSP_WRITE, SSP);
	USART_Receive(OLATA, SSP);
	USART_Receive(value, SSP);
	ssp_chip_select(0);
}
     8a6:	cf 91       	pop	r28
     8a8:	08 95       	ret

000008aa <__vector_3>:
	//this has to be done after the SPI expander has been set up for the proper levels
	//
	/*lets use the INT0 pin as triggered form the SPI expander low level */
	EICRA = 0x00;   /* insure that we are interrupting on low-level */
	EIMSK = 0x01;		/*enable INT0 */
	sei();
     8aa:	1f 92       	push	r1
     8ac:	0f 92       	push	r0
     8ae:	0f b6       	in	r0, 0x3f	; 63
     8b0:	0f 92       	push	r0
     8b2:	11 24       	eor	r1, r1
     8b4:	cf 93       	push	r28
     8b6:	df 93       	push	r29
     8b8:	00 d0       	rcall	.+0      	; 0x8ba <__vector_3+0x10>
     8ba:	cd b7       	in	r28, 0x3d	; 61
     8bc:	de b7       	in	r29, 0x3e	; 62
     8be:	1a 82       	std	Y+2, r1	; 0x02
     8c0:	19 82       	std	Y+1, r1	; 0x01
     8c2:	0f 90       	pop	r0
     8c4:	0f 90       	pop	r0
     8c6:	df 91       	pop	r29
     8c8:	cf 91       	pop	r28
     8ca:	0f 90       	pop	r0
     8cc:	0f be       	out	0x3f, r0	; 63
     8ce:	0f 90       	pop	r0
     8d0:	1f 90       	pop	r1
     8d2:	18 95       	reti

000008d4 <__vector_4>:
     8d4:	1f 92       	push	r1
     8d6:	0f 92       	push	r0
     8d8:	0f b6       	in	r0, 0x3f	; 63
     8da:	0f 92       	push	r0
     8dc:	11 24       	eor	r1, r1
     8de:	8f 93       	push	r24
     8e0:	9f 93       	push	r25
     8e2:	ef 93       	push	r30
     8e4:	ff 93       	push	r31
     8e6:	81 e0       	ldi	r24, 0x01	; 1
     8e8:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <spi_disable>
     8ec:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     8f0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
     8f4:	ec e6       	ldi	r30, 0x6C	; 108
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	90 81       	ld	r25, Z
     8fa:	97 7f       	andi	r25, 0xF7	; 247
     8fc:	90 83       	st	Z, r25
     8fe:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <rcv_error_stop>
     902:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <start_bit>
     906:	99 e0       	ldi	r25, 0x09	; 9
     908:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <rcv_bit_count>
     90c:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <rcv_char>
     910:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <receiving>
     914:	ef e6       	ldi	r30, 0x6F	; 111
     916:	f0 e0       	ldi	r31, 0x00	; 0
     918:	80 81       	ld	r24, Z
     91a:	82 60       	ori	r24, 0x02	; 2
     91c:	80 83       	st	Z, r24
     91e:	ff 91       	pop	r31
     920:	ef 91       	pop	r30
     922:	9f 91       	pop	r25
     924:	8f 91       	pop	r24
     926:	0f 90       	pop	r0
     928:	0f be       	out	0x3f, r0	; 63
     92a:	0f 90       	pop	r0
     92c:	1f 90       	pop	r1
     92e:	18 95       	reti

00000930 <mkm_wipe>:
}

/*static inline*/ void
mkm_wipe()
{
  AVR_LED_PORT |= _BV(AVR_LED_GREEN_BIT);
     930:	11 9a       	sbi	0x02, 1	; 2
  tamper_detected = 1;
     932:	91 e0       	ldi	r25, 0x01	; 1
     934:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <tamper_detected>
spi_setup(int on_flag)
{
  if (on_flag)
    {
      /* Disable SPI power reduction. */
      PRR &= ~_BV(PRSPI);
     938:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__EEPROM_REGION_LENGTH__+0x7f0064>
     93c:	8b 7f       	andi	r24, 0xFB	; 251
     93e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__EEPROM_REGION_LENGTH__+0x7f0064>

      /* Configure MOSI and SCK pins as output. */
      DDRD = _BV(MKM_AVR_MOSI_BIT) | _BV(MKM_AVR_SCK_BIT);
     942:	89 e0       	ldi	r24, 0x09	; 9
     944:	8d b9       	out	0x0d, r24	; 13

      /* Make sure SPI slave select (SS) is configured as output
         before enabling SPI master mode! */
      DDRC |= _BV(SPI_SS);  //MAD WTF? this is not the GPIO port......
     946:	48 9a       	sbi	0x09, 0	; 9

      /* Enable SPI in master mode, clock rate f/16. */
      SPCR = _BV(SPE) | _BV(MSTR) | _BV(SPR0);
     948:	81 e5       	ldi	r24, 0x51	; 81
     94a:	8c bd       	out	0x2c, r24	; 44
	  
	  MKM_CS_PORT |= _BV(MKM_CS_BIT); /* CS high. */
     94c:	15 9a       	sbi	0x02, 5	; 2
}

static inline void
mkm_grab()
{
  MKM_CONTROL_FPGA_PORT |= _BV(MKM_CONTROL_FPGA_BIT);
     94e:	17 9a       	sbi	0x02, 7	; 2
  MKM_CONTROL_AVR_PORT &= ~_BV(MKM_CONTROL_AVR_BIT);
     950:	16 98       	cbi	0x02, 6	; 2
/* MKM */
static inline void
mkm_chip_select(int select_flag)
{
  if (select_flag)
    MKM_CS_PORT &= ~_BV(MKM_CS_BIT); /* CS low. */
     952:	15 98       	cbi	0x02, 5	; 2
static inline void
spi_write(uint8_t val)
{
  /* Move the value to be sent to the SPI slave into the SPI
     register. This starts the SPI clock. */
  SPDR = val;
     954:	9e bd       	out	0x2e, r25	; 46

  /* Wait for the byte to be shifted into the slave. */
  loop_until_bit_is_set(SPSR, SPIF);
     956:	0d b4       	in	r0, 0x2d	; 45
     958:	07 fe       	sbrs	r0, 7
     95a:	fd cf       	rjmp	.-6      	; 0x956 <mkm_wipe+0x26>
static inline void
spi_write(uint8_t val)
{
  /* Move the value to be sent to the SPI slave into the SPI
     register. This starts the SPI clock. */
  SPDR = val;
     95c:	80 e4       	ldi	r24, 0x40	; 64
     95e:	8e bd       	out	0x2e, r24	; 46

  /* Wait for the byte to be shifted into the slave. */
  loop_until_bit_is_set(SPSR, SPIF);
     960:	0d b4       	in	r0, 0x2d	; 45
     962:	07 fe       	sbrs	r0, 7
     964:	fd cf       	rjmp	.-6      	; 0x960 <mkm_wipe+0x30>
mkm_chip_select(int select_flag)
{
  if (select_flag)
    MKM_CS_PORT &= ~_BV(MKM_CS_BIT); /* CS low. */
  else
    MKM_CS_PORT |= _BV(MKM_CS_BIT); /* CS high. */
     966:	15 9a       	sbi	0x02, 5	; 2
/* MKM */
static inline void
mkm_chip_select(int select_flag)
{
  if (select_flag)
    MKM_CS_PORT &= ~_BV(MKM_CS_BIT); /* CS low. */
     968:	15 98       	cbi	0x02, 5	; 2
static inline void
spi_write(uint8_t val)
{
  /* Move the value to be sent to the SPI slave into the SPI
     register. This starts the SPI clock. */
  SPDR = val;
     96a:	82 e0       	ldi	r24, 0x02	; 2
     96c:	8e bd       	out	0x2e, r24	; 46

  /* Wait for the byte to be shifted into the slave. */
  loop_until_bit_is_set(SPSR, SPIF);
     96e:	0d b4       	in	r0, 0x2d	; 45
     970:	07 fe       	sbrs	r0, 7
     972:	fd cf       	rjmp	.-6      	; 0x96e <mkm_wipe+0x3e>
static inline void
spi_write(uint8_t val)
{
  /* Move the value to be sent to the SPI slave into the SPI
     register. This starts the SPI clock. */
  SPDR = val;
     974:	1e bc       	out	0x2e, r1	; 46

  /* Wait for the byte to be shifted into the slave. */
  loop_until_bit_is_set(SPSR, SPIF);
     976:	0d b4       	in	r0, 0x2d	; 45
     978:	07 fe       	sbrs	r0, 7
     97a:	fd cf       	rjmp	.-6      	; 0x976 <mkm_wipe+0x46>
static inline void
spi_write(uint8_t val)
{
  /* Move the value to be sent to the SPI slave into the SPI
     register. This starts the SPI clock. */
  SPDR = val;
     97c:	1e bc       	out	0x2e, r1	; 46

  /* Wait for the byte to be shifted into the slave. */
  loop_until_bit_is_set(SPSR, SPIF);
     97e:	0d b4       	in	r0, 0x2d	; 45
     980:	07 fe       	sbrs	r0, 7
     982:	fd cf       	rjmp	.-6      	; 0x97e <mkm_wipe+0x4e>
     984:	8f ef       	ldi	r24, 0xFF	; 255
     986:	9f e1       	ldi	r25, 0x1F	; 31
static inline void
spi_write(uint8_t val)
{
  /* Move the value to be sent to the SPI slave into the SPI
     register. This starts the SPI clock. */
  SPDR = val;
     988:	1e bc       	out	0x2e, r1	; 46

  /* Wait for the byte to be shifted into the slave. */
  loop_until_bit_is_set(SPSR, SPIF);
     98a:	0d b4       	in	r0, 0x2d	; 45
     98c:	07 fe       	sbrs	r0, 7
     98e:	fd cf       	rjmp	.-6      	; 0x98a <mkm_wipe+0x5a>
     990:	01 97       	sbiw	r24, 0x01	; 1

  mkm_chip_select(1);
  spi_write(SPI_WRITE);
  spi_write(0);                    /* Address, high byte. */
  spi_write(0);                    /* Address, low byte. */
  for (int i = 0; i < 0x1fff; i++) /* 8192 bytes (64Kbit). */
     992:	d1 f7       	brne	.-12     	; 0x988 <mkm_wipe+0x58>
mkm_chip_select(int select_flag)
{
  if (select_flag)
    MKM_CS_PORT &= ~_BV(MKM_CS_BIT); /* CS low. */
  else
    MKM_CS_PORT |= _BV(MKM_CS_BIT); /* CS high. */
     994:	15 9a       	sbi	0x02, 5	; 2
	  
	  MKM_CS_PORT |= _BV(MKM_CS_BIT); /* CS high. */
    }
  else
    {
      SPCR &= ~_BV(SPE);        /* Disable SPI. */
     996:	8c b5       	in	r24, 0x2c	; 44
     998:	8f 7b       	andi	r24, 0xBF	; 191
     99a:	8c bd       	out	0x2c, r24	; 44
      PRR |= _BV(PRSPI);        /* Enable SPI power reduction. */
     99c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__EEPROM_REGION_LENGTH__+0x7f0064>
     9a0:	84 60       	ori	r24, 0x04	; 4
     9a2:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__EEPROM_REGION_LENGTH__+0x7f0064>
     9a6:	08 95       	ret

000009a8 <__vector_1>:
#endif

#if 1
/* Interrupt handler for case tamper switches. */
ISR (INT0_vect)
{
     9a8:	1f 92       	push	r1
     9aa:	0f 92       	push	r0
     9ac:	0f b6       	in	r0, 0x3f	; 63
     9ae:	0f 92       	push	r0
     9b0:	11 24       	eor	r1, r1
     9b2:	2f 93       	push	r18
     9b4:	3f 93       	push	r19
     9b6:	4f 93       	push	r20
     9b8:	5f 93       	push	r21
     9ba:	6f 93       	push	r22
     9bc:	7f 93       	push	r23
     9be:	8f 93       	push	r24
     9c0:	9f 93       	push	r25
     9c2:	af 93       	push	r26
     9c4:	bf 93       	push	r27
     9c6:	ef 93       	push	r30
     9c8:	ff 93       	push	r31
	
	if(case_enable && configured == 0x55){
     9ca:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <case_enable>
     9ce:	88 23       	and	r24, r24
     9d0:	21 f0       	breq	.+8      	; 0x9da <__vector_1+0x32>
     9d2:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <configured>
     9d6:	85 35       	cpi	r24, 0x55	; 85
     9d8:	89 f0       	breq	.+34     	; 0x9fc <__vector_1+0x54>
			fault_code = CASE;
		}
	}
	
	//sleep_disable();
}
     9da:	ff 91       	pop	r31
     9dc:	ef 91       	pop	r30
     9de:	bf 91       	pop	r27
     9e0:	af 91       	pop	r26
     9e2:	9f 91       	pop	r25
     9e4:	8f 91       	pop	r24
     9e6:	7f 91       	pop	r23
     9e8:	6f 91       	pop	r22
     9ea:	5f 91       	pop	r21
     9ec:	4f 91       	pop	r20
     9ee:	3f 91       	pop	r19
     9f0:	2f 91       	pop	r18
     9f2:	0f 90       	pop	r0
     9f4:	0f be       	out	0x3f, r0	; 63
     9f6:	0f 90       	pop	r0
     9f8:	1f 90       	pop	r1
     9fa:	18 95       	reti
/* Interrupt handler for case tamper switches. */
ISR (INT0_vect)
{
	
	if(case_enable && configured == 0x55){
		case_flt_cnt++;
     9fc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <case_flt_cnt>
     a00:	8f 5f       	subi	r24, 0xFF	; 255
     a02:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <case_flt_cnt>
		/* we are doing a "three-strikes" filtering on the triggering of this interrupt, if the tamper ring
		is truly broken, we will swiftly re-trigger this before the main loop has a chance to clear the count */
		if(case_flt_cnt>3){ 
     a06:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <case_flt_cnt>
     a0a:	84 30       	cpi	r24, 0x04	; 4
     a0c:	30 f3       	brcs	.-52     	; 0x9da <__vector_1+0x32>
			cli();			/*disable interrupts until memory is cleared */
     a0e:	f8 94       	cli
			mkm_wipe();
     a10:	8f df       	rcall	.-226    	; 0x930 <mkm_wipe>
			//To do: now disable case tamper (INT0_vect) interrupt until system is reset
			EIMSK = 0x00;
     a12:	1d ba       	out	0x1d, r1	; 29
			sei();				/* re-enabling interrupts allows additional tamper trigger or tamper reset */
     a14:	78 94       	sei
			//also having interrupts disabled while trying ssp commands below was problematic
			/*TAMP_ON turns on LED and provides falling edge signal to Pi to indicate tamper event */
			ssp_write(TAMP_ON);
     a16:	88 e0       	ldi	r24, 0x08	; 8
     a18:	34 df       	rcall	.-408    	; 0x882 <ssp_write>
			ssp_int_reset();   /*read INTFA reg to reset flag*/
     a1a:	21 df       	rcall	.-446    	; 0x85e <ssp_int_reset>
			tamper_detected = 1;
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <tamper_detected>
			fault_code = CASE;
     a22:	88 e0       	ldi	r24, 0x08	; 8
     a24:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <fault_code>
		}
	}
	
	//sleep_disable();
}
     a28:	d8 cf       	rjmp	.-80     	; 0x9da <__vector_1+0x32>

00000a2a <process_message>:
    }//end while

  return 0;
}

void process_message(){
     a2a:	cf 93       	push	r28
     a2c:	df 93       	push	r29
     a2e:	00 d0       	rcall	.+0      	; 0xa30 <process_message+0x6>
     a30:	cd b7       	in	r28, 0x3d	; 61
     a32:	de b7       	in	r29, 0x3e	; 62
	if (rcv_char == SET_LIGHT) {
     a34:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <rcv_char>
     a38:	81 34       	cpi	r24, 0x41	; 65
     a3a:	09 f4       	brne	.+2      	; 0xa3e <process_message+0x14>
     a3c:	8b c4       	rjmp	.+2326   	; 0x1354 <process_message+0x92a>
			//eeprom_write_word((uint16_t *)LIGHT_PRE, light_thresh);
			light_status = 0;
			send(0x14);
		}
	}
	if (rcv_char == SET_TEMP_HI) {
     a3e:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <rcv_char>
     a42:	82 34       	cpi	r24, 0x42	; 66
     a44:	09 f4       	brne	.+2      	; 0xa48 <process_message+0x1e>
     a46:	53 c4       	rjmp	.+2214   	; 0x12ee <process_message+0x8c4>
			send(0x14);
			temp_hi_thresh = rcv_char;
			//eeprom_write_word((uint16_t *)TEMP_PRE_HI, temp_hi_thresh);
		}
	}
	if (rcv_char == SET_TEMP_LO) {
     a48:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <rcv_char>
     a4c:	83 34       	cpi	r24, 0x43	; 67
     a4e:	09 f4       	brne	.+2      	; 0xa52 <process_message+0x28>
     a50:	1b c4       	rjmp	.+2102   	; 0x1288 <process_message+0x85e>
			send(0x14);
			temp_hi_thresh = rcv_char;
			//eeprom_write_word((uint16_t *)TEMP_PRE_LO, temp_lo_thresh);
		}
	}
	if (rcv_char == SET_VIBE) {
     a52:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <rcv_char>
     a56:	84 34       	cpi	r24, 0x44	; 68
     a58:	09 f4       	brne	.+2      	; 0xa5c <process_message+0x32>
     a5a:	85 c3       	rjmp	.+1802   	; 0x1166 <process_message+0x73c>
			 UCSRC = (1<<UMSEL1)|(1<<UMSEL0);  //change SPI clock phase/polarity first!
			 UCSRC &= ~(1<<UCSZ0);				//before chip selects!!!!
			adx_set_threshold();
		}
	}
	if (rcv_char == ENA_TAMP) {
     a5c:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <rcv_char>
     a60:	85 34       	cpi	r24, 0x45	; 69
     a62:	09 f4       	brne	.+2      	; 0xa66 <process_message+0x3c>
     a64:	31 c3       	rjmp	.+1634   	; 0x10c8 <process_message+0x69e>
			tamper_detected = 0;
			AVR_LED_PORT &= ~_BV(AVR_LED_GREEN_BIT);
			mkm_release();
		}
	}
	if (rcv_char == DIS_TAMP) {
     a66:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <rcv_char>
     a6a:	86 34       	cpi	r24, 0x46	; 70
     a6c:	09 f4       	brne	.+2      	; 0xa70 <process_message+0x46>
     a6e:	db c2       	rjmp	.+1462   	; 0x1026 <process_message+0x5fc>
			tamper_detected = 0;
			AVR_LED_PORT &= ~_BV(AVR_LED_GREEN_BIT);
			mkm_release();
		}
	}
	if (rcv_char == BATT_EN) {
     a70:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <rcv_char>
     a74:	8f 34       	cpi	r24, 0x4F	; 79
     a76:	09 f4       	brne	.+2      	; 0xa7a <process_message+0x50>
     a78:	a5 c2       	rjmp	.+1354   	; 0xfc4 <process_message+0x59a>
				PORTC &= ~_BV(PORTC6);
			}
			send(0x14);
		}
	}
	if (rcv_char == CHK_LIGHT) {
     a7a:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <rcv_char>
     a7e:	87 34       	cpi	r24, 0x47	; 71
     a80:	09 f4       	brne	.+2      	; 0xa84 <process_message+0x5a>
     a82:	4c c2       	rjmp	.+1176   	; 0xf1c <process_message+0x4f2>
		//fix for 16 bit word
		send (light>>8);
		send ((uint8_t) light&0xFF);
		send(0x14);
	}
	if (rcv_char == CHK_TEMP) {
     a84:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <rcv_char>
     a88:	88 34       	cpi	r24, 0x48	; 72
     a8a:	09 f4       	brne	.+2      	; 0xa8e <process_message+0x64>
     a8c:	8c c1       	rjmp	.+792    	; 0xda6 <process_message+0x37c>
		//fix for 16 bit word
		send (temperature>>8);
		send ((uint8_t)temperature&0xFF);
		send(0x14);
	}
	if (rcv_char == CHK_VIBE_S) {
     a8e:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <rcv_char>
     a92:	8d 34       	cpi	r24, 0x4D	; 77
     a94:	09 f4       	brne	.+2      	; 0xa98 <process_message+0x6e>
     a96:	ed c1       	rjmp	.+986    	; 0xe72 <process_message+0x448>
		adx_read_fifo_count();
		send (samples>>8);
		send ((uint8_t)samples&0xFF);
		send(0x14);
	}
	if (rcv_char == GET_VIBE_S) {
     a98:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <rcv_char>
     a9c:	8e 34       	cpi	r24, 0x4E	; 78
     a9e:	09 f4       	brne	.+2      	; 0xaa2 <process_message+0x78>
     aa0:	ca c0       	rjmp	.+404    	; 0xc36 <process_message+0x20c>
		send(zhi);
		send(zlo);
		send(0x14);
	}
	
	if (rcv_char == SET_CONFIG) {
     aa2:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <rcv_char>
     aa6:	8a 34       	cpi	r24, 0x4A	; 74
     aa8:	09 f4       	brne	.+2      	; 0xaac <process_message+0x82>
     aaa:	a0 c0       	rjmp	.+320    	; 0xbec <process_message+0x1c2>
			init_int0();		/*enable INT0 , moved from enable config to allow configured to be set before looking for int*/
		}
		send(0x14);
	}
	
	if (rcv_char == CHK_FAULT) {
     aac:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <rcv_char>
     ab0:	8c 34       	cpi	r24, 0x4C	; 76
     ab2:	91 f1       	breq	.+100    	; 0xb18 <process_message+0xee>
		send(fault_value1);
		send(fault_value2);
		send(0x14);
	}
	
	if (rcv_char == CHK_TAMP) {
     ab4:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <rcv_char>
     ab8:	8b 34       	cpi	r24, 0x4B	; 75
     aba:	39 f0       	breq	.+14     	; 0xaca <process_message+0xa0>
		}
		else {
			send(0x14);
		}
	}
	spi_disable = 0;
     abc:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <spi_disable>
}
     ac0:	0f 90       	pop	r0
     ac2:	0f 90       	pop	r0
     ac4:	df 91       	pop	r29
     ac6:	cf 91       	pop	r28
     ac8:	08 95       	ret
		send(fault_value2);
		send(0x14);
	}
	
	if (rcv_char == CHK_TAMP) {
		rcv_valid = 0;
     aca:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rcv_valid>
		if (tamper_detected == 1) {
     ace:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <tamper_detected>
     ad2:	81 30       	cpi	r24, 0x01	; 1
     ad4:	09 f4       	brne	.+2      	; 0xad8 <process_message+0xae>
     ad6:	d3 c4       	rjmp	.+2470   	; 0x147e <process_message+0xa54>
	}
	spi_disable = 0;
}

void send(uint8_t tx){
	tx_char = tx;
     ad8:	84 e1       	ldi	r24, 0x14	; 20
     ada:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <tx_char>
	tx_bit_count = 0;
     ade:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <tx_bit_count>
	start_bit = 1;
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <start_bit>
	sending = 1;
     ae8:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <sending>
	TCNT1 = 0x00;			//reset counter to avoid glitch on next rcv char.
     aec:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     af0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	spi_disable = 1;
     af4:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <spi_disable>
	TIMSK1 |= (1<<OCIE1A);
     af8:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     afc:	82 60       	ori	r24, 0x02	; 2
     afe:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	while(sending);
     b02:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <sending>
     b06:	81 11       	cpse	r24, r1
     b08:	fc cf       	rjmp	.-8      	; 0xb02 <process_message+0xd8>
		}
		else {
			send(0x14);
		}
	}
	spi_disable = 0;
     b0a:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <spi_disable>
}
     b0e:	0f 90       	pop	r0
     b10:	0f 90       	pop	r0
     b12:	df 91       	pop	r29
     b14:	cf 91       	pop	r28
     b16:	08 95       	ret
		}
		send(0x14);
	}
	
	if (rcv_char == CHK_FAULT) {
		rcv_valid = 0;
     b18:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rcv_valid>
		send(fault_code);
     b1c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <fault_code>
	}
	spi_disable = 0;
}

void send(uint8_t tx){
	tx_char = tx;
     b20:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <tx_char>
	tx_bit_count = 0;
     b24:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <tx_bit_count>
	start_bit = 1;
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <start_bit>
	sending = 1;
     b2e:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <sending>
	TCNT1 = 0x00;			//reset counter to avoid glitch on next rcv char.
     b32:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     b36:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	spi_disable = 1;
     b3a:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <spi_disable>
	TIMSK1 |= (1<<OCIE1A);
     b3e:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     b42:	82 60       	ori	r24, 0x02	; 2
     b44:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	while(sending);
     b48:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <sending>
     b4c:	81 11       	cpse	r24, r1
     b4e:	fc cf       	rjmp	.-8      	; 0xb48 <process_message+0x11e>
	}
	
	if (rcv_char == CHK_FAULT) {
		rcv_valid = 0;
		send(fault_code);
		send(fault_value1);
     b50:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <fault_value1>
	}
	spi_disable = 0;
}

void send(uint8_t tx){
	tx_char = tx;
     b54:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <tx_char>
	tx_bit_count = 0;
     b58:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <tx_bit_count>
	start_bit = 1;
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <start_bit>
	sending = 1;
     b62:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <sending>
	TCNT1 = 0x00;			//reset counter to avoid glitch on next rcv char.
     b66:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     b6a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	spi_disable = 1;
     b6e:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <spi_disable>
	TIMSK1 |= (1<<OCIE1A);
     b72:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     b76:	82 60       	ori	r24, 0x02	; 2
     b78:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	while(sending);
     b7c:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <sending>
     b80:	81 11       	cpse	r24, r1
     b82:	fc cf       	rjmp	.-8      	; 0xb7c <process_message+0x152>
	
	if (rcv_char == CHK_FAULT) {
		rcv_valid = 0;
		send(fault_code);
		send(fault_value1);
		send(fault_value2);
     b84:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <fault_value2>
	}
	spi_disable = 0;
}

void send(uint8_t tx){
	tx_char = tx;
     b88:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <tx_char>
	tx_bit_count = 0;
     b8c:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <tx_bit_count>
	start_bit = 1;
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <start_bit>
	sending = 1;
     b96:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <sending>
	TCNT1 = 0x00;			//reset counter to avoid glitch on next rcv char.
     b9a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     b9e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	spi_disable = 1;
     ba2:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <spi_disable>
	TIMSK1 |= (1<<OCIE1A);
     ba6:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     baa:	82 60       	ori	r24, 0x02	; 2
     bac:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	while(sending);
     bb0:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <sending>
     bb4:	81 11       	cpse	r24, r1
     bb6:	fc cf       	rjmp	.-8      	; 0xbb0 <process_message+0x186>
	}
	spi_disable = 0;
}

void send(uint8_t tx){
	tx_char = tx;
     bb8:	84 e1       	ldi	r24, 0x14	; 20
     bba:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <tx_char>
	tx_bit_count = 0;
     bbe:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <tx_bit_count>
	start_bit = 1;
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <start_bit>
	sending = 1;
     bc8:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <sending>
	TCNT1 = 0x00;			//reset counter to avoid glitch on next rcv char.
     bcc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     bd0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	spi_disable = 1;
     bd4:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <spi_disable>
	TIMSK1 |= (1<<OCIE1A);
     bd8:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     bdc:	82 60       	ori	r24, 0x02	; 2
     bde:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	while(sending);
     be2:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <sending>
     be6:	81 11       	cpse	r24, r1
     be8:	fc cf       	rjmp	.-8      	; 0xbe2 <process_message+0x1b8>
     bea:	64 cf       	rjmp	.-312    	; 0xab4 <process_message+0x8a>
		send(zlo);
		send(0x14);
	}
	
	if (rcv_char == SET_CONFIG) {
		rcv_valid = 0;
     bec:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rcv_valid>
}

static inline void
mkm_release()
{
  MKM_CONTROL_AVR_PORT |= _BV(MKM_CONTROL_AVR_BIT);
     bf0:	16 9a       	sbi	0x02, 6	; 2
  MKM_CONTROL_FPGA_PORT &= ~_BV(MKM_CONTROL_FPGA_BIT);
     bf2:	17 98       	cbi	0x02, 7	; 2
	}
	
	if (rcv_char == SET_CONFIG) {
		rcv_valid = 0;
		mkm_release();
		configured = 0x55;
     bf4:	85 e5       	ldi	r24, 0x55	; 85
     bf6:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <configured>
		if(case_enable){
     bfa:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <case_enable>
     bfe:	81 11       	cpse	r24, r1
     c00:	1f c4       	rjmp	.+2110   	; 0x1440 <process_message+0xa16>
	}
	spi_disable = 0;
}

void send(uint8_t tx){
	tx_char = tx;
     c02:	84 e1       	ldi	r24, 0x14	; 20
     c04:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <tx_char>
	tx_bit_count = 0;
     c08:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <tx_bit_count>
	start_bit = 1;
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <start_bit>
	sending = 1;
     c12:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <sending>
	TCNT1 = 0x00;			//reset counter to avoid glitch on next rcv char.
     c16:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     c1a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	spi_disable = 1;
     c1e:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <spi_disable>
	TIMSK1 |= (1<<OCIE1A);
     c22:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     c26:	82 60       	ori	r24, 0x02	; 2
     c28:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	while(sending);
     c2c:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <sending>
     c30:	81 11       	cpse	r24, r1
     c32:	fc cf       	rjmp	.-8      	; 0xc2c <process_message+0x202>
     c34:	3b cf       	rjmp	.-394    	; 0xaac <process_message+0x82>
		send (samples>>8);
		send ((uint8_t)samples&0xFF);
		send(0x14);
	}
	if (rcv_char == GET_VIBE_S) {
		rcv_valid = 0;
     c36:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rcv_valid>
		//fix for 16 bit word
		send(xhi);
     c3a:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <xhi>
	}
	spi_disable = 0;
}

void send(uint8_t tx){
	tx_char = tx;
     c3e:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <tx_char>
	tx_bit_count = 0;
     c42:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <tx_bit_count>
	start_bit = 1;
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <start_bit>
	sending = 1;
     c4c:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <sending>
	TCNT1 = 0x00;			//reset counter to avoid glitch on next rcv char.
     c50:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     c54:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	spi_disable = 1;
     c58:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <spi_disable>
	TIMSK1 |= (1<<OCIE1A);
     c5c:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     c60:	82 60       	ori	r24, 0x02	; 2
     c62:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	while(sending);
     c66:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <sending>
     c6a:	81 11       	cpse	r24, r1
     c6c:	fc cf       	rjmp	.-8      	; 0xc66 <process_message+0x23c>
	}
	if (rcv_char == GET_VIBE_S) {
		rcv_valid = 0;
		//fix for 16 bit word
		send(xhi);
		send(xlo);
     c6e:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <xlo>
	}
	spi_disable = 0;
}

void send(uint8_t tx){
	tx_char = tx;
     c72:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <tx_char>
	tx_bit_count = 0;
     c76:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <tx_bit_count>
	start_bit = 1;
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <start_bit>
	sending = 1;
     c80:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <sending>
	TCNT1 = 0x00;			//reset counter to avoid glitch on next rcv char.
     c84:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     c88:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	spi_disable = 1;
     c8c:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <spi_disable>
	TIMSK1 |= (1<<OCIE1A);
     c90:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     c94:	82 60       	ori	r24, 0x02	; 2
     c96:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	while(sending);
     c9a:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <sending>
     c9e:	81 11       	cpse	r24, r1
     ca0:	fc cf       	rjmp	.-8      	; 0xc9a <process_message+0x270>
	if (rcv_char == GET_VIBE_S) {
		rcv_valid = 0;
		//fix for 16 bit word
		send(xhi);
		send(xlo);
		send(yhi);
     ca2:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <yhi>
	}
	spi_disable = 0;
}

void send(uint8_t tx){
	tx_char = tx;
     ca6:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <tx_char>
	tx_bit_count = 0;
     caa:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <tx_bit_count>
	start_bit = 1;
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <start_bit>
	sending = 1;
     cb4:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <sending>
	TCNT1 = 0x00;			//reset counter to avoid glitch on next rcv char.
     cb8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     cbc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	spi_disable = 1;
     cc0:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <spi_disable>
	TIMSK1 |= (1<<OCIE1A);
     cc4:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     cc8:	82 60       	ori	r24, 0x02	; 2
     cca:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	while(sending);
     cce:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <sending>
     cd2:	81 11       	cpse	r24, r1
     cd4:	fc cf       	rjmp	.-8      	; 0xcce <process_message+0x2a4>
		rcv_valid = 0;
		//fix for 16 bit word
		send(xhi);
		send(xlo);
		send(yhi);
		send(ylo);
     cd6:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <ylo>
	}
	spi_disable = 0;
}

void send(uint8_t tx){
	tx_char = tx;
     cda:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <tx_char>
	tx_bit_count = 0;
     cde:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <tx_bit_count>
	start_bit = 1;
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <start_bit>
	sending = 1;
     ce8:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <sending>
	TCNT1 = 0x00;			//reset counter to avoid glitch on next rcv char.
     cec:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     cf0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	spi_disable = 1;
     cf4:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <spi_disable>
	TIMSK1 |= (1<<OCIE1A);
     cf8:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     cfc:	82 60       	ori	r24, 0x02	; 2
     cfe:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	while(sending);
     d02:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <sending>
     d06:	81 11       	cpse	r24, r1
     d08:	fc cf       	rjmp	.-8      	; 0xd02 <process_message+0x2d8>
		//fix for 16 bit word
		send(xhi);
		send(xlo);
		send(yhi);
		send(ylo);
		send(zhi);
     d0a:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <zhi>
	}
	spi_disable = 0;
}

void send(uint8_t tx){
	tx_char = tx;
     d0e:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <tx_char>
	tx_bit_count = 0;
     d12:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <tx_bit_count>
	start_bit = 1;
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <start_bit>
	sending = 1;
     d1c:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <sending>
	TCNT1 = 0x00;			//reset counter to avoid glitch on next rcv char.
     d20:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     d24:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	spi_disable = 1;
     d28:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <spi_disable>
	TIMSK1 |= (1<<OCIE1A);
     d2c:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     d30:	82 60       	ori	r24, 0x02	; 2
     d32:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	while(sending);
     d36:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <sending>
     d3a:	81 11       	cpse	r24, r1
     d3c:	fc cf       	rjmp	.-8      	; 0xd36 <process_message+0x30c>
		send(xhi);
		send(xlo);
		send(yhi);
		send(ylo);
		send(zhi);
		send(zlo);
     d3e:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <zlo>
	}
	spi_disable = 0;
}

void send(uint8_t tx){
	tx_char = tx;
     d42:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <tx_char>
	tx_bit_count = 0;
     d46:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <tx_bit_count>
	start_bit = 1;
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <start_bit>
	sending = 1;
     d50:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <sending>
	TCNT1 = 0x00;			//reset counter to avoid glitch on next rcv char.
     d54:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     d58:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	spi_disable = 1;
     d5c:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <spi_disable>
	TIMSK1 |= (1<<OCIE1A);
     d60:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     d64:	82 60       	ori	r24, 0x02	; 2
     d66:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	while(sending);
     d6a:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <sending>
     d6e:	81 11       	cpse	r24, r1
     d70:	fc cf       	rjmp	.-8      	; 0xd6a <process_message+0x340>
	}
	spi_disable = 0;
}

void send(uint8_t tx){
	tx_char = tx;
     d72:	84 e1       	ldi	r24, 0x14	; 20
     d74:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <tx_char>
	tx_bit_count = 0;
     d78:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <tx_bit_count>
	start_bit = 1;
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <start_bit>
	sending = 1;
     d82:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <sending>
	TCNT1 = 0x00;			//reset counter to avoid glitch on next rcv char.
     d86:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     d8a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	spi_disable = 1;
     d8e:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <spi_disable>
	TIMSK1 |= (1<<OCIE1A);
     d92:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     d96:	82 60       	ori	r24, 0x02	; 2
     d98:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	while(sending);
     d9c:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <sending>
     da0:	81 11       	cpse	r24, r1
     da2:	fc cf       	rjmp	.-8      	; 0xd9c <process_message+0x372>
     da4:	7e ce       	rjmp	.-772    	; 0xaa2 <process_message+0x78>
		send (light>>8);
		send ((uint8_t) light&0xFF);
		send(0x14);
	}
	if (rcv_char == CHK_TEMP) {
		rcv_valid = 0;
     da6:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rcv_valid>
		//fix for 16 bit word
		send (temperature>>8);
     daa:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <temperature>
     dae:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <temperature+0x1>
     db2:	a0 91 2a 01 	lds	r26, 0x012A	; 0x80012a <temperature+0x2>
     db6:	b0 91 2b 01 	lds	r27, 0x012B	; 0x80012b <temperature+0x3>
     dba:	89 2f       	mov	r24, r25
     dbc:	9a 2f       	mov	r25, r26
     dbe:	ab 2f       	mov	r26, r27
     dc0:	bb 27       	eor	r27, r27
     dc2:	a7 fd       	sbrc	r26, 7
     dc4:	ba 95       	dec	r27
	}
	spi_disable = 0;
}

void send(uint8_t tx){
	tx_char = tx;
     dc6:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <tx_char>
	tx_bit_count = 0;
     dca:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <tx_bit_count>
	start_bit = 1;
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <start_bit>
	sending = 1;
     dd4:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <sending>
	TCNT1 = 0x00;			//reset counter to avoid glitch on next rcv char.
     dd8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     ddc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	spi_disable = 1;
     de0:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <spi_disable>
	TIMSK1 |= (1<<OCIE1A);
     de4:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     de8:	82 60       	ori	r24, 0x02	; 2
     dea:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	while(sending);
     dee:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <sending>
     df2:	81 11       	cpse	r24, r1
     df4:	fc cf       	rjmp	.-8      	; 0xdee <process_message+0x3c4>
	}
	if (rcv_char == CHK_TEMP) {
		rcv_valid = 0;
		//fix for 16 bit word
		send (temperature>>8);
		send ((uint8_t)temperature&0xFF);
     df6:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <temperature>
     dfa:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <temperature+0x1>
     dfe:	a0 91 2a 01 	lds	r26, 0x012A	; 0x80012a <temperature+0x2>
     e02:	b0 91 2b 01 	lds	r27, 0x012B	; 0x80012b <temperature+0x3>
	}
	spi_disable = 0;
}

void send(uint8_t tx){
	tx_char = tx;
     e06:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <tx_char>
	tx_bit_count = 0;
     e0a:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <tx_bit_count>
	start_bit = 1;
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <start_bit>
	sending = 1;
     e14:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <sending>
	TCNT1 = 0x00;			//reset counter to avoid glitch on next rcv char.
     e18:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     e1c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	spi_disable = 1;
     e20:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <spi_disable>
	TIMSK1 |= (1<<OCIE1A);
     e24:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     e28:	82 60       	ori	r24, 0x02	; 2
     e2a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	while(sending);
     e2e:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <sending>
     e32:	81 11       	cpse	r24, r1
     e34:	fc cf       	rjmp	.-8      	; 0xe2e <process_message+0x404>
	}
	spi_disable = 0;
}

void send(uint8_t tx){
	tx_char = tx;
     e36:	84 e1       	ldi	r24, 0x14	; 20
     e38:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <tx_char>
	tx_bit_count = 0;
     e3c:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <tx_bit_count>
	start_bit = 1;
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <start_bit>
	sending = 1;
     e46:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <sending>
	TCNT1 = 0x00;			//reset counter to avoid glitch on next rcv char.
     e4a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     e4e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	spi_disable = 1;
     e52:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <spi_disable>
	TIMSK1 |= (1<<OCIE1A);
     e56:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     e5a:	82 60       	ori	r24, 0x02	; 2
     e5c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	while(sending);
     e60:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <sending>
     e64:	81 11       	cpse	r24, r1
     e66:	fc cf       	rjmp	.-8      	; 0xe60 <process_message+0x436>
		//fix for 16 bit word
		send (temperature>>8);
		send ((uint8_t)temperature&0xFF);
		send(0x14);
	}
	if (rcv_char == CHK_VIBE_S) {
     e68:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <rcv_char>
     e6c:	8d 34       	cpi	r24, 0x4D	; 77
     e6e:	09 f0       	breq	.+2      	; 0xe72 <process_message+0x448>
     e70:	13 ce       	rjmp	.-986    	; 0xa98 <process_message+0x6e>
		rcv_valid = 0;
     e72:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rcv_valid>
		//fix for 16 bit word
		adx_read_fifo_count();
     e76:	5f da       	rcall	.-2882   	; 0x336 <adx_read_fifo_count>
		send (samples>>8);
     e78:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <samples>
     e7c:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <samples+0x1>
	}
	spi_disable = 0;
}

void send(uint8_t tx){
	tx_char = tx;
     e80:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <tx_char>
	tx_bit_count = 0;
     e84:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <tx_bit_count>
	start_bit = 1;
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <start_bit>
	sending = 1;
     e8e:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <sending>
	TCNT1 = 0x00;			//reset counter to avoid glitch on next rcv char.
     e92:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     e96:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	spi_disable = 1;
     e9a:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <spi_disable>
	TIMSK1 |= (1<<OCIE1A);
     e9e:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     ea2:	82 60       	ori	r24, 0x02	; 2
     ea4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	while(sending);
     ea8:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <sending>
     eac:	81 11       	cpse	r24, r1
     eae:	fc cf       	rjmp	.-8      	; 0xea8 <process_message+0x47e>
	if (rcv_char == CHK_VIBE_S) {
		rcv_valid = 0;
		//fix for 16 bit word
		adx_read_fifo_count();
		send (samples>>8);
		send ((uint8_t)samples&0xFF);
     eb0:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <samples>
     eb4:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <samples+0x1>
	}
	spi_disable = 0;
}

void send(uint8_t tx){
	tx_char = tx;
     eb8:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <tx_char>
	tx_bit_count = 0;
     ebc:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <tx_bit_count>
	start_bit = 1;
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <start_bit>
	sending = 1;
     ec6:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <sending>
	TCNT1 = 0x00;			//reset counter to avoid glitch on next rcv char.
     eca:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     ece:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	spi_disable = 1;
     ed2:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <spi_disable>
	TIMSK1 |= (1<<OCIE1A);
     ed6:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     eda:	82 60       	ori	r24, 0x02	; 2
     edc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	while(sending);
     ee0:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <sending>
     ee4:	81 11       	cpse	r24, r1
     ee6:	fc cf       	rjmp	.-8      	; 0xee0 <process_message+0x4b6>
	}
	spi_disable = 0;
}

void send(uint8_t tx){
	tx_char = tx;
     ee8:	84 e1       	ldi	r24, 0x14	; 20
     eea:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <tx_char>
	tx_bit_count = 0;
     eee:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <tx_bit_count>
	start_bit = 1;
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <start_bit>
	sending = 1;
     ef8:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <sending>
	TCNT1 = 0x00;			//reset counter to avoid glitch on next rcv char.
     efc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     f00:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	spi_disable = 1;
     f04:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <spi_disable>
	TIMSK1 |= (1<<OCIE1A);
     f08:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     f0c:	82 60       	ori	r24, 0x02	; 2
     f0e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	while(sending);
     f12:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <sending>
     f16:	81 11       	cpse	r24, r1
     f18:	fc cf       	rjmp	.-8      	; 0xf12 <process_message+0x4e8>
     f1a:	be cd       	rjmp	.-1156   	; 0xa98 <process_message+0x6e>
			}
			send(0x14);
		}
	}
	if (rcv_char == CHK_LIGHT) {
		rcv_valid = 0;
     f1c:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rcv_valid>
		//fix for 16 bit word
		send (light>>8);
     f20:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <light>
     f24:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <light+0x1>
	}
	spi_disable = 0;
}

void send(uint8_t tx){
	tx_char = tx;
     f28:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <tx_char>
	tx_bit_count = 0;
     f2c:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <tx_bit_count>
	start_bit = 1;
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <start_bit>
	sending = 1;
     f36:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <sending>
	TCNT1 = 0x00;			//reset counter to avoid glitch on next rcv char.
     f3a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     f3e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	spi_disable = 1;
     f42:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <spi_disable>
	TIMSK1 |= (1<<OCIE1A);
     f46:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     f4a:	82 60       	ori	r24, 0x02	; 2
     f4c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	while(sending);
     f50:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <sending>
     f54:	81 11       	cpse	r24, r1
     f56:	fc cf       	rjmp	.-8      	; 0xf50 <process_message+0x526>
	}
	if (rcv_char == CHK_LIGHT) {
		rcv_valid = 0;
		//fix for 16 bit word
		send (light>>8);
		send ((uint8_t) light&0xFF);
     f58:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <light>
     f5c:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <light+0x1>
	}
	spi_disable = 0;
}

void send(uint8_t tx){
	tx_char = tx;
     f60:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <tx_char>
	tx_bit_count = 0;
     f64:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <tx_bit_count>
	start_bit = 1;
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <start_bit>
	sending = 1;
     f6e:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <sending>
	TCNT1 = 0x00;			//reset counter to avoid glitch on next rcv char.
     f72:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     f76:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	spi_disable = 1;
     f7a:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <spi_disable>
	TIMSK1 |= (1<<OCIE1A);
     f7e:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     f82:	82 60       	ori	r24, 0x02	; 2
     f84:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	while(sending);
     f88:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <sending>
     f8c:	81 11       	cpse	r24, r1
     f8e:	fc cf       	rjmp	.-8      	; 0xf88 <process_message+0x55e>
	}
	spi_disable = 0;
}

void send(uint8_t tx){
	tx_char = tx;
     f90:	84 e1       	ldi	r24, 0x14	; 20
     f92:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <tx_char>
	tx_bit_count = 0;
     f96:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <tx_bit_count>
	start_bit = 1;
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <start_bit>
	sending = 1;
     fa0:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <sending>
	TCNT1 = 0x00;			//reset counter to avoid glitch on next rcv char.
     fa4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     fa8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	spi_disable = 1;
     fac:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <spi_disable>
	TIMSK1 |= (1<<OCIE1A);
     fb0:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     fb4:	82 60       	ori	r24, 0x02	; 2
     fb6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	while(sending);
     fba:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <sending>
     fbe:	81 11       	cpse	r24, r1
     fc0:	fc cf       	rjmp	.-8      	; 0xfba <process_message+0x590>
     fc2:	60 cd       	rjmp	.-1344   	; 0xa84 <process_message+0x5a>
			AVR_LED_PORT &= ~_BV(AVR_LED_GREEN_BIT);
			mkm_release();
		}
	}
	if (rcv_char == BATT_EN) {
		rcv_valid = 0;
     fc4:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rcv_valid>
		//fix for 16 bit word
		while (!rcv_valid & !rcv_error_stop){ }
     fc8:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <rcv_valid>
     fcc:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <rcv_error_stop>
     fd0:	88 23       	and	r24, r24
     fd2:	31 f1       	breq	.+76     	; 0x1020 <process_message+0x5f6>
		rcv_valid = 0;
     fd4:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rcv_valid>
		if (rcv_error_stop ==1) {
     fd8:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <rcv_error_stop>
     fdc:	81 30       	cpi	r24, 0x01	; 1
     fde:	09 f4       	brne	.+2      	; 0xfe2 <process_message+0x5b8>
     fe0:	92 c2       	rjmp	.+1316   	; 0x1506 <process_message+0xadc>
			rcv_error_stop = 0;
			send(0x15);
		}
		else {
			//BATT_ON signal needs to be asserted for backup to work
			if(rcv_char){
     fe2:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <rcv_char>
     fe6:	81 11       	cpse	r24, r1
     fe8:	31 c2       	rjmp	.+1122   	; 0x144c <process_message+0xa22>
				PORTC |= _BV(PORTC6);
			}
			else {
				PORTC &= ~_BV(PORTC6);
     fea:	56 98       	cbi	0x0a, 6	; 10
	}
	spi_disable = 0;
}

void send(uint8_t tx){
	tx_char = tx;
     fec:	84 e1       	ldi	r24, 0x14	; 20
     fee:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <tx_char>
	tx_bit_count = 0;
     ff2:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <tx_bit_count>
	start_bit = 1;
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <start_bit>
	sending = 1;
     ffc:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <sending>
	TCNT1 = 0x00;			//reset counter to avoid glitch on next rcv char.
    1000:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
    1004:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	spi_disable = 1;
    1008:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <spi_disable>
	TIMSK1 |= (1<<OCIE1A);
    100c:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
    1010:	82 60       	ori	r24, 0x02	; 2
    1012:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	while(sending);
    1016:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <sending>
    101a:	81 11       	cpse	r24, r1
    101c:	fc cf       	rjmp	.-8      	; 0x1016 <process_message+0x5ec>
    101e:	2d cd       	rjmp	.-1446   	; 0xa7a <process_message+0x50>
		}
	}
	if (rcv_char == BATT_EN) {
		rcv_valid = 0;
		//fix for 16 bit word
		while (!rcv_valid & !rcv_error_stop){ }
    1020:	99 23       	and	r25, r25
    1022:	91 f2       	breq	.-92     	; 0xfc8 <process_message+0x59e>
    1024:	d7 cf       	rjmp	.-82     	; 0xfd4 <process_message+0x5aa>
			AVR_LED_PORT &= ~_BV(AVR_LED_GREEN_BIT);
			mkm_release();
		}
	}
	if (rcv_char == DIS_TAMP) {
		rcv_valid = 0;
    1026:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rcv_valid>
		//fix for 16 bit word
		while (!rcv_valid & !rcv_error_stop){ }
    102a:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <rcv_valid>
    102e:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <rcv_error_stop>
    1032:	88 23       	and	r24, r24
    1034:	09 f4       	brne	.+2      	; 0x1038 <process_message+0x60e>
    1036:	44 c0       	rjmp	.+136    	; 0x10c0 <process_message+0x696>
		rcv_valid = 0;
    1038:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rcv_valid>
		if (rcv_error_stop ==1) {
    103c:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <rcv_error_stop>
    1040:	81 30       	cpi	r24, 0x01	; 1
    1042:	09 f4       	brne	.+2      	; 0x1046 <process_message+0x61c>
    1044:	7b c2       	rjmp	.+1270   	; 0x153c <process_message+0xb12>
			light_status = 0;
			send(0x15);
		}
		else {
			//uint8_t flags = eeprom_read_byte((uint8_t *)TAMP_FLAGS);
			flags &= ~rcv_char;
    1046:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <rcv_char>
    104a:	80 95       	com	r24
    104c:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <flags>
    1050:	89 23       	and	r24, r25
    1052:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <flags>
	}
	spi_disable = 0;
}

void send(uint8_t tx){
	tx_char = tx;
    1056:	84 e1       	ldi	r24, 0x14	; 20
    1058:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <tx_char>
	tx_bit_count = 0;
    105c:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <tx_bit_count>
	start_bit = 1;
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <start_bit>
	sending = 1;
    1066:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <sending>
	TCNT1 = 0x00;			//reset counter to avoid glitch on next rcv char.
    106a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
    106e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	spi_disable = 1;
    1072:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <spi_disable>
	TIMSK1 |= (1<<OCIE1A);
    1076:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
    107a:	82 60       	ori	r24, 0x02	; 2
    107c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	while(sending);
    1080:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <sending>
    1084:	81 11       	cpse	r24, r1
    1086:	fc cf       	rjmp	.-8      	; 0x1080 <process_message+0x656>
		}
		else {
			//uint8_t flags = eeprom_read_byte((uint8_t *)TAMP_FLAGS);
			flags &= ~rcv_char;
			send(0x14);
			init_tamper_values(flags, 0);
    1088:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <flags>
		//flags = eeprom_read_byte ((uint8_t *)TAMP_FLAGS);
	//}
	//else {
		flags = flags_set;
	//}
	if (flags & LIGHT) {
    108c:	80 ff       	sbrs	r24, 0
    108e:	ec c1       	rjmp	.+984    	; 0x1468 <process_message+0xa3e>
		light_enable = 1;
    1090:	91 e0       	ldi	r25, 0x01	; 1
    1092:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <light_enable>
	}
	else {
		light_enable = 0;
	}
	if (flags & TEMP) {
    1096:	81 ff       	sbrs	r24, 1
    1098:	eb c1       	rjmp	.+982    	; 0x1470 <process_message+0xa46>
		temp_enable = 1;
    109a:	91 e0       	ldi	r25, 0x01	; 1
    109c:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <temp_enable>
	}
	else {
		temp_enable = 0;
	}
	if (flags & VIBE) {
    10a0:	82 ff       	sbrs	r24, 2
    10a2:	ea c1       	rjmp	.+980    	; 0x1478 <process_message+0xa4e>
		vibe_enable = 1;
    10a4:	91 e0       	ldi	r25, 0x01	; 1
    10a6:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <vibe_enable>
	}
	else{
		vibe_enable = 0;
	}
	if (flags & CASE) {
    10aa:	83 fd       	sbrc	r24, 3
    10ac:	07 c2       	rjmp	.+1038   	; 0x14bc <process_message+0xa92>
		case_enable = 1;
		
	}
	else{
		case_enable = 0;
    10ae:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <case_enable>
		EIMSK = 0x00;		/*dis-able INT0 */
    10b2:	1d ba       	out	0x1d, r1	; 29
		else {
			//uint8_t flags = eeprom_read_byte((uint8_t *)TAMP_FLAGS);
			flags &= ~rcv_char;
			send(0x14);
			init_tamper_values(flags, 0);
			tamper_detected = 0;
    10b4:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <tamper_detected>
			AVR_LED_PORT &= ~_BV(AVR_LED_GREEN_BIT);
    10b8:	11 98       	cbi	0x02, 1	; 2
}

static inline void
mkm_release()
{
  MKM_CONTROL_AVR_PORT |= _BV(MKM_CONTROL_AVR_BIT);
    10ba:	16 9a       	sbi	0x02, 6	; 2
  MKM_CONTROL_FPGA_PORT &= ~_BV(MKM_CONTROL_FPGA_BIT);
    10bc:	17 98       	cbi	0x02, 7	; 2
    10be:	d8 cc       	rjmp	.-1616   	; 0xa70 <process_message+0x46>
		}
	}
	if (rcv_char == DIS_TAMP) {
		rcv_valid = 0;
		//fix for 16 bit word
		while (!rcv_valid & !rcv_error_stop){ }
    10c0:	99 23       	and	r25, r25
    10c2:	09 f4       	brne	.+2      	; 0x10c6 <process_message+0x69c>
    10c4:	b2 cf       	rjmp	.-156    	; 0x102a <process_message+0x600>
    10c6:	b8 cf       	rjmp	.-144    	; 0x1038 <process_message+0x60e>
			 UCSRC &= ~(1<<UCSZ0);				//before chip selects!!!!
			adx_set_threshold();
		}
	}
	if (rcv_char == ENA_TAMP) {
		rcv_valid = 0;
    10c8:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rcv_valid>
		//fix for 16 bit word
		while (!rcv_valid & !rcv_error_stop){ }
    10cc:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <rcv_valid>
    10d0:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <rcv_error_stop>
    10d4:	88 23       	and	r24, r24
    10d6:	09 f4       	brne	.+2      	; 0x10da <process_message+0x6b0>
    10d8:	42 c0       	rjmp	.+132    	; 0x115e <process_message+0x734>
		rcv_valid = 0;
    10da:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rcv_valid>
		if (rcv_error_stop ==1) {
    10de:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <rcv_error_stop>
    10e2:	81 30       	cpi	r24, 0x01	; 1
    10e4:	09 f4       	brne	.+2      	; 0x10e8 <process_message+0x6be>
    10e6:	f2 c1       	rjmp	.+996    	; 0x14cc <process_message+0xaa2>
			light_status = 0;
			send(0x15);
		}
		else {
			//uint8_t flags = eeprom_read_byte((uint8_t *)TAMP_FLAGS);
			flags |= rcv_char;
    10e8:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <rcv_char>
    10ec:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <flags>
    10f0:	89 2b       	or	r24, r25
    10f2:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <flags>
	}
	spi_disable = 0;
}

void send(uint8_t tx){
	tx_char = tx;
    10f6:	84 e1       	ldi	r24, 0x14	; 20
    10f8:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <tx_char>
	tx_bit_count = 0;
    10fc:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <tx_bit_count>
	start_bit = 1;
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <start_bit>
	sending = 1;
    1106:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <sending>
	TCNT1 = 0x00;			//reset counter to avoid glitch on next rcv char.
    110a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
    110e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	spi_disable = 1;
    1112:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <spi_disable>
	TIMSK1 |= (1<<OCIE1A);
    1116:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
    111a:	82 60       	ori	r24, 0x02	; 2
    111c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	while(sending);
    1120:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <sending>
    1124:	81 11       	cpse	r24, r1
    1126:	fc cf       	rjmp	.-8      	; 0x1120 <process_message+0x6f6>
		}
		else {
			//uint8_t flags = eeprom_read_byte((uint8_t *)TAMP_FLAGS);
			flags |= rcv_char;
			send(0x14);
			init_tamper_values(flags, 0);
    1128:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <flags>
		//flags = eeprom_read_byte ((uint8_t *)TAMP_FLAGS);
	//}
	//else {
		flags = flags_set;
	//}
	if (flags & LIGHT) {
    112c:	80 fd       	sbrc	r24, 0
    112e:	90 c1       	rjmp	.+800    	; 0x1450 <process_message+0xa26>
		light_enable = 1;
	}
	else {
		light_enable = 0;
    1130:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <light_enable>
	}
	if (flags & TEMP) {
    1134:	81 ff       	sbrs	r24, 1
    1136:	91 c1       	rjmp	.+802    	; 0x145a <process_message+0xa30>
		temp_enable = 1;
    1138:	91 e0       	ldi	r25, 0x01	; 1
    113a:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <temp_enable>
	}
	else {
		temp_enable = 0;
	}
	if (flags & VIBE) {
    113e:	82 ff       	sbrs	r24, 2
    1140:	90 c1       	rjmp	.+800    	; 0x1462 <process_message+0xa38>
		vibe_enable = 1;
    1142:	91 e0       	ldi	r25, 0x01	; 1
    1144:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <vibe_enable>
	}
	else{
		vibe_enable = 0;
	}
	if (flags & CASE) {
    1148:	83 fd       	sbrc	r24, 3
    114a:	bc c1       	rjmp	.+888    	; 0x14c4 <process_message+0xa9a>
		case_enable = 1;
		
	}
	else{
		case_enable = 0;
    114c:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <case_enable>
		EIMSK = 0x00;		/*dis-able INT0 */
    1150:	1d ba       	out	0x1d, r1	; 29
		else {
			//uint8_t flags = eeprom_read_byte((uint8_t *)TAMP_FLAGS);
			flags |= rcv_char;
			send(0x14);
			init_tamper_values(flags, 0);
			tamper_detected = 0;
    1152:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <tamper_detected>
			AVR_LED_PORT &= ~_BV(AVR_LED_GREEN_BIT);
    1156:	11 98       	cbi	0x02, 1	; 2
}

static inline void
mkm_release()
{
  MKM_CONTROL_AVR_PORT |= _BV(MKM_CONTROL_AVR_BIT);
    1158:	16 9a       	sbi	0x02, 6	; 2
  MKM_CONTROL_FPGA_PORT &= ~_BV(MKM_CONTROL_FPGA_BIT);
    115a:	17 98       	cbi	0x02, 7	; 2
    115c:	84 cc       	rjmp	.-1784   	; 0xa66 <process_message+0x3c>
		}
	}
	if (rcv_char == ENA_TAMP) {
		rcv_valid = 0;
		//fix for 16 bit word
		while (!rcv_valid & !rcv_error_stop){ }
    115e:	99 23       	and	r25, r25
    1160:	09 f4       	brne	.+2      	; 0x1164 <process_message+0x73a>
    1162:	b4 cf       	rjmp	.-152    	; 0x10cc <process_message+0x6a2>
    1164:	ba cf       	rjmp	.-140    	; 0x10da <process_message+0x6b0>
			temp_hi_thresh = rcv_char;
			//eeprom_write_word((uint16_t *)TEMP_PRE_LO, temp_lo_thresh);
		}
	}
	if (rcv_char == SET_VIBE) {
		volatile uint8_t vibe_temp_lo = 0;
    1166:	1a 82       	std	Y+2, r1	; 0x02
		volatile uint8_t vibe_temp_hi = 0;
    1168:	19 82       	std	Y+1, r1	; 0x01
		rcv_valid = 0;
    116a:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rcv_valid>
		vibe_status = 1;
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <vibe_status>
		while (!rcv_valid & !rcv_error_stop){ }
    1174:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <rcv_valid>
    1178:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <rcv_error_stop>
    117c:	88 23       	and	r24, r24
    117e:	09 f4       	brne	.+2      	; 0x1182 <process_message+0x758>
    1180:	59 c0       	rjmp	.+178    	; 0x1234 <process_message+0x80a>
		
		vibe_temp_lo = rcv_char;
    1182:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <rcv_char>
    1186:	8a 83       	std	Y+2, r24	; 0x02
		rcv_valid = 0;
    1188:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rcv_valid>
		if (rcv_error_stop ==1) {
    118c:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <rcv_error_stop>
    1190:	81 30       	cpi	r24, 0x01	; 1
    1192:	09 f4       	brne	.+2      	; 0x1196 <process_message+0x76c>
    1194:	0d c2       	rjmp	.+1050   	; 0x15b0 <process_message+0xb86>
			rcv_error_stop = 0;
			vibe_status = 0;
			send(0x15);
		}
		else {
			vibe_temp_lo = rcv_char;
    1196:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <rcv_char>
    119a:	8a 83       	std	Y+2, r24	; 0x02
		}
		
		while (!rcv_valid & !rcv_error_stop){ }
    119c:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <rcv_valid>
    11a0:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <rcv_error_stop>
    11a4:	88 23       	and	r24, r24
    11a6:	09 f4       	brne	.+2      	; 0x11aa <process_message+0x780>
    11a8:	49 c0       	rjmp	.+146    	; 0x123c <process_message+0x812>
		rcv_valid = 0;
    11aa:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rcv_valid>
		if (rcv_error_stop) {
    11ae:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <rcv_error_stop>
    11b2:	81 11       	cpse	r24, r1
    11b4:	4d c0       	rjmp	.+154    	; 0x1250 <process_message+0x826>
			vibe_status = 0;
			send(0x15);
		}
		else{
			vibe_temp_hi = rcv_char;
    11b6:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <rcv_char>
    11ba:	89 83       	std	Y+1, r24	; 0x01
		}
		if (vibe_status){
    11bc:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <vibe_status>
    11c0:	88 23       	and	r24, r24
    11c2:	09 f4       	brne	.+2      	; 0x11c6 <process_message+0x79c>
    11c4:	4b cc       	rjmp	.-1898   	; 0xa5c <process_message+0x32>
			vibe_lo_thresh = vibe_temp_lo;
    11c6:	8a 81       	ldd	r24, Y+2	; 0x02
    11c8:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <vibe_lo_thresh>
			vibe_hi_thresh = vibe_temp_hi;
    11cc:	89 81       	ldd	r24, Y+1	; 0x01
    11ce:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <vibe_hi_thresh>
			//eeprom_write_byte((uint8_t *)VIBE_PRE_HI, vibe_hi_thresh);
			//eeprom_write_byte((uint8_t *)VIBE_PRE_LO, vibe_lo_thresh);
			vibe_status = 0;
    11d2:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <vibe_status>
	}
	spi_disable = 0;
}

void send(uint8_t tx){
	tx_char = tx;
    11d6:	84 e1       	ldi	r24, 0x14	; 20
    11d8:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <tx_char>
	tx_bit_count = 0;
    11dc:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <tx_bit_count>
	start_bit = 1;
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <start_bit>
	sending = 1;
    11e6:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <sending>
	TCNT1 = 0x00;			//reset counter to avoid glitch on next rcv char.
    11ea:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
    11ee:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	spi_disable = 1;
    11f2:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <spi_disable>
	TIMSK1 |= (1<<OCIE1A);
    11f6:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
    11fa:	82 60       	ori	r24, 0x02	; 2
    11fc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	while(sending);
    1200:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <sending>
    1204:	81 11       	cpse	r24, r1
    1206:	fc cf       	rjmp	.-8      	; 0x1200 <process_message+0x7d6>
			//eeprom_write_byte((uint8_t *)VIBE_PRE_HI, vibe_hi_thresh);
			//eeprom_write_byte((uint8_t *)VIBE_PRE_LO, vibe_lo_thresh);
			vibe_status = 0;
			
			send(0x14);
			spi_disable = 0;
    1208:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <spi_disable>
			vibe_thresh = (uint16_t)vibe_hi_thresh<<8 | (uint16_t)vibe_lo_thresh;
    120c:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <vibe_hi_thresh>
    1210:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <vibe_lo_thresh>
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	92 2b       	or	r25, r18
    1218:	90 93 5e 01 	sts	0x015E, r25	; 0x80015e <vibe_thresh+0x1>
    121c:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <vibe_thresh>
			 UCSRC = (1<<UMSEL1)|(1<<UMSEL0);  //change SPI clock phase/polarity first!
    1220:	80 ec       	ldi	r24, 0xC0	; 192
    1222:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__EEPROM_REGION_LENGTH__+0x7f00c2>
			 UCSRC &= ~(1<<UCSZ0);				//before chip selects!!!!
    1226:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__EEPROM_REGION_LENGTH__+0x7f00c2>
    122a:	8d 7f       	andi	r24, 0xFD	; 253
    122c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__EEPROM_REGION_LENGTH__+0x7f00c2>
			adx_set_threshold();
    1230:	69 d8       	rcall	.-3886   	; 0x304 <adx_set_threshold>
    1232:	14 cc       	rjmp	.-2008   	; 0xa5c <process_message+0x32>
	if (rcv_char == SET_VIBE) {
		volatile uint8_t vibe_temp_lo = 0;
		volatile uint8_t vibe_temp_hi = 0;
		rcv_valid = 0;
		vibe_status = 1;
		while (!rcv_valid & !rcv_error_stop){ }
    1234:	99 23       	and	r25, r25
    1236:	09 f4       	brne	.+2      	; 0x123a <process_message+0x810>
    1238:	9d cf       	rjmp	.-198    	; 0x1174 <process_message+0x74a>
    123a:	a3 cf       	rjmp	.-186    	; 0x1182 <process_message+0x758>
		}
		else {
			vibe_temp_lo = rcv_char;
		}
		
		while (!rcv_valid & !rcv_error_stop){ }
    123c:	99 23       	and	r25, r25
    123e:	09 f4       	brne	.+2      	; 0x1242 <process_message+0x818>
    1240:	ad cf       	rjmp	.-166    	; 0x119c <process_message+0x772>
		rcv_valid = 0;
    1242:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rcv_valid>
		if (rcv_error_stop) {
    1246:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <rcv_error_stop>
    124a:	88 23       	and	r24, r24
    124c:	09 f4       	brne	.+2      	; 0x1250 <process_message+0x826>
    124e:	b3 cf       	rjmp	.-154    	; 0x11b6 <process_message+0x78c>
			vibe_status = 0;
    1250:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <vibe_status>
	}
	spi_disable = 0;
}

void send(uint8_t tx){
	tx_char = tx;
    1254:	85 e1       	ldi	r24, 0x15	; 21
    1256:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <tx_char>
	tx_bit_count = 0;
    125a:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <tx_bit_count>
	start_bit = 1;
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <start_bit>
	sending = 1;
    1264:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <sending>
	TCNT1 = 0x00;			//reset counter to avoid glitch on next rcv char.
    1268:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
    126c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	spi_disable = 1;
    1270:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <spi_disable>
	TIMSK1 |= (1<<OCIE1A);
    1274:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
    1278:	82 60       	ori	r24, 0x02	; 2
    127a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	while(sending);
    127e:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <sending>
    1282:	81 11       	cpse	r24, r1
    1284:	fc cf       	rjmp	.-8      	; 0x127e <process_message+0x854>
    1286:	9a cf       	rjmp	.-204    	; 0x11bc <process_message+0x792>
			temp_hi_thresh = rcv_char;
			//eeprom_write_word((uint16_t *)TEMP_PRE_HI, temp_hi_thresh);
		}
	}
	if (rcv_char == SET_TEMP_LO) {
		rcv_valid = 0;
    1288:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rcv_valid>
		//fix for 16 bit word
		while (!rcv_valid & !rcv_error_stop){ }
    128c:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <rcv_valid>
    1290:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <rcv_error_stop>
    1294:	88 23       	and	r24, r24
    1296:	41 f1       	breq	.+80     	; 0x12e8 <process_message+0x8be>
		rcv_valid = 0;
    1298:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rcv_valid>
		if (rcv_error_stop ==1) {
    129c:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <rcv_error_stop>
    12a0:	81 30       	cpi	r24, 0x01	; 1
    12a2:	09 f4       	brne	.+2      	; 0x12a6 <process_message+0x87c>
    12a4:	68 c1       	rjmp	.+720    	; 0x1576 <process_message+0xb4c>
	}
	spi_disable = 0;
}

void send(uint8_t tx){
	tx_char = tx;
    12a6:	84 e1       	ldi	r24, 0x14	; 20
    12a8:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <tx_char>
	tx_bit_count = 0;
    12ac:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <tx_bit_count>
	start_bit = 1;
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <start_bit>
	sending = 1;
    12b6:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <sending>
	TCNT1 = 0x00;			//reset counter to avoid glitch on next rcv char.
    12ba:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
    12be:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	spi_disable = 1;
    12c2:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <spi_disable>
	TIMSK1 |= (1<<OCIE1A);
    12c6:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
    12ca:	82 60       	ori	r24, 0x02	; 2
    12cc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	while(sending);
    12d0:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <sending>
    12d4:	81 11       	cpse	r24, r1
    12d6:	fc cf       	rjmp	.-8      	; 0x12d0 <process_message+0x8a6>
			light_status = 0;
			send(0x15);
		}
		else {
			send(0x14);
			temp_hi_thresh = rcv_char;
    12d8:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <rcv_char>
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <temp_hi_thresh+0x1>
    12e2:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <temp_hi_thresh>
    12e6:	b5 cb       	rjmp	.-2198   	; 0xa52 <process_message+0x28>
		}
	}
	if (rcv_char == SET_TEMP_LO) {
		rcv_valid = 0;
		//fix for 16 bit word
		while (!rcv_valid & !rcv_error_stop){ }
    12e8:	99 23       	and	r25, r25
    12ea:	81 f2       	breq	.-96     	; 0x128c <process_message+0x862>
    12ec:	d5 cf       	rjmp	.-86     	; 0x1298 <process_message+0x86e>
			light_status = 0;
			send(0x14);
		}
	}
	if (rcv_char == SET_TEMP_HI) {
		rcv_valid = 0;
    12ee:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rcv_valid>
		//fix for 16 bit word
		while (!rcv_valid & !rcv_error_stop){ }
    12f2:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <rcv_valid>
    12f6:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <rcv_error_stop>
    12fa:	88 23       	and	r24, r24
    12fc:	41 f1       	breq	.+80     	; 0x134e <process_message+0x924>
		rcv_valid = 0;
    12fe:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rcv_valid>
		if (rcv_error_stop ==1) {
    1302:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <rcv_error_stop>
    1306:	81 30       	cpi	r24, 0x01	; 1
    1308:	09 f4       	brne	.+2      	; 0x130c <process_message+0x8e2>
    130a:	8c c1       	rjmp	.+792    	; 0x1624 <process_message+0xbfa>
	}
	spi_disable = 0;
}

void send(uint8_t tx){
	tx_char = tx;
    130c:	84 e1       	ldi	r24, 0x14	; 20
    130e:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <tx_char>
	tx_bit_count = 0;
    1312:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <tx_bit_count>
	start_bit = 1;
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <start_bit>
	sending = 1;
    131c:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <sending>
	TCNT1 = 0x00;			//reset counter to avoid glitch on next rcv char.
    1320:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
    1324:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	spi_disable = 1;
    1328:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <spi_disable>
	TIMSK1 |= (1<<OCIE1A);
    132c:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
    1330:	82 60       	ori	r24, 0x02	; 2
    1332:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	while(sending);
    1336:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <sending>
    133a:	81 11       	cpse	r24, r1
    133c:	fc cf       	rjmp	.-8      	; 0x1336 <process_message+0x90c>
			light_status = 0;
			send(0x15);
		}
		else {
			send(0x14);
			temp_hi_thresh = rcv_char;
    133e:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <rcv_char>
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <temp_hi_thresh+0x1>
    1348:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <temp_hi_thresh>
    134c:	7d cb       	rjmp	.-2310   	; 0xa48 <process_message+0x1e>
		}
	}
	if (rcv_char == SET_TEMP_HI) {
		rcv_valid = 0;
		//fix for 16 bit word
		while (!rcv_valid & !rcv_error_stop){ }
    134e:	99 23       	and	r25, r25
    1350:	81 f2       	breq	.-96     	; 0x12f2 <process_message+0x8c8>
    1352:	d5 cf       	rjmp	.-86     	; 0x12fe <process_message+0x8d4>
}

void process_message(){
	if (rcv_char == SET_LIGHT) {
		int light_temp = 0;
		rcv_valid = 0;
    1354:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rcv_valid>
		light_status = 1;
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <light_status>
		while (!rcv_valid & !rcv_error_stop){ }
    135e:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <rcv_valid>
    1362:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <rcv_error_stop>
    1366:	88 23       	and	r24, r24
    1368:	09 f4       	brne	.+2      	; 0x136c <process_message+0x942>
    136a:	42 c0       	rjmp	.+132    	; 0x13f0 <process_message+0x9c6>
			
		light_temp = (uint16_t)rcv_char <<8;
    136c:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <rcv_char>
		rcv_valid = 0;
    1370:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rcv_valid>
		if (rcv_error_stop ==1) {
    1374:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <rcv_error_stop>
    1378:	81 30       	cpi	r24, 0x01	; 1
    137a:	09 f4       	brne	.+2      	; 0x137e <process_message+0x954>
    137c:	36 c1       	rjmp	.+620    	; 0x15ea <process_message+0xbc0>
			rcv_error_stop = 0;
			light_status = 0;
			send(0x15);
		}
		else {
			light_temp = (uint16_t)rcv_char <<8;
    137e:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <rcv_char>
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	32 2f       	mov	r19, r18
    1386:	22 27       	eor	r18, r18
		}
		
		while (!rcv_valid & !rcv_error_stop){ }
    1388:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <rcv_valid>
    138c:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <rcv_error_stop>
    1390:	88 23       	and	r24, r24
    1392:	91 f1       	breq	.+100    	; 0x13f8 <process_message+0x9ce>
		rcv_valid = 0;
    1394:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rcv_valid>
		if (rcv_error_stop) {
    1398:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <rcv_error_stop>
    139c:	81 11       	cpse	r24, r1
    139e:	34 c0       	rjmp	.+104    	; 0x1408 <process_message+0x9de>
			light_status = 0;
			send(0x15);
		} 
		else{
			light_temp |= (uint16_t)rcv_char;
    13a0:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <rcv_char>
    13a4:	28 2b       	or	r18, r24
		}
		if (light_status){
    13a6:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <light_status>
    13aa:	88 23       	and	r24, r24
    13ac:	09 f4       	brne	.+2      	; 0x13b0 <process_message+0x986>
    13ae:	47 cb       	rjmp	.-2418   	; 0xa3e <process_message+0x14>
			light_thresh = light_temp;
    13b0:	30 93 4c 01 	sts	0x014C, r19	; 0x80014c <light_thresh+0x1>
    13b4:	20 93 4b 01 	sts	0x014B, r18	; 0x80014b <light_thresh>
			//eeprom_write_word((uint16_t *)LIGHT_PRE, light_thresh);
			light_status = 0;
    13b8:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <light_status>
	}
	spi_disable = 0;
}

void send(uint8_t tx){
	tx_char = tx;
    13bc:	84 e1       	ldi	r24, 0x14	; 20
    13be:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <tx_char>
	tx_bit_count = 0;
    13c2:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <tx_bit_count>
	start_bit = 1;
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <start_bit>
	sending = 1;
    13cc:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <sending>
	TCNT1 = 0x00;			//reset counter to avoid glitch on next rcv char.
    13d0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
    13d4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	spi_disable = 1;
    13d8:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <spi_disable>
	TIMSK1 |= (1<<OCIE1A);
    13dc:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
    13e0:	82 60       	ori	r24, 0x02	; 2
    13e2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	while(sending);
    13e6:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <sending>
    13ea:	81 11       	cpse	r24, r1
    13ec:	fc cf       	rjmp	.-8      	; 0x13e6 <process_message+0x9bc>
    13ee:	27 cb       	rjmp	.-2482   	; 0xa3e <process_message+0x14>
void process_message(){
	if (rcv_char == SET_LIGHT) {
		int light_temp = 0;
		rcv_valid = 0;
		light_status = 1;
		while (!rcv_valid & !rcv_error_stop){ }
    13f0:	99 23       	and	r25, r25
    13f2:	09 f4       	brne	.+2      	; 0x13f6 <process_message+0x9cc>
    13f4:	b4 cf       	rjmp	.-152    	; 0x135e <process_message+0x934>
    13f6:	ba cf       	rjmp	.-140    	; 0x136c <process_message+0x942>
		}
		else {
			light_temp = (uint16_t)rcv_char <<8;
		}
		
		while (!rcv_valid & !rcv_error_stop){ }
    13f8:	99 23       	and	r25, r25
    13fa:	31 f2       	breq	.-116    	; 0x1388 <process_message+0x95e>
		rcv_valid = 0;
    13fc:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rcv_valid>
		if (rcv_error_stop) {
    1400:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <rcv_error_stop>
    1404:	88 23       	and	r24, r24
    1406:	61 f2       	breq	.-104    	; 0x13a0 <process_message+0x976>
			light_status = 0;
    1408:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <light_status>
	}
	spi_disable = 0;
}

void send(uint8_t tx){
	tx_char = tx;
    140c:	85 e1       	ldi	r24, 0x15	; 21
    140e:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <tx_char>
	tx_bit_count = 0;
    1412:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <tx_bit_count>
	start_bit = 1;
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <start_bit>
	sending = 1;
    141c:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <sending>
	TCNT1 = 0x00;			//reset counter to avoid glitch on next rcv char.
    1420:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
    1424:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	spi_disable = 1;
    1428:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <spi_disable>
	TIMSK1 |= (1<<OCIE1A);
    142c:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
    1430:	82 60       	ori	r24, 0x02	; 2
    1432:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	while(sending);
    1436:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <sending>
    143a:	81 11       	cpse	r24, r1
    143c:	fc cf       	rjmp	.-8      	; 0x1436 <process_message+0xa0c>
    143e:	b3 cf       	rjmp	.-154    	; 0x13a6 <process_message+0x97c>
init_int0()
{
	//this has to be done after the SPI expander has been set up for the proper levels
	//
	/*lets use the INT0 pin as triggered form the SPI expander low level */
	EICRA = 0x00;   /* insure that we are interrupting on low-level */
    1440:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__EEPROM_REGION_LENGTH__+0x7f0069>
	EIMSK = 0x01;		/*enable INT0 */
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	8d bb       	out	0x1d, r24	; 29
	sei();
    1448:	78 94       	sei
    144a:	db cb       	rjmp	.-2122   	; 0xc02 <process_message+0x1d8>
			send(0x15);
		}
		else {
			//BATT_ON signal needs to be asserted for backup to work
			if(rcv_char){
				PORTC |= _BV(PORTC6);
    144c:	56 9a       	sbi	0x0a, 6	; 10
    144e:	ce cd       	rjmp	.-1124   	; 0xfec <process_message+0x5c2>
	//}
	//else {
		flags = flags_set;
	//}
	if (flags & LIGHT) {
		light_enable = 1;
    1450:	91 e0       	ldi	r25, 0x01	; 1
    1452:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <light_enable>
	}
	else {
		light_enable = 0;
	}
	if (flags & TEMP) {
    1456:	81 fd       	sbrc	r24, 1
    1458:	6f ce       	rjmp	.-802    	; 0x1138 <process_message+0x70e>
		temp_enable = 1;
	}
	else {
		temp_enable = 0;
    145a:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <temp_enable>
	}
	if (flags & VIBE) {
    145e:	82 fd       	sbrc	r24, 2
    1460:	70 ce       	rjmp	.-800    	; 0x1142 <process_message+0x718>
		vibe_enable = 1;
	}
	else{
		vibe_enable = 0;
    1462:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <vibe_enable>
    1466:	70 ce       	rjmp	.-800    	; 0x1148 <process_message+0x71e>
	//}
	if (flags & LIGHT) {
		light_enable = 1;
	}
	else {
		light_enable = 0;
    1468:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <light_enable>
	}
	if (flags & TEMP) {
    146c:	81 fd       	sbrc	r24, 1
    146e:	15 ce       	rjmp	.-982    	; 0x109a <process_message+0x670>
		temp_enable = 1;
	}
	else {
		temp_enable = 0;
    1470:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <temp_enable>
	}
	if (flags & VIBE) {
    1474:	82 fd       	sbrc	r24, 2
    1476:	16 ce       	rjmp	.-980    	; 0x10a4 <process_message+0x67a>
		vibe_enable = 1;
	}
	else{
		vibe_enable = 0;
    1478:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <vibe_enable>
    147c:	16 ce       	rjmp	.-980    	; 0x10aa <process_message+0x680>
	}
	spi_disable = 0;
}

void send(uint8_t tx){
	tx_char = tx;
    147e:	95 e1       	ldi	r25, 0x15	; 21
    1480:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <tx_char>
	tx_bit_count = 0;
    1484:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <tx_bit_count>
	start_bit = 1;
    1488:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <start_bit>
	sending = 1;
    148c:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <sending>
	TCNT1 = 0x00;			//reset counter to avoid glitch on next rcv char.
    1490:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
    1494:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	spi_disable = 1;
    1498:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <spi_disable>
	TIMSK1 |= (1<<OCIE1A);
    149c:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
    14a0:	82 60       	ori	r24, 0x02	; 2
    14a2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	while(sending);
    14a6:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <sending>
    14aa:	81 11       	cpse	r24, r1
    14ac:	fc cf       	rjmp	.-8      	; 0x14a6 <process_message+0xa7c>
		}
		else {
			send(0x14);
		}
	}
	spi_disable = 0;
    14ae:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <spi_disable>
}
    14b2:	0f 90       	pop	r0
    14b4:	0f 90       	pop	r0
    14b6:	df 91       	pop	r29
    14b8:	cf 91       	pop	r28
    14ba:	08 95       	ret
	}
	else{
		vibe_enable = 0;
	}
	if (flags & CASE) {
		case_enable = 1;
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <case_enable>
    14c2:	f8 cd       	rjmp	.-1040   	; 0x10b4 <process_message+0x68a>
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <case_enable>
    14ca:	43 ce       	rjmp	.-890    	; 0x1152 <process_message+0x728>
		rcv_valid = 0;
		//fix for 16 bit word
		while (!rcv_valid & !rcv_error_stop){ }
		rcv_valid = 0;
		if (rcv_error_stop ==1) {
			rcv_error_stop = 0;
    14cc:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <rcv_error_stop>
			light_status = 0;
    14d0:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <light_status>
	}
	spi_disable = 0;
}

void send(uint8_t tx){
	tx_char = tx;
    14d4:	95 e1       	ldi	r25, 0x15	; 21
    14d6:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <tx_char>
	tx_bit_count = 0;
    14da:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <tx_bit_count>
	start_bit = 1;
    14de:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <start_bit>
	sending = 1;
    14e2:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <sending>
	TCNT1 = 0x00;			//reset counter to avoid glitch on next rcv char.
    14e6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
    14ea:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	spi_disable = 1;
    14ee:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <spi_disable>
	TIMSK1 |= (1<<OCIE1A);
    14f2:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
    14f6:	82 60       	ori	r24, 0x02	; 2
    14f8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	while(sending);
    14fc:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <sending>
    1500:	81 11       	cpse	r24, r1
    1502:	fc cf       	rjmp	.-8      	; 0x14fc <process_message+0xad2>
    1504:	b0 ca       	rjmp	.-2720   	; 0xa66 <process_message+0x3c>
		rcv_valid = 0;
		//fix for 16 bit word
		while (!rcv_valid & !rcv_error_stop){ }
		rcv_valid = 0;
		if (rcv_error_stop ==1) {
			rcv_error_stop = 0;
    1506:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <rcv_error_stop>
	}
	spi_disable = 0;
}

void send(uint8_t tx){
	tx_char = tx;
    150a:	95 e1       	ldi	r25, 0x15	; 21
    150c:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <tx_char>
	tx_bit_count = 0;
    1510:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <tx_bit_count>
	start_bit = 1;
    1514:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <start_bit>
	sending = 1;
    1518:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <sending>
	TCNT1 = 0x00;			//reset counter to avoid glitch on next rcv char.
    151c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
    1520:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	spi_disable = 1;
    1524:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <spi_disable>
	TIMSK1 |= (1<<OCIE1A);
    1528:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
    152c:	82 60       	ori	r24, 0x02	; 2
    152e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	while(sending);
    1532:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <sending>
    1536:	81 11       	cpse	r24, r1
    1538:	fc cf       	rjmp	.-8      	; 0x1532 <process_message+0xb08>
    153a:	9f ca       	rjmp	.-2754   	; 0xa7a <process_message+0x50>
		rcv_valid = 0;
		//fix for 16 bit word
		while (!rcv_valid & !rcv_error_stop){ }
		rcv_valid = 0;
		if (rcv_error_stop ==1) {
			rcv_error_stop = 0;
    153c:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <rcv_error_stop>
			light_status = 0;
    1540:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <light_status>
	}
	spi_disable = 0;
}

void send(uint8_t tx){
	tx_char = tx;
    1544:	95 e1       	ldi	r25, 0x15	; 21
    1546:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <tx_char>
	tx_bit_count = 0;
    154a:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <tx_bit_count>
	start_bit = 1;
    154e:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <start_bit>
	sending = 1;
    1552:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <sending>
	TCNT1 = 0x00;			//reset counter to avoid glitch on next rcv char.
    1556:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
    155a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	spi_disable = 1;
    155e:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <spi_disable>
	TIMSK1 |= (1<<OCIE1A);
    1562:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
    1566:	82 60       	ori	r24, 0x02	; 2
    1568:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	while(sending);
    156c:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <sending>
    1570:	81 11       	cpse	r24, r1
    1572:	fc cf       	rjmp	.-8      	; 0x156c <process_message+0xb42>
    1574:	7d ca       	rjmp	.-2822   	; 0xa70 <process_message+0x46>
		rcv_valid = 0;
		//fix for 16 bit word
		while (!rcv_valid & !rcv_error_stop){ }
		rcv_valid = 0;
		if (rcv_error_stop ==1) {
			rcv_error_stop = 0;
    1576:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <rcv_error_stop>
			light_status = 0;
    157a:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <light_status>
	}
	spi_disable = 0;
}

void send(uint8_t tx){
	tx_char = tx;
    157e:	95 e1       	ldi	r25, 0x15	; 21
    1580:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <tx_char>
	tx_bit_count = 0;
    1584:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <tx_bit_count>
	start_bit = 1;
    1588:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <start_bit>
	sending = 1;
    158c:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <sending>
	TCNT1 = 0x00;			//reset counter to avoid glitch on next rcv char.
    1590:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
    1594:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	spi_disable = 1;
    1598:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <spi_disable>
	TIMSK1 |= (1<<OCIE1A);
    159c:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
    15a0:	82 60       	ori	r24, 0x02	; 2
    15a2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	while(sending);
    15a6:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <sending>
    15aa:	81 11       	cpse	r24, r1
    15ac:	fc cf       	rjmp	.-8      	; 0x15a6 <process_message+0xb7c>
    15ae:	51 ca       	rjmp	.-2910   	; 0xa52 <process_message+0x28>
		while (!rcv_valid & !rcv_error_stop){ }
		
		vibe_temp_lo = rcv_char;
		rcv_valid = 0;
		if (rcv_error_stop ==1) {
			rcv_error_stop = 0;
    15b0:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <rcv_error_stop>
			vibe_status = 0;
    15b4:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <vibe_status>
	}
	spi_disable = 0;
}

void send(uint8_t tx){
	tx_char = tx;
    15b8:	95 e1       	ldi	r25, 0x15	; 21
    15ba:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <tx_char>
	tx_bit_count = 0;
    15be:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <tx_bit_count>
	start_bit = 1;
    15c2:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <start_bit>
	sending = 1;
    15c6:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <sending>
	TCNT1 = 0x00;			//reset counter to avoid glitch on next rcv char.
    15ca:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
    15ce:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	spi_disable = 1;
    15d2:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <spi_disable>
	TIMSK1 |= (1<<OCIE1A);
    15d6:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
    15da:	82 60       	ori	r24, 0x02	; 2
    15dc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	while(sending);
    15e0:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <sending>
    15e4:	81 11       	cpse	r24, r1
    15e6:	fc cf       	rjmp	.-8      	; 0x15e0 <process_message+0xbb6>
    15e8:	d9 cd       	rjmp	.-1102   	; 0x119c <process_message+0x772>
		while (!rcv_valid & !rcv_error_stop){ }
			
		light_temp = (uint16_t)rcv_char <<8;
		rcv_valid = 0;
		if (rcv_error_stop ==1) {
			rcv_error_stop = 0;
    15ea:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <rcv_error_stop>
			light_status = 0;
    15ee:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <light_status>
	}
	spi_disable = 0;
}

void send(uint8_t tx){
	tx_char = tx;
    15f2:	95 e1       	ldi	r25, 0x15	; 21
    15f4:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <tx_char>
	tx_bit_count = 0;
    15f8:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <tx_bit_count>
	start_bit = 1;
    15fc:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <start_bit>
	sending = 1;
    1600:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <sending>
	TCNT1 = 0x00;			//reset counter to avoid glitch on next rcv char.
    1604:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
    1608:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	spi_disable = 1;
    160c:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <spi_disable>
	TIMSK1 |= (1<<OCIE1A);
    1610:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
    1614:	82 60       	ori	r24, 0x02	; 2
    1616:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	while(sending);
    161a:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <sending>
    161e:	81 11       	cpse	r24, r1
    1620:	fc cf       	rjmp	.-8      	; 0x161a <process_message+0xbf0>
    1622:	af ce       	rjmp	.-674    	; 0x1382 <process_message+0x958>
		rcv_valid = 0;
		//fix for 16 bit word
		while (!rcv_valid & !rcv_error_stop){ }
		rcv_valid = 0;
		if (rcv_error_stop ==1) {
			rcv_error_stop = 0;
    1624:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <rcv_error_stop>
			light_status = 0;
    1628:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <light_status>
	}
	spi_disable = 0;
}

void send(uint8_t tx){
	tx_char = tx;
    162c:	95 e1       	ldi	r25, 0x15	; 21
    162e:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <tx_char>
	tx_bit_count = 0;
    1632:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <tx_bit_count>
	start_bit = 1;
    1636:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <start_bit>
	sending = 1;
    163a:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <sending>
	TCNT1 = 0x00;			//reset counter to avoid glitch on next rcv char.
    163e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
    1642:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	spi_disable = 1;
    1646:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <spi_disable>
	TIMSK1 |= (1<<OCIE1A);
    164a:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
    164e:	82 60       	ori	r24, 0x02	; 2
    1650:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	while(sending);
    1654:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <sending>
    1658:	81 11       	cpse	r24, r1
    165a:	fc cf       	rjmp	.-8      	; 0x1654 <process_message+0xc2a>
    165c:	f5 c9       	rjmp	.-3094   	; 0xa48 <process_message+0x1e>

0000165e <main>:
  //sleep_cpu();			  /*MAD also redundant? ok, enough redundnacy already*/
 //SMCR &= ~0x1;               /* Disable sleep. Nah, let's not and say we did. */
}
int
main()
{
    165e:	cf 93       	push	r28
    1660:	df 93       	push	r29
    1662:	1f 92       	push	r1
    1664:	cd b7       	in	r28, 0x3d	; 61
    1666:	de b7       	in	r29, 0x3e	; 62
}

static inline void
mkm_grab()
{
  MKM_CONTROL_FPGA_PORT |= _BV(MKM_CONTROL_FPGA_BIT);
    1668:	17 9a       	sbi	0x02, 7	; 2
  MKM_CONTROL_AVR_PORT &= ~_BV(MKM_CONTROL_AVR_BIT);
    166a:	16 98       	cbi	0x02, 6	; 2
static inline void
init_ports()
{
  /* Configure all PORTA pins except the tamper detection pin as
     outputs. */
  DDRA = 0xff & ~_BV(AVR_PANIC_BIT);
    166c:	8f ee       	ldi	r24, 0xEF	; 239
    166e:	81 b9       	out	0x01, r24	; 1
  DDRB = 0xf7; //was fb
    1670:	87 ef       	ldi	r24, 0xF7	; 247
    1672:	85 b9       	out	0x05, r24	; 5

static void
init_interrupts()
{
  //PCICR |= _BV(PCIE0|PCIE2);    /* Enable pin change interrupt on PCMSK0 & PCMSK2*/
  PCICR = (1<<PCIE0)|(1<<PCIE1)|(1<<PCIE2);
    1674:	07 e0       	ldi	r16, 0x07	; 7
    1676:	00 93 68 00 	sts	0x0068, r16	; 0x800068 <__EEPROM_REGION_LENGTH__+0x7f0068>
  PCMSK0 |= _BV(PCINT4);        /* Set mask bit for PCINT4 (panic) */
    167a:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__EEPROM_REGION_LENGTH__+0x7f006b>
    167e:	80 61       	ori	r24, 0x10	; 16
    1680:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__EEPROM_REGION_LENGTH__+0x7f006b>
  /*setup PC6 as tamper disable */
  //PUEC = (1<<PUEC6);			/*enable internal pull-up to avoid false triggers */ 
  //PORTC |= (1<<PORTC6);
  //PCMSK2 |= _BV(PCINT22);
  /*setup PB2 as soft-UART RX*/
  PUEB = (1<<PUEB3);						/*enable internal pull-up to detect start bit */
    1684:	88 e0       	ldi	r24, 0x08	; 8
    1686:	87 b9       	out	0x07, r24	; 7
  //PUEB |= (1<<PUEB2);
  PCMSK1 |= _BV(PCINT11);
    1688:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__EEPROM_REGION_LENGTH__+0x7f006c>
    168c:	88 60       	ori	r24, 0x08	; 8
    168e:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__EEPROM_REGION_LENGTH__+0x7f006c>
 // PCMSK1 |= _BV(PCINT10);
  sei();
    1692:	78 94       	sei
  mkm_grab();
  init_ports();
  init_power_reduction();
  init_interrupts();
  	
  flags = 0xFF;
    1694:	8f ef       	ldi	r24, 0xFF	; 255
    1696:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <flags>
  configured = 0;
    169a:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <configured>
  tamper_detected = 0;
    169e:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <tamper_detected>
  volatile uint8_t ssp_status = 0;
    16a2:	19 82       	std	Y+1, r1	; 0x01
  sending = 0;
    16a4:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <sending>
  receiving = 0;
    16a8:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <receiving>
  tx_char = 0;
    16ac:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <tx_char>
  tx_bit_count = 0;
    16b0:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <tx_bit_count>
  light_fault = 0;
    16b4:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <light_fault>
  vibe_fault = 0;
    16b8:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <vibe_fault>
  ssp_fault = 0;
    16bc:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <ssp_fault>
  n25_fault = 0;
    16c0:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <n25_fault>
  unk_fault = 0;
    16c4:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <unk_fault>
  spi_disable = 0;
    16c8:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <spi_disable>
  light_retrieve = 0;
    16cc:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <light_retrieve>
  batt_on = 0;
    16d0:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <batt_on>
  batt_on_cnt = 0;
    16d4:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <batt_on_cnt>
  temp_flt_cnt = 0;
    16d8:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <temp_flt_cnt>
  light_flt_cnt = 0;
    16dc:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <light_flt_cnt>
  vibe_flt_cnt = 0;
    16e0:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <vibe_flt_cnt>
  ll_flt_cnt = 0;
    16e4:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <ll_flt_cnt>
  case_flt_cnt = 0;
    16e8:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <case_flt_cnt>
  PORTB |= _BV(PORTB3);   //set RX idle high
    16ec:	33 9a       	sbi	0x06, 3	; 6
  PORTB |= _BV(PORTB2);   //set TX idle high
    16ee:	32 9a       	sbi	0x06, 2	; 6
  wd_init = 0x01;
    16f0:	11 e0       	ldi	r17, 0x01	; 1
    16f2:	10 93 38 01 	sts	0x0138, r17	; 0x800138 <wd_init>
  ssp_out = WDOG_RS;
    16f6:	80 e1       	ldi	r24, 0x10	; 16
    16f8:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <ssp_out>
  
  TCNT0 = 0x00;
    16fc:	16 bc       	out	0x26, r1	; 38
  TCCR0A = (1<<COM0A1) | (1 << WGM01);             //CTC mode
    16fe:	82 e8       	ldi	r24, 0x82	; 130
    1700:	84 bd       	out	0x24, r24	; 36
  TCCR0B = (1 << CS00);              //div1
    1702:	15 bd       	out	0x25, r17	; 37
  OCR0A = 185;                       //spi timeout
    1704:	99 eb       	ldi	r25, 0xB9	; 185
    1706:	97 bd       	out	0x27, r25	; 39
 
    
   TCNT1 = 0x00;
    1708:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
    170c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
   TCCR1A = (1<<COM1A1) | (1 << WGM01);             //CTC mode
    1710:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__EEPROM_REGION_LENGTH__+0x7f0080>
   TCCR1B = (1 << CS00);              //div1
    1714:	10 93 81 00 	sts	0x0081, r17	; 0x800081 <__EEPROM_REGION_LENGTH__+0x7f0081>
   //OCR1A = 180;
   OCR1A = 171;						// 208us compare value for release 4800 baud was 180
    1718:	8b ea       	ldi	r24, 0xAB	; 171
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__EEPROM_REGION_LENGTH__+0x7f0089>
    1720:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__EEPROM_REGION_LENGTH__+0x7f0088>
   spi_usart_setup(1);
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	87 d7       	rcall	.+3854   	; 0x2638 <__TEXT_REGION_LENGTH__+0x638>
   vibe_lo_thresh = 0x20;
    172a:	80 e2       	ldi	r24, 0x20	; 32
    172c:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <vibe_lo_thresh>
   vibe_hi_thresh = 0x07;
    1730:	00 93 1c 01 	sts	0x011C, r16	; 0x80011c <vibe_hi_thresh>
  mlx_nop 
  //ensure that adx is also at low power mode

  adx_wr_reg(ADX_POWER_CTL, 0x00);
  adx_rd_reg(ADX_STATUS);*/
  AVR_LED_PORT |= _BV(AVR_LED_BLUE_BIT);
    1734:	10 9a       	sbi	0x02, 0	; 2
  ssp_boot();
    1736:	9f d7       	rcall	.+3902   	; 0x2676 <__TEXT_REGION_LENGTH__+0x676>
  ssp_read_byte();
    1738:	9b d8       	rcall	.-3786   	; 0x870 <ssp_read_byte>
  //setup directions for ssp pins
  ssp_setup();
    173a:	4f d8       	rcall	.-3938   	; 0x7da <ssp_setup>
  //cycle the TAMP_CLR to reset the relays and turn of LEDS
  //to save power. Keep WDOG signal in high state
  ssp_write(ssp_out|0x02);
    173c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <ssp_out>
    1740:	82 60       	ori	r24, 0x02	; 2
    1742:	9f d8       	rcall	.-3778   	; 0x882 <ssp_write>
  ssp_write(ssp_out);
    1744:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <ssp_out>
    1748:	9c d8       	rcall	.-3784   	; 0x882 <ssp_write>
  //setup the tamper monitoring input
  ssp_int_config();
    174a:	58 d8       	rcall	.-3920   	; 0x7fc <ssp_int_config>
 uint8_t check =  ssp_read_byte();
    174c:	91 d8       	rcall	.-3806   	; 0x870 <ssp_read_byte>
  //init_int0();
 
  mlx_reset();
    174e:	1d d7       	rcall	.+3642   	; 0x258a <__TEXT_REGION_LENGTH__+0x58a>
  mlx_write_reg(13, 0x84); //enable temperature and Channel C
    1750:	64 e8       	ldi	r22, 0x84	; 132
    1752:	70 e0       	ldi	r23, 0x00	; 0
    1754:	8d e0       	ldi	r24, 0x0D	; 13
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	47 d6       	rcall	.+3214   	; 0x23e8 <__TEXT_REGION_LENGTH__+0x3e8>
  mlx_get_calib();
    175a:	fc d6       	rcall	.+3576   	; 0x2554 <__TEXT_REGION_LENGTH__+0x554>
  mlx_start_meas();
  mlx_get_meas();
  mlx_start_meas();
  mlx_get_meas(); */
  // do not need to configure these for tamper switch  
  UCSRC = (1<<UMSEL1)|(1<<UMSEL0);  //change polarity first! 
    175c:	80 ec       	ldi	r24, 0xC0	; 192
    175e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__EEPROM_REGION_LENGTH__+0x7f00c2>
  UCSRC &= ~(1<<UCSZ0);				//before chip selects!!!!
    1762:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__EEPROM_REGION_LENGTH__+0x7f00c2>
    1766:	8d 7f       	andi	r24, 0xFD	; 253
    1768:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__EEPROM_REGION_LENGTH__+0x7f00c2>
   
  adx_read_id();  
    176c:	7a d4       	rcall	.+2292   	; 0x2062 <__TEXT_REGION_LENGTH__+0x62>
  adx_soft_r();
    176e:	85 d4       	rcall	.+2314   	; 0x207a <__TEXT_REGION_LENGTH__+0x7a>
  adx_setup();
    1770:	90 d4       	rcall	.+2336   	; 0x2092 <__TEXT_REGION_LENGTH__+0x92>
 
  adx_temp();
    1772:	0b d5       	rcall	.+2582   	; 0x218a <__TEXT_REGION_LENGTH__+0x18a>
}

static inline void
mkm_release()
{
  MKM_CONTROL_AVR_PORT |= _BV(MKM_CONTROL_AVR_BIT);
    1774:	16 9a       	sbi	0x02, 6	; 2
  MKM_CONTROL_FPGA_PORT &= ~_BV(MKM_CONTROL_FPGA_BIT);
    1776:	17 98       	cbi	0x02, 7	; 2
  //AVR_LED_PORT |= 0x0f;
  //for (int i = 0; i < 16000; i++);
  //AVR_LED_PORT &= ~0x0f;
  // go to sleep, interrupt will wake us
  //sleep();
  temperature = 80;
    1778:	80 e5       	ldi	r24, 0x50	; 80
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	a0 e0       	ldi	r26, 0x00	; 0
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <temperature>
    1784:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <temperature+0x1>
    1788:	a0 93 2a 01 	sts	0x012A, r26	; 0x80012a <temperature+0x2>
    178c:	b0 93 2b 01 	sts	0x012B, r27	; 0x80012b <temperature+0x3>
  light = 0x2000;
    1790:	80 e0       	ldi	r24, 0x00	; 0
    1792:	90 e2       	ldi	r25, 0x20	; 32
    1794:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <light+0x1>
    1798:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <light>
  light_thresh = 0x4000;
    179c:	80 e0       	ldi	r24, 0x00	; 0
    179e:	90 e4       	ldi	r25, 0x40	; 64
    17a0:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <light_thresh+0x1>
    17a4:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <light_thresh>
  //init_int0();
  rcv_valid = 0;
    17a8:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rcv_valid>
  sei();
    17ac:	78 94       	sei
	}
	spi_disable = 0;
}

void send(uint8_t tx){
	tx_char = tx;
    17ae:	85 e1       	ldi	r24, 0x15	; 21
    17b0:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <tx_char>
	tx_bit_count = 0;
    17b4:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <tx_bit_count>
	start_bit = 1;
    17b8:	10 93 27 01 	sts	0x0127, r17	; 0x800127 <start_bit>
	sending = 1;
    17bc:	10 93 23 01 	sts	0x0123, r17	; 0x800123 <sending>
	TCNT1 = 0x00;			//reset counter to avoid glitch on next rcv char.
    17c0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
    17c4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	spi_disable = 1;
    17c8:	10 93 53 01 	sts	0x0153, r17	; 0x800153 <spi_disable>
	TIMSK1 |= (1<<OCIE1A);
    17cc:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
    17d0:	82 60       	ori	r24, 0x02	; 2
    17d2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	while(sending);
    17d6:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <sending>
    17da:	81 11       	cpse	r24, r1
    17dc:	fc cf       	rjmp	.-8      	; 0x17d6 <main+0x178>
		//send(0x15);
		if (configured == 0x55 && !spi_disable) {
			AVR_LED_PORT &= ~_BV(AVR_LED_BLUE_BIT);
			check_usart_faults();
			/*read the ssp lines for events */
			UCSRC = (1<<UMSEL1)|(1<<UMSEL0)|(1<<UCSZ0)|(1<<UCPOL);
    17de:	83 ec       	ldi	r24, 0xC3	; 195
    17e0:	f8 2e       	mov	r15, r24
				//if temp is out side normal storage or sensor is exposed to bright light
				//actual values TBD 
				if((light > light_thresh)) {
					light_flt_cnt++;
						if (light_flt_cnt>3){
							fault_code = LIGHT;
    17e2:	11 e0       	ldi	r17, 0x01	; 1
				else {
					vibe_flt_cnt = 0;
				}
			}
			if (temp_enable && !spi_disable){
				UCSRC = (1<<UMSEL1)|(1<<UMSEL0); //!!!change SPI polarity here first before chip selects
    17e4:	90 ec       	ldi	r25, 0xC0	; 192
    17e6:	99 2e       	mov	r9, r25
				UCSRC &= ~(1<<UCSZ0);			//!!!
				adx_temp();
				if ((((temperature > temp_hi_thresh) | (temperature < temp_lo_thresh))) ){
					temp_flt_cnt++;
					if (temp_flt_cnt>3){
						fault_code = TEMP;
    17e8:	22 e0       	ldi	r18, 0x02	; 2
    17ea:	62 2e       	mov	r6, r18
				UCSRC &= ~(1<<UCSZ0);			//!!!
				uint8_t adx = adx_read_status();
				if ((adx & ADX_ACT || adx & ADX_ERR )){
					vibe_flt_cnt++;
					if (vibe_flt_cnt>3){
						fault_code = VIBE;
    17ec:	34 e0       	ldi	r19, 0x04	; 4
    17ee:	a3 2e       	mov	r10, r19
			}
			if (batt_on){
				//re-purpose timer0 and set a throttle timer
				//on spi comms
				fifo_delay_flag = 1;
				OCR0A = 200;
    17f0:	48 ec       	ldi	r20, 0xC8	; 200
    17f2:	b4 2e       	mov	r11, r20
				fifo_delay = 50;
    17f4:	52 e3       	ldi	r21, 0x32	; 50
    17f6:	c5 2e       	mov	r12, r21
				TCNT0 = 0x00;
				TIMSK0 |= (1<<OCIE0A);
				while (fifo_delay_flag){TIMSK0 |= (1<<OCIE0A);};
				TIMSK0 &= ~(1<<OCIE0A);		//stop the  timer
				TIFR0 |= (1<<OCF0A);
				OCR0A = 185;
    17f8:	69 eb       	ldi	r22, 0xB9	; 185
    17fa:	d6 2e       	mov	r13, r22
			//detect when low line (VBat <= 2.6VDC)
			if (!(ssp_status & 0x01)) {
				ll_flt_cnt++;
				if(ll_flt_cnt >10){
					tamper_detected = 1;
					fault_code = LL;
    17fc:	70 e2       	ldi	r23, 0x20	; 32
    17fe:	77 2e       	mov	r7, r23
		fault_value1 = SSP;
		fault_value2 = 0x00;
		tamper_detected = 1;
	}
	if (unk_fault >20) {
		fault_code = USART;
    1800:	00 e4       	ldi	r16, 0x40	; 64
		fault_value1 = UNK;
    1802:	e0 e8       	ldi	r30, 0x80	; 128
    1804:	ee 2e       	mov	r14, r30
		fault_value2 = 0x00;
		tamper_detected = 1;
	}
	if ((ssp_fault >20) && case_enable) {
		fault_code = USART;
		fault_value1 = SSP;
    1806:	f0 e1       	ldi	r31, 0x10	; 16
    1808:	8f 2e       	mov	r8, r31
  rcv_valid = 0;
  sei();
  send(0x15);
  while (1)
    {
		if (rcv_valid == 1){
    180a:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <rcv_valid>
    180e:	81 30       	cpi	r24, 0x01	; 1
    1810:	09 f4       	brne	.+2      	; 0x1814 <main+0x1b6>
    1812:	d2 c0       	rjmp	.+420    	; 0x19b8 <main+0x35a>
			start_bit = 1;
			process_message();
			//send(0x15);
		}
		//send(0x15);
		if (configured == 0x55 && !spi_disable) {
    1814:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <configured>
    1818:	85 35       	cpi	r24, 0x55	; 85
    181a:	b9 f7       	brne	.-18     	; 0x180a <main+0x1ac>
    181c:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <spi_disable>
    1820:	81 11       	cpse	r24, r1
    1822:	f3 cf       	rjmp	.-26     	; 0x180a <main+0x1ac>
			AVR_LED_PORT &= ~_BV(AVR_LED_BLUE_BIT);
    1824:	10 98       	cbi	0x02, 0	; 2
	TIMSK1 |= (1<<OCIE1A);
	while(sending);
}

void check_usart_faults(){
	if ((light_fault > 20)&& (light_enable)){  //light 
    1826:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <light_fault>
    182a:	85 31       	cpi	r24, 0x15	; 21
    182c:	60 f0       	brcs	.+24     	; 0x1846 <main+0x1e8>
    182e:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <light_enable>
    1832:	88 23       	and	r24, r24
    1834:	41 f0       	breq	.+16     	; 0x1846 <main+0x1e8>
		fault_code = USART;
    1836:	00 93 0f 01 	sts	0x010F, r16	; 0x80010f <fault_code>
		fault_value1 = LIGHT;
    183a:	10 93 0e 01 	sts	0x010E, r17	; 0x80010e <fault_value1>
		fault_value2 = 0x00;
    183e:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <fault_value2>
		tamper_detected = 1;
    1842:	10 93 37 01 	sts	0x0137, r17	; 0x800137 <tamper_detected>
	}
	if ((vibe_fault > 20) && (vibe_enable||temp_enable)){  //vibe and temp same chip
    1846:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <vibe_fault>
    184a:	85 31       	cpi	r24, 0x15	; 21
    184c:	80 f0       	brcs	.+32     	; 0x186e <main+0x210>
    184e:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <vibe_enable>
    1852:	81 11       	cpse	r24, r1
    1854:	04 c0       	rjmp	.+8      	; 0x185e <main+0x200>
    1856:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <temp_enable>
    185a:	88 23       	and	r24, r24
    185c:	41 f0       	breq	.+16     	; 0x186e <main+0x210>
		fault_code = USART;
    185e:	00 93 0f 01 	sts	0x010F, r16	; 0x80010f <fault_code>
		fault_value1 = VIBE;
    1862:	a0 92 0e 01 	sts	0x010E, r10	; 0x80010e <fault_value1>
		fault_value2 = 0x00;
    1866:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <fault_value2>
		tamper_detected = 1;
    186a:	10 93 37 01 	sts	0x0137, r17	; 0x800137 <tamper_detected>
	}
	if ((ssp_fault >20) && case_enable) {
    186e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <ssp_fault>
    1872:	85 31       	cpi	r24, 0x15	; 21
    1874:	60 f0       	brcs	.+24     	; 0x188e <main+0x230>
    1876:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <case_enable>
    187a:	88 23       	and	r24, r24
    187c:	41 f0       	breq	.+16     	; 0x188e <main+0x230>
		fault_code = USART;
    187e:	00 93 0f 01 	sts	0x010F, r16	; 0x80010f <fault_code>
		fault_value1 = SSP;
    1882:	80 92 0e 01 	sts	0x010E, r8	; 0x80010e <fault_value1>
		fault_value2 = 0x00;
    1886:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <fault_value2>
		tamper_detected = 1;
    188a:	10 93 37 01 	sts	0x0137, r17	; 0x800137 <tamper_detected>
	}
	if (unk_fault >20) {
    188e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <unk_fault>
    1892:	85 31       	cpi	r24, 0x15	; 21
    1894:	40 f0       	brcs	.+16     	; 0x18a6 <main+0x248>
		fault_code = USART;
    1896:	00 93 0f 01 	sts	0x010F, r16	; 0x80010f <fault_code>
		fault_value1 = UNK;
    189a:	e0 92 0e 01 	sts	0x010E, r14	; 0x80010e <fault_value1>
		fault_value2 = 0x00;
    189e:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <fault_value2>
		tamper_detected = 1;
    18a2:	10 93 37 01 	sts	0x0137, r17	; 0x800137 <tamper_detected>
		//send(0x15);
		if (configured == 0x55 && !spi_disable) {
			AVR_LED_PORT &= ~_BV(AVR_LED_BLUE_BIT);
			check_usart_faults();
			/*read the ssp lines for events */
			UCSRC = (1<<UMSEL1)|(1<<UMSEL0)|(1<<UCSZ0)|(1<<UCPOL);
    18a6:	f0 92 c2 00 	sts	0x00C2, r15	; 0x8000c2 <__EEPROM_REGION_LENGTH__+0x7f00c2>
			//if (ssp)
			ssp_status = ssp_read_byte();
    18aa:	e2 d7       	rcall	.+4036   	; 0x2870 <__TEXT_REGION_LENGTH__+0x870>
    18ac:	89 83       	std	Y+1, r24	; 0x01
			//detect when BATT_ON signal goes low
			if (!(ssp_status & 0x20)) {
    18ae:	89 81       	ldd	r24, Y+1	; 0x01
    18b0:	85 fd       	sbrc	r24, 5
    18b2:	88 c0       	rjmp	.+272    	; 0x19c4 <main+0x366>
				//mkm_wipe();
				batt_on_cnt++;
    18b4:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <batt_on_cnt>
    18b8:	8f 5f       	subi	r24, 0xFF	; 255
    18ba:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <batt_on_cnt>
				if (batt_on_cnt>25){
    18be:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <batt_on_cnt>
    18c2:	8a 31       	cpi	r24, 0x1A	; 26
    18c4:	10 f0       	brcs	.+4      	; 0x18ca <main+0x26c>
					batt_on = 1;
    18c6:	10 93 0a 01 	sts	0x010A, r17	; 0x80010a <batt_on>
				}
				AVR_LED_PORT |= _BV(AVR_LED_YELLOW_BIT);
    18ca:	12 9a       	sbi	0x02, 2	; 2
				batt_on_cnt = 0;
				batt_on = 0;
				AVR_LED_PORT &= ~_BV(AVR_LED_YELLOW_BIT);
			}
			//detect when low line (VBat <= 2.6VDC)
			if (!(ssp_status & 0x01)) {
    18cc:	89 81       	ldd	r24, Y+1	; 0x01
    18ce:	80 fd       	sbrc	r24, 0
    18d0:	81 c0       	rjmp	.+258    	; 0x19d4 <main+0x376>
				ll_flt_cnt++;
    18d2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <ll_flt_cnt>
    18d6:	8f 5f       	subi	r24, 0xFF	; 255
    18d8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <ll_flt_cnt>
				if(ll_flt_cnt >10){
    18dc:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <ll_flt_cnt>
    18e0:	8b 30       	cpi	r24, 0x0B	; 11
    18e2:	20 f0       	brcs	.+8      	; 0x18ec <main+0x28e>
					tamper_detected = 1;
    18e4:	10 93 37 01 	sts	0x0137, r17	; 0x800137 <tamper_detected>
					fault_code = LL;
    18e8:	70 92 0f 01 	sts	0x010F, r7	; 0x80010f <fault_code>
				}
			}
			else {
				ll_flt_cnt = 0;
			}
			if (batt_on){
    18ec:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <batt_on>
    18f0:	88 23       	and	r24, r24
    18f2:	09 f4       	brne	.+2      	; 0x18f6 <main+0x298>
    18f4:	75 c0       	rjmp	.+234    	; 0x19e0 <main+0x382>
				//re-purpose timer0 and set a throttle timer
				//on spi comms
				fifo_delay_flag = 1;
    18f6:	10 93 3b 01 	sts	0x013B, r17	; 0x80013b <fifo_delay_flag>
				OCR0A = 200;
    18fa:	b7 bc       	out	0x27, r11	; 39
				fifo_delay = 50;
    18fc:	c0 92 4e 01 	sts	0x014E, r12	; 0x80014e <fifo_delay>
				TCNT0 = 0x00;
    1900:	16 bc       	out	0x26, r1	; 38
				TIMSK0 |= (1<<OCIE0A);
    1902:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
    1906:	82 60       	ori	r24, 0x02	; 2
    1908:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
				while (fifo_delay_flag){TIMSK0 |= (1<<OCIE0A);};
    190c:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <fifo_delay_flag>
    1910:	81 11       	cpse	r24, r1
    1912:	f7 cf       	rjmp	.-18     	; 0x1902 <main+0x2a4>
				TIMSK0 &= ~(1<<OCIE0A);		//stop the  timer
    1914:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
    1918:	8d 7f       	andi	r24, 0xFD	; 253
    191a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
				TIFR0 |= (1<<OCF0A);
    191e:	a9 9a       	sbi	0x15, 1	; 21
				OCR0A = 185;
    1920:	d7 bc       	out	0x27, r13	; 39
}

static inline void
mkm_grab()
{
  MKM_CONTROL_FPGA_PORT |= _BV(MKM_CONTROL_FPGA_BIT);
    1922:	17 9a       	sbi	0x02, 7	; 2
  MKM_CONTROL_AVR_PORT &= ~_BV(MKM_CONTROL_AVR_BIT);
    1924:	16 98       	cbi	0x02, 6	; 2
			}
			else {
				mkm_release();
			}
			//read accelerometer 
			if (vibe_enable && !spi_disable){
    1926:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <vibe_enable>
    192a:	88 23       	and	r24, r24
    192c:	29 f0       	breq	.+10     	; 0x1938 <main+0x2da>
    192e:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <spi_disable>
    1932:	88 23       	and	r24, r24
    1934:	09 f4       	brne	.+2      	; 0x1938 <main+0x2da>
    1936:	57 c0       	rjmp	.+174    	; 0x19e6 <main+0x388>
				}
				else {
					vibe_flt_cnt = 0;
				}
			}
			if (temp_enable && !spi_disable){
    1938:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <temp_enable>
    193c:	88 23       	and	r24, r24
    193e:	29 f0       	breq	.+10     	; 0x194a <main+0x2ec>
    1940:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <spi_disable>
    1944:	88 23       	and	r24, r24
    1946:	09 f4       	brne	.+2      	; 0x194a <main+0x2ec>
    1948:	5d c0       	rjmp	.+186    	; 0x1a04 <main+0x3a6>
				else{
					temp_flt_cnt = 0;
				}
			}
			//read light
			if (light_enable && !spi_disable){
    194a:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <light_enable>
    194e:	88 23       	and	r24, r24
    1950:	61 f1       	breq	.+88     	; 0x19aa <main+0x34c>
    1952:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <spi_disable>
    1956:	81 11       	cpse	r24, r1
    1958:	28 c0       	rjmp	.+80     	; 0x19aa <main+0x34c>
				UCSRC = (1<<UMSEL1)|(1<<UMSEL0)|(1<<UCSZ0)|(1<<UCPOL);
    195a:	f0 92 c2 00 	sts	0x00C2, r15	; 0x8000c2 <__EEPROM_REGION_LENGTH__+0x7f00c2>
				//need a delay between start meas and get meas
				if(!light_retrieve) {
    195e:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <light_retrieve>
    1962:	88 23       	and	r24, r24
    1964:	09 f4       	brne	.+2      	; 0x1968 <main+0x30a>
    1966:	bf c0       	rjmp	.+382    	; 0x1ae6 <main+0x488>
					mlx_start_meas();
				}
				if (light_retrieve){
    1968:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <light_retrieve>
    196c:	81 11       	cpse	r24, r1
    196e:	b9 c0       	rjmp	.+370    	; 0x1ae2 <main+0x484>
					mlx_get_meas();
				}
				if (light_retrieve){
    1970:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <light_retrieve>
    1974:	88 23       	and	r24, r24
    1976:	09 f4       	brne	.+2      	; 0x197a <main+0x31c>
    1978:	95 c0       	rjmp	.+298    	; 0x1aa4 <main+0x446>
					light_retrieve = 0;
    197a:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <light_retrieve>
				else {
				    light_retrieve = 1;
				}
				//if temp is out side normal storage or sensor is exposed to bright light
				//actual values TBD 
				if((light > light_thresh)) {
    197e:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <light>
    1982:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <light+0x1>
    1986:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <light_thresh>
    198a:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <light_thresh+0x1>
    198e:	82 17       	cp	r24, r18
    1990:	93 07       	cpc	r25, r19
    1992:	08 f0       	brcs	.+2      	; 0x1996 <main+0x338>
    1994:	84 c0       	rjmp	.+264    	; 0x1a9e <main+0x440>
					light_flt_cnt++;
    1996:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <light_flt_cnt>
    199a:	8f 5f       	subi	r24, 0xFF	; 255
    199c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <light_flt_cnt>
						if (light_flt_cnt>3){
    19a0:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <light_flt_cnt>
    19a4:	84 30       	cpi	r24, 0x04	; 4
    19a6:	08 f0       	brcs	.+2      	; 0x19aa <main+0x34c>
    19a8:	a0 c0       	rjmp	.+320    	; 0x1aea <main+0x48c>
				}
				else{
					light_flt_cnt = 0;
				}
			}
			case_flt_cnt = 0; //clear any detection of glitches in tamper ring
    19aa:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <case_flt_cnt>
  rcv_valid = 0;
  sei();
  send(0x15);
  while (1)
    {
		if (rcv_valid == 1){
    19ae:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <rcv_valid>
    19b2:	81 30       	cpi	r24, 0x01	; 1
    19b4:	09 f0       	breq	.+2      	; 0x19b8 <main+0x35a>
    19b6:	2e cf       	rjmp	.-420    	; 0x1814 <main+0x1b6>
			rcv_valid = 0;
    19b8:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rcv_valid>
			start_bit = 1;
    19bc:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <start_bit>
			process_message();
    19c0:	34 d8       	rcall	.-3992   	; 0xa2a <process_message>
    19c2:	28 cf       	rjmp	.-432    	; 0x1814 <main+0x1b6>
					batt_on = 1;
				}
				AVR_LED_PORT |= _BV(AVR_LED_YELLOW_BIT);
			}
			else {
				batt_on_cnt = 0;
    19c4:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <batt_on_cnt>
				batt_on = 0;
    19c8:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <batt_on>
				AVR_LED_PORT &= ~_BV(AVR_LED_YELLOW_BIT);
    19cc:	12 98       	cbi	0x02, 2	; 2
			}
			//detect when low line (VBat <= 2.6VDC)
			if (!(ssp_status & 0x01)) {
    19ce:	89 81       	ldd	r24, Y+1	; 0x01
    19d0:	80 ff       	sbrs	r24, 0
    19d2:	7f cf       	rjmp	.-258    	; 0x18d2 <main+0x274>
					tamper_detected = 1;
					fault_code = LL;
				}
			}
			else {
				ll_flt_cnt = 0;
    19d4:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <ll_flt_cnt>
			}
			if (batt_on){
    19d8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <batt_on>
    19dc:	81 11       	cpse	r24, r1
    19de:	8b cf       	rjmp	.-234    	; 0x18f6 <main+0x298>
}

static inline void
mkm_release()
{
  MKM_CONTROL_AVR_PORT |= _BV(MKM_CONTROL_AVR_BIT);
    19e0:	16 9a       	sbi	0x02, 6	; 2
  MKM_CONTROL_FPGA_PORT &= ~_BV(MKM_CONTROL_FPGA_BIT);
    19e2:	17 98       	cbi	0x02, 7	; 2
    19e4:	a0 cf       	rjmp	.-192    	; 0x1926 <main+0x2c8>
			else {
				mkm_release();
			}
			//read accelerometer 
			if (vibe_enable && !spi_disable){
				UCSRC = (1<<UMSEL1)|(1<<UMSEL0); //!!!change SPI polarity here first before chip selects
    19e6:	90 92 c2 00 	sts	0x00C2, r9	; 0x8000c2 <__EEPROM_REGION_LENGTH__+0x7f00c2>
				UCSRC &= ~(1<<UCSZ0);			//!!!
    19ea:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__EEPROM_REGION_LENGTH__+0x7f00c2>
    19ee:	8d 7f       	andi	r24, 0xFD	; 253
    19f0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__EEPROM_REGION_LENGTH__+0x7f00c2>
				uint8_t adx = adx_read_status();
    19f4:	f2 d3       	rcall	.+2020   	; 0x21da <__TEXT_REGION_LENGTH__+0x1da>
				if ((adx & ADX_ACT || adx & ADX_ERR )){
    19f6:	84 fd       	sbrc	r24, 4
    19f8:	64 c0       	rjmp	.+200    	; 0x1ac2 <main+0x464>
    19fa:	87 fd       	sbrc	r24, 7
    19fc:	62 c0       	rjmp	.+196    	; 0x1ac2 <main+0x464>
						mkm_wipe();
						vibe_enable = 0;
					}
				}
				else {
					vibe_flt_cnt = 0;
    19fe:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <vibe_flt_cnt>
    1a02:	9a cf       	rjmp	.-204    	; 0x1938 <main+0x2da>
				}
			}
			if (temp_enable && !spi_disable){
				UCSRC = (1<<UMSEL1)|(1<<UMSEL0); //!!!change SPI polarity here first before chip selects
    1a04:	90 92 c2 00 	sts	0x00C2, r9	; 0x8000c2 <__EEPROM_REGION_LENGTH__+0x7f00c2>
				UCSRC &= ~(1<<UCSZ0);			//!!!
    1a08:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__EEPROM_REGION_LENGTH__+0x7f00c2>
    1a0c:	8d 7f       	andi	r24, 0xFD	; 253
    1a0e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__EEPROM_REGION_LENGTH__+0x7f00c2>
				adx_temp();
    1a12:	bb d3       	rcall	.+1910   	; 0x218a <__TEXT_REGION_LENGTH__+0x18a>
				if ((((temperature > temp_hi_thresh) | (temperature < temp_lo_thresh))) ){
    1a14:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <temp_hi_thresh>
    1a18:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <temp_hi_thresh+0x1>
    1a1c:	40 91 28 01 	lds	r20, 0x0128	; 0x800128 <temperature>
    1a20:	50 91 29 01 	lds	r21, 0x0129	; 0x800129 <temperature+0x1>
    1a24:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <temperature+0x2>
    1a28:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <temperature+0x3>
    1a2c:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <temp_lo_thresh>
    1a30:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <temp_lo_thresh+0x1>
    1a34:	20 90 28 01 	lds	r2, 0x0128	; 0x800128 <temperature>
    1a38:	30 90 29 01 	lds	r3, 0x0129	; 0x800129 <temperature+0x1>
    1a3c:	40 90 2a 01 	lds	r4, 0x012A	; 0x80012a <temperature+0x2>
    1a40:	50 90 2b 01 	lds	r5, 0x012B	; 0x80012b <temperature+0x3>
    1a44:	09 2e       	mov	r0, r25
    1a46:	00 0c       	add	r0, r0
    1a48:	aa 0b       	sbc	r26, r26
    1a4a:	bb 0b       	sbc	r27, r27
    1a4c:	84 17       	cp	r24, r20
    1a4e:	95 07       	cpc	r25, r21
    1a50:	a6 07       	cpc	r26, r22
    1a52:	b7 07       	cpc	r27, r23
    1a54:	54 f5       	brge	.+84     	; 0x1aaa <main+0x44c>
					temp_flt_cnt++;
    1a56:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <temp_flt_cnt>
    1a5a:	8f 5f       	subi	r24, 0xFF	; 255
    1a5c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <temp_flt_cnt>
					if (temp_flt_cnt>3){
    1a60:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <temp_flt_cnt>
    1a64:	84 30       	cpi	r24, 0x04	; 4
    1a66:	08 f4       	brcc	.+2      	; 0x1a6a <main+0x40c>
    1a68:	70 cf       	rjmp	.-288    	; 0x194a <main+0x2ec>
						fault_code = TEMP;
    1a6a:	60 92 0f 01 	sts	0x010F, r6	; 0x80010f <fault_code>
						fault_value1 = ((uint8_t) temperature>>8);
    1a6e:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <temperature>
    1a72:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <temperature+0x1>
    1a76:	a0 91 2a 01 	lds	r26, 0x012A	; 0x80012a <temperature+0x2>
    1a7a:	b0 91 2b 01 	lds	r27, 0x012B	; 0x80012b <temperature+0x3>
    1a7e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <fault_value1>
						fault_value2 = ((uint8_t) temperature&0xFF);
    1a82:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <temperature>
    1a86:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <temperature+0x1>
    1a8a:	a0 91 2a 01 	lds	r26, 0x012A	; 0x80012a <temperature+0x2>
    1a8e:	b0 91 2b 01 	lds	r27, 0x012B	; 0x80012b <temperature+0x3>
    1a92:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <fault_value2>
						mkm_wipe();
    1a96:	4c d7       	rcall	.+3736   	; 0x2930 <__TEXT_REGION_LENGTH__+0x930>
						temp_enable = 0;
    1a98:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <temp_enable>
    1a9c:	56 cf       	rjmp	.-340    	; 0x194a <main+0x2ec>
							mkm_wipe();
							light_enable = 0;
					}
				}
				else{
					light_flt_cnt = 0;
    1a9e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <light_flt_cnt>
    1aa2:	83 cf       	rjmp	.-250    	; 0x19aa <main+0x34c>
				}
				if (light_retrieve){
					light_retrieve = 0;
				}
				else {
				    light_retrieve = 1;
    1aa4:	10 93 1f 01 	sts	0x011F, r17	; 0x80011f <light_retrieve>
    1aa8:	6a cf       	rjmp	.-300    	; 0x197e <main+0x320>
			}
			if (temp_enable && !spi_disable){
				UCSRC = (1<<UMSEL1)|(1<<UMSEL0); //!!!change SPI polarity here first before chip selects
				UCSRC &= ~(1<<UCSZ0);			//!!!
				adx_temp();
				if ((((temperature > temp_hi_thresh) | (temperature < temp_lo_thresh))) ){
    1aaa:	c9 01       	movw	r24, r18
    1aac:	33 0f       	add	r19, r19
    1aae:	aa 0b       	sbc	r26, r26
    1ab0:	bb 0b       	sbc	r27, r27
    1ab2:	28 16       	cp	r2, r24
    1ab4:	39 06       	cpc	r3, r25
    1ab6:	4a 06       	cpc	r4, r26
    1ab8:	5b 06       	cpc	r5, r27
    1aba:	6c f2       	brlt	.-102    	; 0x1a56 <main+0x3f8>
						mkm_wipe();
						temp_enable = 0;
					}
				}
				else{
					temp_flt_cnt = 0;
    1abc:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <temp_flt_cnt>
    1ac0:	44 cf       	rjmp	.-376    	; 0x194a <main+0x2ec>
			if (vibe_enable && !spi_disable){
				UCSRC = (1<<UMSEL1)|(1<<UMSEL0); //!!!change SPI polarity here first before chip selects
				UCSRC &= ~(1<<UCSZ0);			//!!!
				uint8_t adx = adx_read_status();
				if ((adx & ADX_ACT || adx & ADX_ERR )){
					vibe_flt_cnt++;
    1ac2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <vibe_flt_cnt>
    1ac6:	8f 5f       	subi	r24, 0xFF	; 255
    1ac8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <vibe_flt_cnt>
					if (vibe_flt_cnt>3){
    1acc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <vibe_flt_cnt>
    1ad0:	84 30       	cpi	r24, 0x04	; 4
    1ad2:	08 f4       	brcc	.+2      	; 0x1ad6 <main+0x478>
    1ad4:	31 cf       	rjmp	.-414    	; 0x1938 <main+0x2da>
						fault_code = VIBE;
    1ad6:	a0 92 0f 01 	sts	0x010F, r10	; 0x80010f <fault_code>
						mkm_wipe();
    1ada:	2a d7       	rcall	.+3668   	; 0x2930 <__TEXT_REGION_LENGTH__+0x930>
						vibe_enable = 0;
    1adc:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <vibe_enable>
    1ae0:	2b cf       	rjmp	.-426    	; 0x1938 <main+0x2da>
				//need a delay between start meas and get meas
				if(!light_retrieve) {
					mlx_start_meas();
				}
				if (light_retrieve){
					mlx_get_meas();
    1ae2:	50 d4       	rcall	.+2208   	; 0x2384 <__TEXT_REGION_LENGTH__+0x384>
    1ae4:	45 cf       	rjmp	.-374    	; 0x1970 <main+0x312>
			//read light
			if (light_enable && !spi_disable){
				UCSRC = (1<<UMSEL1)|(1<<UMSEL0)|(1<<UCSZ0)|(1<<UCPOL);
				//need a delay between start meas and get meas
				if(!light_retrieve) {
					mlx_start_meas();
    1ae6:	45 d4       	rcall	.+2186   	; 0x2372 <__TEXT_REGION_LENGTH__+0x372>
    1ae8:	3f cf       	rjmp	.-386    	; 0x1968 <main+0x30a>
				//if temp is out side normal storage or sensor is exposed to bright light
				//actual values TBD 
				if((light > light_thresh)) {
					light_flt_cnt++;
						if (light_flt_cnt>3){
							fault_code = LIGHT;
    1aea:	10 93 0f 01 	sts	0x010F, r17	; 0x80010f <fault_code>
							fault_value1 = ((uint8_t) light>>8);
    1aee:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <light>
    1af2:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <light+0x1>
    1af6:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <fault_value1>
							fault_value2 = ((uint8_t) light&0xFF);
    1afa:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <light>
    1afe:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <light+0x1>
    1b02:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <fault_value2>
							mkm_wipe();
    1b06:	14 d7       	rcall	.+3624   	; 0x2930 <__TEXT_REGION_LENGTH__+0x930>
							light_enable = 0;
    1b08:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <light_enable>
    1b0c:	4e cf       	rjmp	.-356    	; 0x19aa <main+0x34c>

00001b0e <__vector_9>:
}


//soft-uart timer
ISR (TIMER1_COMPA_vect)
{
    1b0e:	1f 92       	push	r1
    1b10:	0f 92       	push	r0
    1b12:	0f b6       	in	r0, 0x3f	; 63
    1b14:	0f 92       	push	r0
    1b16:	11 24       	eor	r1, r1
    1b18:	2f 93       	push	r18
    1b1a:	3f 93       	push	r19
    1b1c:	4f 93       	push	r20
    1b1e:	5f 93       	push	r21
    1b20:	8f 93       	push	r24
    1b22:	9f 93       	push	r25
	/*disable interrupts, should we or allow NMI of tamper switch detect? */
	TCNT1 = 0x00;
    1b24:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
    1b28:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	
	int i;
	//PORTC ^= _BV(PORTC6);		//toggle gp6 to check on progress
	if (receiving) {
    1b2c:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <receiving>
    1b30:	88 23       	and	r24, r24
    1b32:	49 f0       	breq	.+18     	; 0x1b46 <__vector_9+0x38>
		if (start_bit)	{
    1b34:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <start_bit>
    1b38:	88 23       	and	r24, r24
    1b3a:	79 f1       	breq	.+94     	; 0x1b9a <__vector_9+0x8c>
			start_bit--;
    1b3c:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <start_bit>
    1b40:	81 50       	subi	r24, 0x01	; 1
    1b42:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <start_bit>
				receiving = 0;
			}
			rcv_bit_count--;
		}
	}
	if (sending){
    1b46:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <sending>
    1b4a:	88 23       	and	r24, r24
    1b4c:	d9 f0       	breq	.+54     	; 0x1b84 <__vector_9+0x76>
		if (start_bit == 1)	{
    1b4e:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <start_bit>
    1b52:	81 30       	cpi	r24, 0x01	; 1
    1b54:	09 f4       	brne	.+2      	; 0x1b58 <__vector_9+0x4a>
    1b56:	53 c0       	rjmp	.+166    	; 0x1bfe <__vector_9+0xf0>
			start_bit = 0;
			PORTB &= ~_BV(PORTB2);  //PORTB3 to PORTB2
		}
		else {
			if (tx_bit_count<8){
    1b58:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <tx_bit_count>
    1b5c:	88 30       	cpi	r24, 0x08	; 8
    1b5e:	d8 f5       	brcc	.+118    	; 0x1bd6 <__vector_9+0xc8>
				if (tx_char & (1<<tx_bit_count)){  //check the bit sending LSB first
    1b60:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <tx_char>
    1b64:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <tx_bit_count>
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	02 c0       	rjmp	.+4      	; 0x1b70 <__vector_9+0x62>
    1b6c:	95 95       	asr	r25
    1b6e:	87 95       	ror	r24
    1b70:	2a 95       	dec	r18
    1b72:	e2 f7       	brpl	.-8      	; 0x1b6c <__vector_9+0x5e>
    1b74:	80 ff       	sbrs	r24, 0
    1b76:	3c c0       	rjmp	.+120    	; 0x1bf0 <__vector_9+0xe2>
					PORTB |= _BV(PORTB2);
    1b78:	32 9a       	sbi	0x06, 2	; 6
			else if (tx_bit_count == 8){
				PORTB |= _BV(PORTB2);        //send stop bit
				TIMSK1 &= ~(1<<OCIE1A);		//stop the bit timer
				sending = 0;
			}
			tx_bit_count++;
    1b7a:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <tx_bit_count>
    1b7e:	8f 5f       	subi	r24, 0xFF	; 255
    1b80:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <tx_bit_count>
		
	}
	//
	//sei();
	
}
    1b84:	9f 91       	pop	r25
    1b86:	8f 91       	pop	r24
    1b88:	5f 91       	pop	r21
    1b8a:	4f 91       	pop	r20
    1b8c:	3f 91       	pop	r19
    1b8e:	2f 91       	pop	r18
    1b90:	0f 90       	pop	r0
    1b92:	0f be       	out	0x3f, r0	; 63
    1b94:	0f 90       	pop	r0
    1b96:	1f 90       	pop	r1
    1b98:	18 95       	reti
		if (start_bit)	{
			start_bit--;
			//skip first bit
		}
		else {	
			if (rcv_bit_count-1 > 0) {     //looking for data) 
    1b9a:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <rcv_bit_count>
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	02 97       	sbiw	r24, 0x02	; 2
    1ba2:	8c f1       	brlt	.+98     	; 0x1c06 <__vector_9+0xf8>
				rcv_char |= ((PINB & (1<<3))>>3)<<(9-rcv_bit_count);  //from (1<<2) to (1<<3)
    1ba4:	84 b1       	in	r24, 0x04	; 4
    1ba6:	50 91 41 01 	lds	r21, 0x0141	; 0x800141 <rcv_bit_count>
    1baa:	40 91 32 01 	lds	r20, 0x0132	; 0x800132 <rcv_char>
    1bae:	83 fb       	bst	r24, 3
    1bb0:	22 27       	eor	r18, r18
    1bb2:	20 f9       	bld	r18, 0
    1bb4:	89 e0       	ldi	r24, 0x09	; 9
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	85 1b       	sub	r24, r21
    1bba:	91 09       	sbc	r25, r1
    1bbc:	01 c0       	rjmp	.+2      	; 0x1bc0 <__vector_9+0xb2>
    1bbe:	22 0f       	add	r18, r18
    1bc0:	8a 95       	dec	r24
    1bc2:	ea f7       	brpl	.-6      	; 0x1bbe <__vector_9+0xb0>
    1bc4:	24 2b       	or	r18, r20
    1bc6:	20 93 32 01 	sts	0x0132, r18	; 0x800132 <rcv_char>
				}
				TIMSK1 &= ~(1<<OCIE1A);		//stop the bit timer
				PCMSK1 |= _BV(PCINT11);		//enable start bit detect INT10 to INT11
				receiving = 0;
			}
			rcv_bit_count--;
    1bca:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <rcv_bit_count>
    1bce:	81 50       	subi	r24, 0x01	; 1
    1bd0:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <rcv_bit_count>
    1bd4:	b8 cf       	rjmp	.-144    	; 0x1b46 <__vector_9+0x38>
				}
				else{
					PORTB &= ~_BV(PORTB2);
				}
			}
			else if (tx_bit_count == 8){
    1bd6:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <tx_bit_count>
    1bda:	88 30       	cpi	r24, 0x08	; 8
    1bdc:	71 f6       	brne	.-100    	; 0x1b7a <__vector_9+0x6c>
				PORTB |= _BV(PORTB2);        //send stop bit
    1bde:	32 9a       	sbi	0x06, 2	; 6
				TIMSK1 &= ~(1<<OCIE1A);		//stop the bit timer
    1be0:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
    1be4:	8d 7f       	andi	r24, 0xFD	; 253
    1be6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
				sending = 0;
    1bea:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <sending>
    1bee:	c5 cf       	rjmp	.-118    	; 0x1b7a <__vector_9+0x6c>
			if (tx_bit_count<8){
				if (tx_char & (1<<tx_bit_count)){  //check the bit sending LSB first
					PORTB |= _BV(PORTB2);
				}
				else{
					PORTB &= ~_BV(PORTB2);
    1bf0:	32 98       	cbi	0x06, 2	; 6
			else if (tx_bit_count == 8){
				PORTB |= _BV(PORTB2);        //send stop bit
				TIMSK1 &= ~(1<<OCIE1A);		//stop the bit timer
				sending = 0;
			}
			tx_bit_count++;
    1bf2:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <tx_bit_count>
    1bf6:	8f 5f       	subi	r24, 0xFF	; 255
    1bf8:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <tx_bit_count>
    1bfc:	c3 cf       	rjmp	.-122    	; 0x1b84 <__vector_9+0x76>
			rcv_bit_count--;
		}
	}
	if (sending){
		if (start_bit == 1)	{
			start_bit = 0;
    1bfe:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <start_bit>
			PORTB &= ~_BV(PORTB2);  //PORTB3 to PORTB2
    1c02:	32 98       	cbi	0x06, 2	; 6
    1c04:	bf cf       	rjmp	.-130    	; 0x1b84 <__vector_9+0x76>
		else {	
			if (rcv_bit_count-1 > 0) {     //looking for data) 
				rcv_char |= ((PINB & (1<<3))>>3)<<(9-rcv_bit_count);  //from (1<<2) to (1<<3)
				//rcv[9-rcv_bit_count] = (PINB & (1<<3))>>3;
			}
			else if (rcv_bit_count == 0) {  //looking for stop bit
    1c06:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <rcv_bit_count>
    1c0a:	81 11       	cpse	r24, r1
    1c0c:	de cf       	rjmp	.-68     	; 0x1bca <__vector_9+0xbc>
				if (PINB & (1<<PINB3)) {    //PINB2 to PINB3
					rcv_valid = 1;
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
			if (rcv_bit_count-1 > 0) {     //looking for data) 
				rcv_char |= ((PINB & (1<<3))>>3)<<(9-rcv_bit_count);  //from (1<<2) to (1<<3)
				//rcv[9-rcv_bit_count] = (PINB & (1<<3))>>3;
			}
			else if (rcv_bit_count == 0) {  //looking for stop bit
				if (PINB & (1<<PINB3)) {    //PINB2 to PINB3
    1c10:	23 9b       	sbis	0x04, 3	; 4
    1c12:	13 c0       	rjmp	.+38     	; 0x1c3a <__vector_9+0x12c>
					rcv_valid = 1;
    1c14:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <rcv_valid>
					AVR_LED_PORT ^= _BV(AVR_LED_RED_BIT);
    1c18:	92 b1       	in	r25, 0x02	; 2
    1c1a:	88 e0       	ldi	r24, 0x08	; 8
    1c1c:	89 27       	eor	r24, r25
    1c1e:	82 b9       	out	0x02, r24	; 2
				}
				else {
					rcv_error_stop = 1;
				}
				TIMSK1 &= ~(1<<OCIE1A);		//stop the bit timer
    1c20:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
    1c24:	8d 7f       	andi	r24, 0xFD	; 253
    1c26:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
				PCMSK1 |= _BV(PCINT11);		//enable start bit detect INT10 to INT11
    1c2a:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__EEPROM_REGION_LENGTH__+0x7f006c>
    1c2e:	88 60       	ori	r24, 0x08	; 8
    1c30:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__EEPROM_REGION_LENGTH__+0x7f006c>
				receiving = 0;
    1c34:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <receiving>
    1c38:	c8 cf       	rjmp	.-112    	; 0x1bca <__vector_9+0xbc>
				if (PINB & (1<<PINB3)) {    //PINB2 to PINB3
					rcv_valid = 1;
					AVR_LED_PORT ^= _BV(AVR_LED_RED_BIT);
				}
				else {
					rcv_error_stop = 1;
    1c3a:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <rcv_error_stop>
    1c3e:	f0 cf       	rjmp	.-32     	; 0x1c20 <__vector_9+0x112>

00001c40 <__vector_12>:
	
}

//ISR (TIMER1_COMPA_vect)
ISR (TIMER0_COMPA_vect)
{
    1c40:	1f 92       	push	r1
    1c42:	0f 92       	push	r0
    1c44:	0f b6       	in	r0, 0x3f	; 63
    1c46:	0f 92       	push	r0
    1c48:	11 24       	eor	r1, r1
    1c4a:	8f 93       	push	r24
	/*disable interrupts, should we or allow NMI of tamper switch detect? */
	//cli();
	//sei();
	
	TCNT0 = 0x00;
    1c4c:	16 bc       	out	0x26, r1	; 38
	int i;
	//PORTC ^= _BV(PORTC6);		//toggle gp6 to check on progress
	TIMSK0 &= ~(1<<OCIE0A);		//stop the  timer
    1c4e:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
    1c52:	8d 7f       	andi	r24, 0xFD	; 253
    1c54:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
	TIFR0 |= (1<<OCF0A);
    1c58:	a9 9a       	sbi	0x15, 1	; 21
	if (spi_to_flag) {
    1c5a:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <spi_to_flag>
    1c5e:	88 23       	and	r24, r24
    1c60:	49 f0       	breq	.+18     	; 0x1c74 <__vector_12+0x34>
		spi_to--;
    1c62:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <spi_to>
    1c66:	81 50       	subi	r24, 0x01	; 1
    1c68:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <spi_to>
		if (spi_to == 0){
    1c6c:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <spi_to>
    1c70:	88 23       	and	r24, r24
    1c72:	d1 f0       	breq	.+52     	; 0x1ca8 <__vector_12+0x68>
			spi_to_flag = 0;
		}
	}
	if (fifo_delay_flag) {
    1c74:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <fifo_delay_flag>
    1c78:	88 23       	and	r24, r24
    1c7a:	71 f0       	breq	.+28     	; 0x1c98 <__vector_12+0x58>
		fifo_delay--;
    1c7c:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <fifo_delay>
    1c80:	81 50       	subi	r24, 0x01	; 1
    1c82:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <fifo_delay>
		if (fifo_delay == 0){
    1c86:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <fifo_delay>
    1c8a:	88 23       	and	r24, r24
    1c8c:	81 f0       	breq	.+32     	; 0x1cae <__vector_12+0x6e>
			fifo_delay_flag = 0;
		}
		else {
			TIMSK0 |= (1<<OCIE0A);
    1c8e:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
    1c92:	82 60       	ori	r24, 0x02	; 2
    1c94:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
		}
	}
	usart_to = 0;
    1c98:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <usart_to>
	
    1c9c:	8f 91       	pop	r24
    1c9e:	0f 90       	pop	r0
    1ca0:	0f be       	out	0x3f, r0	; 63
    1ca2:	0f 90       	pop	r0
    1ca4:	1f 90       	pop	r1
    1ca6:	18 95       	reti
	TIMSK0 &= ~(1<<OCIE0A);		//stop the  timer
	TIFR0 |= (1<<OCF0A);
	if (spi_to_flag) {
		spi_to--;
		if (spi_to == 0){
			spi_to_flag = 0;
    1ca8:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <spi_to_flag>
    1cac:	e3 cf       	rjmp	.-58     	; 0x1c74 <__vector_12+0x34>
		}
	}
	if (fifo_delay_flag) {
		fifo_delay--;
		if (fifo_delay == 0){
			fifo_delay_flag = 0;
    1cae:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <fifo_delay_flag>
		}
		else {
			TIMSK0 |= (1<<OCIE0A);
		}
	}
	usart_to = 0;
    1cb2:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <usart_to>
	
    1cb6:	8f 91       	pop	r24
    1cb8:	0f 90       	pop	r0
    1cba:	0f be       	out	0x3f, r0	; 63
    1cbc:	0f 90       	pop	r0
    1cbe:	1f 90       	pop	r1
    1cc0:	18 95       	reti

00001cc2 <__fixsfsi>:
    1cc2:	04 d0       	rcall	.+8      	; 0x1ccc <__fixunssfsi>
    1cc4:	68 94       	set
    1cc6:	b1 11       	cpse	r27, r1
    1cc8:	8d c0       	rjmp	.+282    	; 0x1de4 <__fp_szero>
    1cca:	08 95       	ret

00001ccc <__fixunssfsi>:
    1ccc:	70 d0       	rcall	.+224    	; 0x1dae <__fp_splitA>
    1cce:	88 f0       	brcs	.+34     	; 0x1cf2 <__fixunssfsi+0x26>
    1cd0:	9f 57       	subi	r25, 0x7F	; 127
    1cd2:	90 f0       	brcs	.+36     	; 0x1cf8 <__fixunssfsi+0x2c>
    1cd4:	b9 2f       	mov	r27, r25
    1cd6:	99 27       	eor	r25, r25
    1cd8:	b7 51       	subi	r27, 0x17	; 23
    1cda:	a0 f0       	brcs	.+40     	; 0x1d04 <__fixunssfsi+0x38>
    1cdc:	d1 f0       	breq	.+52     	; 0x1d12 <__fixunssfsi+0x46>
    1cde:	66 0f       	add	r22, r22
    1ce0:	77 1f       	adc	r23, r23
    1ce2:	88 1f       	adc	r24, r24
    1ce4:	99 1f       	adc	r25, r25
    1ce6:	1a f0       	brmi	.+6      	; 0x1cee <__fixunssfsi+0x22>
    1ce8:	ba 95       	dec	r27
    1cea:	c9 f7       	brne	.-14     	; 0x1cde <__fixunssfsi+0x12>
    1cec:	12 c0       	rjmp	.+36     	; 0x1d12 <__fixunssfsi+0x46>
    1cee:	b1 30       	cpi	r27, 0x01	; 1
    1cf0:	81 f0       	breq	.+32     	; 0x1d12 <__fixunssfsi+0x46>
    1cf2:	77 d0       	rcall	.+238    	; 0x1de2 <__fp_zero>
    1cf4:	b1 e0       	ldi	r27, 0x01	; 1
    1cf6:	08 95       	ret
    1cf8:	74 c0       	rjmp	.+232    	; 0x1de2 <__fp_zero>
    1cfa:	67 2f       	mov	r22, r23
    1cfc:	78 2f       	mov	r23, r24
    1cfe:	88 27       	eor	r24, r24
    1d00:	b8 5f       	subi	r27, 0xF8	; 248
    1d02:	39 f0       	breq	.+14     	; 0x1d12 <__fixunssfsi+0x46>
    1d04:	b9 3f       	cpi	r27, 0xF9	; 249
    1d06:	cc f3       	brlt	.-14     	; 0x1cfa <__fixunssfsi+0x2e>
    1d08:	86 95       	lsr	r24
    1d0a:	77 95       	ror	r23
    1d0c:	67 95       	ror	r22
    1d0e:	b3 95       	inc	r27
    1d10:	d9 f7       	brne	.-10     	; 0x1d08 <__fixunssfsi+0x3c>
    1d12:	3e f4       	brtc	.+14     	; 0x1d22 <__fixunssfsi+0x56>
    1d14:	90 95       	com	r25
    1d16:	80 95       	com	r24
    1d18:	70 95       	com	r23
    1d1a:	61 95       	neg	r22
    1d1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d1e:	8f 4f       	sbci	r24, 0xFF	; 255
    1d20:	9f 4f       	sbci	r25, 0xFF	; 255
    1d22:	08 95       	ret

00001d24 <__floatunsisf>:
    1d24:	e8 94       	clt
    1d26:	09 c0       	rjmp	.+18     	; 0x1d3a <__floatsisf+0x12>

00001d28 <__floatsisf>:
    1d28:	97 fb       	bst	r25, 7
    1d2a:	3e f4       	brtc	.+14     	; 0x1d3a <__floatsisf+0x12>
    1d2c:	90 95       	com	r25
    1d2e:	80 95       	com	r24
    1d30:	70 95       	com	r23
    1d32:	61 95       	neg	r22
    1d34:	7f 4f       	sbci	r23, 0xFF	; 255
    1d36:	8f 4f       	sbci	r24, 0xFF	; 255
    1d38:	9f 4f       	sbci	r25, 0xFF	; 255
    1d3a:	99 23       	and	r25, r25
    1d3c:	a9 f0       	breq	.+42     	; 0x1d68 <__floatsisf+0x40>
    1d3e:	f9 2f       	mov	r31, r25
    1d40:	96 e9       	ldi	r25, 0x96	; 150
    1d42:	bb 27       	eor	r27, r27
    1d44:	93 95       	inc	r25
    1d46:	f6 95       	lsr	r31
    1d48:	87 95       	ror	r24
    1d4a:	77 95       	ror	r23
    1d4c:	67 95       	ror	r22
    1d4e:	b7 95       	ror	r27
    1d50:	f1 11       	cpse	r31, r1
    1d52:	f8 cf       	rjmp	.-16     	; 0x1d44 <__floatsisf+0x1c>
    1d54:	fa f4       	brpl	.+62     	; 0x1d94 <__floatsisf+0x6c>
    1d56:	bb 0f       	add	r27, r27
    1d58:	11 f4       	brne	.+4      	; 0x1d5e <__floatsisf+0x36>
    1d5a:	60 ff       	sbrs	r22, 0
    1d5c:	1b c0       	rjmp	.+54     	; 0x1d94 <__floatsisf+0x6c>
    1d5e:	6f 5f       	subi	r22, 0xFF	; 255
    1d60:	7f 4f       	sbci	r23, 0xFF	; 255
    1d62:	8f 4f       	sbci	r24, 0xFF	; 255
    1d64:	9f 4f       	sbci	r25, 0xFF	; 255
    1d66:	16 c0       	rjmp	.+44     	; 0x1d94 <__floatsisf+0x6c>
    1d68:	88 23       	and	r24, r24
    1d6a:	11 f0       	breq	.+4      	; 0x1d70 <__floatsisf+0x48>
    1d6c:	96 e9       	ldi	r25, 0x96	; 150
    1d6e:	11 c0       	rjmp	.+34     	; 0x1d92 <__floatsisf+0x6a>
    1d70:	77 23       	and	r23, r23
    1d72:	21 f0       	breq	.+8      	; 0x1d7c <__floatsisf+0x54>
    1d74:	9e e8       	ldi	r25, 0x8E	; 142
    1d76:	87 2f       	mov	r24, r23
    1d78:	76 2f       	mov	r23, r22
    1d7a:	05 c0       	rjmp	.+10     	; 0x1d86 <__floatsisf+0x5e>
    1d7c:	66 23       	and	r22, r22
    1d7e:	71 f0       	breq	.+28     	; 0x1d9c <__floatsisf+0x74>
    1d80:	96 e8       	ldi	r25, 0x86	; 134
    1d82:	86 2f       	mov	r24, r22
    1d84:	70 e0       	ldi	r23, 0x00	; 0
    1d86:	60 e0       	ldi	r22, 0x00	; 0
    1d88:	2a f0       	brmi	.+10     	; 0x1d94 <__floatsisf+0x6c>
    1d8a:	9a 95       	dec	r25
    1d8c:	66 0f       	add	r22, r22
    1d8e:	77 1f       	adc	r23, r23
    1d90:	88 1f       	adc	r24, r24
    1d92:	da f7       	brpl	.-10     	; 0x1d8a <__floatsisf+0x62>
    1d94:	88 0f       	add	r24, r24
    1d96:	96 95       	lsr	r25
    1d98:	87 95       	ror	r24
    1d9a:	97 f9       	bld	r25, 7
    1d9c:	08 95       	ret

00001d9e <__fp_split3>:
    1d9e:	57 fd       	sbrc	r21, 7
    1da0:	90 58       	subi	r25, 0x80	; 128
    1da2:	44 0f       	add	r20, r20
    1da4:	55 1f       	adc	r21, r21
    1da6:	59 f0       	breq	.+22     	; 0x1dbe <__fp_splitA+0x10>
    1da8:	5f 3f       	cpi	r21, 0xFF	; 255
    1daa:	71 f0       	breq	.+28     	; 0x1dc8 <__fp_splitA+0x1a>
    1dac:	47 95       	ror	r20

00001dae <__fp_splitA>:
    1dae:	88 0f       	add	r24, r24
    1db0:	97 fb       	bst	r25, 7
    1db2:	99 1f       	adc	r25, r25
    1db4:	61 f0       	breq	.+24     	; 0x1dce <__fp_splitA+0x20>
    1db6:	9f 3f       	cpi	r25, 0xFF	; 255
    1db8:	79 f0       	breq	.+30     	; 0x1dd8 <__fp_splitA+0x2a>
    1dba:	87 95       	ror	r24
    1dbc:	08 95       	ret
    1dbe:	12 16       	cp	r1, r18
    1dc0:	13 06       	cpc	r1, r19
    1dc2:	14 06       	cpc	r1, r20
    1dc4:	55 1f       	adc	r21, r21
    1dc6:	f2 cf       	rjmp	.-28     	; 0x1dac <__fp_split3+0xe>
    1dc8:	46 95       	lsr	r20
    1dca:	f1 df       	rcall	.-30     	; 0x1dae <__fp_splitA>
    1dcc:	08 c0       	rjmp	.+16     	; 0x1dde <__fp_splitA+0x30>
    1dce:	16 16       	cp	r1, r22
    1dd0:	17 06       	cpc	r1, r23
    1dd2:	18 06       	cpc	r1, r24
    1dd4:	99 1f       	adc	r25, r25
    1dd6:	f1 cf       	rjmp	.-30     	; 0x1dba <__fp_splitA+0xc>
    1dd8:	86 95       	lsr	r24
    1dda:	71 05       	cpc	r23, r1
    1ddc:	61 05       	cpc	r22, r1
    1dde:	08 94       	sec
    1de0:	08 95       	ret

00001de2 <__fp_zero>:
    1de2:	e8 94       	clt

00001de4 <__fp_szero>:
    1de4:	bb 27       	eor	r27, r27
    1de6:	66 27       	eor	r22, r22
    1de8:	77 27       	eor	r23, r23
    1dea:	cb 01       	movw	r24, r22
    1dec:	97 f9       	bld	r25, 7
    1dee:	08 95       	ret

00001df0 <__mulsf3>:
    1df0:	0a d0       	rcall	.+20     	; 0x1e06 <__mulsf3x>
    1df2:	80 c0       	rjmp	.+256    	; 0x1ef4 <__fp_round>
    1df4:	71 d0       	rcall	.+226    	; 0x1ed8 <__fp_pscA>
    1df6:	28 f0       	brcs	.+10     	; 0x1e02 <__mulsf3+0x12>
    1df8:	76 d0       	rcall	.+236    	; 0x1ee6 <__fp_pscB>
    1dfa:	18 f0       	brcs	.+6      	; 0x1e02 <__mulsf3+0x12>
    1dfc:	95 23       	and	r25, r21
    1dfe:	09 f0       	breq	.+2      	; 0x1e02 <__mulsf3+0x12>
    1e00:	62 c0       	rjmp	.+196    	; 0x1ec6 <__fp_inf>
    1e02:	67 c0       	rjmp	.+206    	; 0x1ed2 <__fp_nan>
    1e04:	ef cf       	rjmp	.-34     	; 0x1de4 <__fp_szero>

00001e06 <__mulsf3x>:
    1e06:	cb df       	rcall	.-106    	; 0x1d9e <__fp_split3>
    1e08:	a8 f3       	brcs	.-22     	; 0x1df4 <__mulsf3+0x4>

00001e0a <__mulsf3_pse>:
    1e0a:	99 23       	and	r25, r25
    1e0c:	d9 f3       	breq	.-10     	; 0x1e04 <__mulsf3+0x14>
    1e0e:	55 23       	and	r21, r21
    1e10:	c9 f3       	breq	.-14     	; 0x1e04 <__mulsf3+0x14>
    1e12:	95 0f       	add	r25, r21
    1e14:	50 e0       	ldi	r21, 0x00	; 0
    1e16:	55 1f       	adc	r21, r21
    1e18:	aa 27       	eor	r26, r26
    1e1a:	ee 27       	eor	r30, r30
    1e1c:	ff 27       	eor	r31, r31
    1e1e:	bb 27       	eor	r27, r27
    1e20:	00 24       	eor	r0, r0
    1e22:	08 94       	sec
    1e24:	67 95       	ror	r22
    1e26:	20 f4       	brcc	.+8      	; 0x1e30 <__mulsf3_pse+0x26>
    1e28:	e2 0f       	add	r30, r18
    1e2a:	f3 1f       	adc	r31, r19
    1e2c:	b4 1f       	adc	r27, r20
    1e2e:	0a 1e       	adc	r0, r26
    1e30:	22 0f       	add	r18, r18
    1e32:	33 1f       	adc	r19, r19
    1e34:	44 1f       	adc	r20, r20
    1e36:	aa 1f       	adc	r26, r26
    1e38:	66 95       	lsr	r22
    1e3a:	a9 f7       	brne	.-22     	; 0x1e26 <__mulsf3_pse+0x1c>
    1e3c:	77 95       	ror	r23
    1e3e:	30 f4       	brcc	.+12     	; 0x1e4c <__mulsf3_pse+0x42>
    1e40:	f3 0f       	add	r31, r19
    1e42:	b4 1f       	adc	r27, r20
    1e44:	0a 1e       	adc	r0, r26
    1e46:	12 1e       	adc	r1, r18
    1e48:	08 f4       	brcc	.+2      	; 0x1e4c <__mulsf3_pse+0x42>
    1e4a:	63 95       	inc	r22
    1e4c:	33 0f       	add	r19, r19
    1e4e:	44 1f       	adc	r20, r20
    1e50:	aa 1f       	adc	r26, r26
    1e52:	22 1f       	adc	r18, r18
    1e54:	76 95       	lsr	r23
    1e56:	99 f7       	brne	.-26     	; 0x1e3e <__mulsf3_pse+0x34>
    1e58:	87 95       	ror	r24
    1e5a:	20 f4       	brcc	.+8      	; 0x1e64 <__mulsf3_pse+0x5a>
    1e5c:	b4 0f       	add	r27, r20
    1e5e:	0a 1e       	adc	r0, r26
    1e60:	12 1e       	adc	r1, r18
    1e62:	63 1f       	adc	r22, r19
    1e64:	44 0f       	add	r20, r20
    1e66:	aa 1f       	adc	r26, r26
    1e68:	22 1f       	adc	r18, r18
    1e6a:	33 1f       	adc	r19, r19
    1e6c:	86 95       	lsr	r24
    1e6e:	a9 f7       	brne	.-22     	; 0x1e5a <__mulsf3_pse+0x50>
    1e70:	86 2f       	mov	r24, r22
    1e72:	71 2d       	mov	r23, r1
    1e74:	60 2d       	mov	r22, r0
    1e76:	11 24       	eor	r1, r1
    1e78:	9f 57       	subi	r25, 0x7F	; 127
    1e7a:	50 40       	sbci	r21, 0x00	; 0
    1e7c:	8a f0       	brmi	.+34     	; 0x1ea0 <__mulsf3_pse+0x96>
    1e7e:	e1 f0       	breq	.+56     	; 0x1eb8 <__mulsf3_pse+0xae>
    1e80:	88 23       	and	r24, r24
    1e82:	4a f0       	brmi	.+18     	; 0x1e96 <__mulsf3_pse+0x8c>
    1e84:	ee 0f       	add	r30, r30
    1e86:	ff 1f       	adc	r31, r31
    1e88:	bb 1f       	adc	r27, r27
    1e8a:	66 1f       	adc	r22, r22
    1e8c:	77 1f       	adc	r23, r23
    1e8e:	88 1f       	adc	r24, r24
    1e90:	91 50       	subi	r25, 0x01	; 1
    1e92:	50 40       	sbci	r21, 0x00	; 0
    1e94:	a9 f7       	brne	.-22     	; 0x1e80 <__mulsf3_pse+0x76>
    1e96:	9e 3f       	cpi	r25, 0xFE	; 254
    1e98:	51 05       	cpc	r21, r1
    1e9a:	70 f0       	brcs	.+28     	; 0x1eb8 <__mulsf3_pse+0xae>
    1e9c:	14 c0       	rjmp	.+40     	; 0x1ec6 <__fp_inf>
    1e9e:	a2 cf       	rjmp	.-188    	; 0x1de4 <__fp_szero>
    1ea0:	5f 3f       	cpi	r21, 0xFF	; 255
    1ea2:	ec f3       	brlt	.-6      	; 0x1e9e <__mulsf3_pse+0x94>
    1ea4:	98 3e       	cpi	r25, 0xE8	; 232
    1ea6:	dc f3       	brlt	.-10     	; 0x1e9e <__mulsf3_pse+0x94>
    1ea8:	86 95       	lsr	r24
    1eaa:	77 95       	ror	r23
    1eac:	67 95       	ror	r22
    1eae:	b7 95       	ror	r27
    1eb0:	f7 95       	ror	r31
    1eb2:	e7 95       	ror	r30
    1eb4:	9f 5f       	subi	r25, 0xFF	; 255
    1eb6:	c1 f7       	brne	.-16     	; 0x1ea8 <__mulsf3_pse+0x9e>
    1eb8:	fe 2b       	or	r31, r30
    1eba:	88 0f       	add	r24, r24
    1ebc:	91 1d       	adc	r25, r1
    1ebe:	96 95       	lsr	r25
    1ec0:	87 95       	ror	r24
    1ec2:	97 f9       	bld	r25, 7
    1ec4:	08 95       	ret

00001ec6 <__fp_inf>:
    1ec6:	97 f9       	bld	r25, 7
    1ec8:	9f 67       	ori	r25, 0x7F	; 127
    1eca:	80 e8       	ldi	r24, 0x80	; 128
    1ecc:	70 e0       	ldi	r23, 0x00	; 0
    1ece:	60 e0       	ldi	r22, 0x00	; 0
    1ed0:	08 95       	ret

00001ed2 <__fp_nan>:
    1ed2:	9f ef       	ldi	r25, 0xFF	; 255
    1ed4:	80 ec       	ldi	r24, 0xC0	; 192
    1ed6:	08 95       	ret

00001ed8 <__fp_pscA>:
    1ed8:	00 24       	eor	r0, r0
    1eda:	0a 94       	dec	r0
    1edc:	16 16       	cp	r1, r22
    1ede:	17 06       	cpc	r1, r23
    1ee0:	18 06       	cpc	r1, r24
    1ee2:	09 06       	cpc	r0, r25
    1ee4:	08 95       	ret

00001ee6 <__fp_pscB>:
    1ee6:	00 24       	eor	r0, r0
    1ee8:	0a 94       	dec	r0
    1eea:	12 16       	cp	r1, r18
    1eec:	13 06       	cpc	r1, r19
    1eee:	14 06       	cpc	r1, r20
    1ef0:	05 06       	cpc	r0, r21
    1ef2:	08 95       	ret

00001ef4 <__fp_round>:
    1ef4:	09 2e       	mov	r0, r25
    1ef6:	03 94       	inc	r0
    1ef8:	00 0c       	add	r0, r0
    1efa:	11 f4       	brne	.+4      	; 0x1f00 <__fp_round+0xc>
    1efc:	88 23       	and	r24, r24
    1efe:	52 f0       	brmi	.+20     	; 0x1f14 <__fp_round+0x20>
    1f00:	bb 0f       	add	r27, r27
    1f02:	40 f4       	brcc	.+16     	; 0x1f14 <__fp_round+0x20>
    1f04:	bf 2b       	or	r27, r31
    1f06:	11 f4       	brne	.+4      	; 0x1f0c <__fp_round+0x18>
    1f08:	60 ff       	sbrs	r22, 0
    1f0a:	04 c0       	rjmp	.+8      	; 0x1f14 <__fp_round+0x20>
    1f0c:	6f 5f       	subi	r22, 0xFF	; 255
    1f0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f10:	8f 4f       	sbci	r24, 0xFF	; 255
    1f12:	9f 4f       	sbci	r25, 0xFF	; 255
    1f14:	08 95       	ret

00001f16 <_exit>:
    1f16:	f8 94       	cli

00001f18 <__stop_program>:
    1f18:	ff cf       	rjmp	.-2      	; 0x1f18 <__stop_program>
