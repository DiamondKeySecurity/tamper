
Sensor_board.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000015ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001578  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003b  00800100  00800100  000015ec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000015ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000161c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e0  00000000  00000000  00001658  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004b8a  00000000  00000000  00001838  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001090  00000000  00000000  000063c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000025cc  00000000  00000000  00007452  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000424  00000000  00000000  00009a20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008cf  00000000  00000000  00009e44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001be1  00000000  00000000  0000a713  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000238  00000000  00000000  0000c2f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
       2:	8e c4       	rjmp	.+2332   	; 0x920 <__vector_1>
       4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
       6:	fe c3       	rjmp	.+2044   	; 0x804 <__vector_3>
       8:	12 c4       	rjmp	.+2084   	; 0x82e <__vector_4>
       a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
       c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
       e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
      10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
      12:	6e ca       	rjmp	.-2852   	; 0xfffff4f0 <__eeprom_end+0xff7ef4f0>
      14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
      16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
      18:	cf c9       	rjmp	.-3170   	; 0xfffff3b8 <__eeprom_end+0xff7ef3b8>
      1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
      1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
      1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
      20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
      22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
      24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
      26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
      28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
      2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
      2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
      2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
      30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
      32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
      34:	11 24       	eor	r1, r1
      36:	1f be       	out	0x3f, r1	; 63
      38:	cf ef       	ldi	r28, 0xFF	; 255
      3a:	d2 e0       	ldi	r29, 0x02	; 2
      3c:	de bf       	out	0x3e, r29	; 62
      3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
      40:	21 e0       	ldi	r18, 0x01	; 1
      42:	a0 e0       	ldi	r26, 0x00	; 0
      44:	b1 e0       	ldi	r27, 0x01	; 1
      46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
      48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
      4a:	ab 33       	cpi	r26, 0x3B	; 59
      4c:	b2 07       	cpc	r27, r18
      4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
      50:	c5 d8       	rcall	.-3702   	; 0xfffff1dc <__eeprom_end+0xff7ef1dc>
      52:	90 ca       	rjmp	.-2784   	; 0xfffff574 <__eeprom_end+0xff7ef574>

00000054 <__bad_interrupt>:
      54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <adx_chip_select>:
	USART_Receive(ADX_RD, VIBE);
	USART_Receive(reg, VIBE);  //device id address 0x00
	temp = USART_Receive(0x00, VIBE);
	adx_chip_select(0);
	return temp;
}
      56:	89 2b       	or	r24, r25
      58:	11 f4       	brne	.+4      	; 0x5e <adx_chip_select+0x8>
      5a:	54 9a       	sbi	0x0a, 4	; 10
      5c:	08 95       	ret
      5e:	54 98       	cbi	0x0a, 4	; 10
      60:	08 95       	ret

00000062 <adx_setup>:
      62:	cf 93       	push	r28
      64:	c0 91 1e 01 	lds	r28, 0x011E	; 0x80011e <vibe_lo_thresh>
      68:	54 98       	cbi	0x0a, 4	; 10
      6a:	64 e0       	ldi	r22, 0x04	; 4
      6c:	8a e0       	ldi	r24, 0x0A	; 10
      6e:	03 d1       	rcall	.+518    	; 0x276 <USART_Receive>
      70:	64 e0       	ldi	r22, 0x04	; 4
      72:	80 e2       	ldi	r24, 0x20	; 32
      74:	00 d1       	rcall	.+512    	; 0x276 <USART_Receive>
      76:	64 e0       	ldi	r22, 0x04	; 4
      78:	8c 2f       	mov	r24, r28
      7a:	fd d0       	rcall	.+506    	; 0x276 <USART_Receive>
      7c:	64 e0       	ldi	r22, 0x04	; 4
      7e:	80 e0       	ldi	r24, 0x00	; 0
      80:	fa d0       	rcall	.+500    	; 0x276 <USART_Receive>
      82:	54 9a       	sbi	0x0a, 4	; 10
      84:	c0 91 11 01 	lds	r28, 0x0111	; 0x800111 <vibe_hi_thresh>
      88:	54 98       	cbi	0x0a, 4	; 10
      8a:	64 e0       	ldi	r22, 0x04	; 4
      8c:	8a e0       	ldi	r24, 0x0A	; 10
      8e:	f3 d0       	rcall	.+486    	; 0x276 <USART_Receive>
      90:	64 e0       	ldi	r22, 0x04	; 4
      92:	81 e2       	ldi	r24, 0x21	; 33
      94:	f0 d0       	rcall	.+480    	; 0x276 <USART_Receive>
      96:	64 e0       	ldi	r22, 0x04	; 4
      98:	8c 2f       	mov	r24, r28
      9a:	ed d0       	rcall	.+474    	; 0x276 <USART_Receive>
      9c:	64 e0       	ldi	r22, 0x04	; 4
      9e:	80 e0       	ldi	r24, 0x00	; 0
      a0:	ea d0       	rcall	.+468    	; 0x276 <USART_Receive>
      a2:	54 9a       	sbi	0x0a, 4	; 10
      a4:	54 98       	cbi	0x0a, 4	; 10
      a6:	64 e0       	ldi	r22, 0x04	; 4
      a8:	8a e0       	ldi	r24, 0x0A	; 10
      aa:	e5 d0       	rcall	.+458    	; 0x276 <USART_Receive>
      ac:	64 e0       	ldi	r22, 0x04	; 4
      ae:	82 e2       	ldi	r24, 0x22	; 34
      b0:	e2 d0       	rcall	.+452    	; 0x276 <USART_Receive>
      b2:	64 e0       	ldi	r22, 0x04	; 4
      b4:	85 e0       	ldi	r24, 0x05	; 5
      b6:	df d0       	rcall	.+446    	; 0x276 <USART_Receive>
      b8:	64 e0       	ldi	r22, 0x04	; 4
      ba:	80 e0       	ldi	r24, 0x00	; 0
      bc:	dc d0       	rcall	.+440    	; 0x276 <USART_Receive>
      be:	54 9a       	sbi	0x0a, 4	; 10
      c0:	54 98       	cbi	0x0a, 4	; 10
      c2:	64 e0       	ldi	r22, 0x04	; 4
      c4:	8a e0       	ldi	r24, 0x0A	; 10
      c6:	d7 d0       	rcall	.+430    	; 0x276 <USART_Receive>
      c8:	64 e0       	ldi	r22, 0x04	; 4
      ca:	8c e2       	ldi	r24, 0x2C	; 44
      cc:	d4 d0       	rcall	.+424    	; 0x276 <USART_Receive>
      ce:	64 e0       	ldi	r22, 0x04	; 4
      d0:	81 e1       	ldi	r24, 0x11	; 17
      d2:	d1 d0       	rcall	.+418    	; 0x276 <USART_Receive>
      d4:	64 e0       	ldi	r22, 0x04	; 4
      d6:	80 e0       	ldi	r24, 0x00	; 0
      d8:	ce d0       	rcall	.+412    	; 0x276 <USART_Receive>
      da:	54 9a       	sbi	0x0a, 4	; 10
      dc:	54 98       	cbi	0x0a, 4	; 10
      de:	64 e0       	ldi	r22, 0x04	; 4
      e0:	8a e0       	ldi	r24, 0x0A	; 10
      e2:	c9 d0       	rcall	.+402    	; 0x276 <USART_Receive>
      e4:	64 e0       	ldi	r22, 0x04	; 4
      e6:	87 e2       	ldi	r24, 0x27	; 39
      e8:	c6 d0       	rcall	.+396    	; 0x276 <USART_Receive>
      ea:	64 e0       	ldi	r22, 0x04	; 4
      ec:	83 e0       	ldi	r24, 0x03	; 3
      ee:	c3 d0       	rcall	.+390    	; 0x276 <USART_Receive>
      f0:	64 e0       	ldi	r22, 0x04	; 4
      f2:	80 e0       	ldi	r24, 0x00	; 0
      f4:	c0 d0       	rcall	.+384    	; 0x276 <USART_Receive>
      f6:	54 9a       	sbi	0x0a, 4	; 10
      f8:	54 98       	cbi	0x0a, 4	; 10
      fa:	64 e0       	ldi	r22, 0x04	; 4
      fc:	8a e0       	ldi	r24, 0x0A	; 10
      fe:	bb d0       	rcall	.+374    	; 0x276 <USART_Receive>
     100:	64 e0       	ldi	r22, 0x04	; 4
     102:	8b e2       	ldi	r24, 0x2B	; 43
     104:	b8 d0       	rcall	.+368    	; 0x276 <USART_Receive>
     106:	64 e0       	ldi	r22, 0x04	; 4
     108:	80 e9       	ldi	r24, 0x90	; 144
     10a:	b5 d0       	rcall	.+362    	; 0x276 <USART_Receive>
     10c:	64 e0       	ldi	r22, 0x04	; 4
     10e:	80 e0       	ldi	r24, 0x00	; 0
     110:	b2 d0       	rcall	.+356    	; 0x276 <USART_Receive>
     112:	54 9a       	sbi	0x0a, 4	; 10
     114:	54 98       	cbi	0x0a, 4	; 10
     116:	64 e0       	ldi	r22, 0x04	; 4
     118:	8a e0       	ldi	r24, 0x0A	; 10
     11a:	ad d0       	rcall	.+346    	; 0x276 <USART_Receive>
     11c:	64 e0       	ldi	r22, 0x04	; 4
     11e:	8d e2       	ldi	r24, 0x2D	; 45
     120:	aa d0       	rcall	.+340    	; 0x276 <USART_Receive>
     122:	64 e0       	ldi	r22, 0x04	; 4
     124:	8a e0       	ldi	r24, 0x0A	; 10
     126:	a7 d0       	rcall	.+334    	; 0x276 <USART_Receive>
     128:	64 e0       	ldi	r22, 0x04	; 4
     12a:	80 e0       	ldi	r24, 0x00	; 0
     12c:	a4 d0       	rcall	.+328    	; 0x276 <USART_Receive>
     12e:	54 9a       	sbi	0x0a, 4	; 10
     130:	cf 91       	pop	r28
     132:	08 95       	ret

00000134 <adx_read_status>:


void adx_chip_select(int select_flag)
{
	if (select_flag) {
	AVR_GPIO_PORT &= ~_BV(DB_ADX_SS); /* CS low. */
     134:	54 98       	cbi	0x0a, 4	; 10

uint8_t adx_read_status(){
	/* ADX status */
	uint8_t temp;
	adx_chip_select(1);
	USART_Receive(ADX_RD, VIBE);
     136:	64 e0       	ldi	r22, 0x04	; 4
     138:	8b e0       	ldi	r24, 0x0B	; 11
     13a:	9d d0       	rcall	.+314    	; 0x276 <USART_Receive>
	USART_Receive(ADX_STATUS, VIBE);  //device id address 0x00
     13c:	64 e0       	ldi	r22, 0x04	; 4
     13e:	8d e0       	ldi	r24, 0x0D	; 13
     140:	9a d0       	rcall	.+308    	; 0x276 <USART_Receive>
	temp = USART_Receive(0x00, VIBE);
     142:	64 e0       	ldi	r22, 0x04	; 4
     144:	80 e0       	ldi	r24, 0x00	; 0
     146:	97 d0       	rcall	.+302    	; 0x276 <USART_Receive>
{
	if (select_flag) {
	AVR_GPIO_PORT &= ~_BV(DB_ADX_SS); /* CS low. */
	}
	else {
	AVR_GPIO_PORT |= _BV(DB_ADX_SS); /* CS high. */
     148:	54 9a       	sbi	0x0a, 4	; 10
	USART_Receive(ADX_STATUS, VIBE);  //device id address 0x00
	temp = USART_Receive(0x00, VIBE);
    adx_chip_select(0);
	
	return temp;
}
     14a:	08 95       	ret

0000014c <n25_chip_select>:
#include "ssp.h"


void n25_chip_select(int select_flag)
{
	if (select_flag) {
     14c:	89 2b       	or	r24, r25
     14e:	11 f4       	brne	.+4      	; 0x154 <n25_chip_select+0x8>
		AVR_GPIO_PORT &= ~_BV(PORTC6); /* CS low. */
	}
	else {
		AVR_GPIO_PORT |= _BV(PORTC6); /* CS high. */
     150:	56 9a       	sbi	0x0a, 6	; 10
     152:	08 95       	ret


void n25_chip_select(int select_flag)
{
	if (select_flag) {
		AVR_GPIO_PORT &= ~_BV(PORTC6); /* CS low. */
     154:	56 98       	cbi	0x0a, 6	; 10
     156:	08 95       	ret

00000158 <mlx_chip_select>:



void mlx_chip_select(int select_flag)
{
	if (select_flag)
     158:	89 2b       	or	r24, r25
     15a:	11 f4       	brne	.+4      	; 0x160 <mlx_chip_select+0x8>
	AVR_GPIO_PORT &= ~_BV(DB_MLX_SS); /* CS low. */
	else
	AVR_GPIO_PORT |= _BV(DB_MLX_SS); /* CS high. */
     15c:	55 9a       	sbi	0x0a, 5	; 10
     15e:	08 95       	ret


void mlx_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_MLX_SS); /* CS low. */
     160:	55 98       	cbi	0x0a, 5	; 10
     162:	08 95       	ret

00000164 <mlx_start_meas>:
     164:	55 98       	cbi	0x0a, 5	; 10

void mlx_start_meas()
{
	/* MLX chip start temperature measurement */
	mlx_chip_select(1);
	USART_Receive(MLX_SM, LIGHT);
     166:	61 e0       	ldi	r22, 0x01	; 1
     168:	80 ed       	ldi	r24, 0xD0	; 208
     16a:	85 d0       	rcall	.+266    	; 0x276 <USART_Receive>
	USART_Receive(MLX_TEMP_AMB, LIGHT);
     16c:	61 e0       	ldi	r22, 0x01	; 1
     16e:	80 e6       	ldi	r24, 0x60	; 96
     170:	82 d0       	rcall	.+260    	; 0x276 <USART_Receive>
void mlx_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_MLX_SS); /* CS low. */
	else
	AVR_GPIO_PORT |= _BV(DB_MLX_SS); /* CS high. */
     172:	55 9a       	sbi	0x0a, 5	; 10
     174:	08 95       	ret

00000176 <mlx_get_meas>:
	USART_Receive(MLX_TEMP_AMB, LIGHT);
	mlx_chip_select(0);
}

void mlx_get_meas()
{
     176:	cf 93       	push	r28
     178:	df 93       	push	r29


void mlx_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_MLX_SS); /* CS low. */
     17a:	55 98       	cbi	0x0a, 5	; 10
void mlx_get_meas()
{
	int16_t temp_t;
	/* MLX chip get temp and ambient chan values */
	mlx_chip_select(1);
	USART_Receive(MLX_RO, LIGHT);
     17c:	61 e0       	ldi	r22, 0x01	; 1
     17e:	83 ec       	ldi	r24, 0xC3	; 195
     180:	7a d0       	rcall	.+244    	; 0x276 <USART_Receive>
	USART_Receive(0, LIGHT);
     182:	61 e0       	ldi	r22, 0x01	; 1
     184:	80 e0       	ldi	r24, 0x00	; 0
     186:	77 d0       	rcall	.+238    	; 0x276 <USART_Receive>
	//read in values
	temp_t = USART_Receive(0, LIGHT)<<8;
     188:	61 e0       	ldi	r22, 0x01	; 1
     18a:	80 e0       	ldi	r24, 0x00	; 0
     18c:	74 d0       	rcall	.+232    	; 0x276 <USART_Receive>
     18e:	c8 2f       	mov	r28, r24
     190:	d0 e0       	ldi	r29, 0x00	; 0
     192:	dc 2f       	mov	r29, r28
     194:	cc 27       	eor	r28, r28
	temp_t |= USART_Receive(0, LIGHT);
     196:	61 e0       	ldi	r22, 0x01	; 1
     198:	80 e0       	ldi	r24, 0x00	; 0
     19a:	6d d0       	rcall	.+218    	; 0x276 <USART_Receive>
     19c:	c8 2b       	or	r28, r24
	light =  USART_Receive(0, LIGHT)<<8;
     19e:	61 e0       	ldi	r22, 0x01	; 1
     1a0:	80 e0       	ldi	r24, 0x00	; 0
     1a2:	69 d0       	rcall	.+210    	; 0x276 <USART_Receive>
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	98 2f       	mov	r25, r24
     1a8:	88 27       	eor	r24, r24
     1aa:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <light+0x1>
     1ae:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <light>
	light |= USART_Receive(0, LIGHT); 
     1b2:	61 e0       	ldi	r22, 0x01	; 1
     1b4:	80 e0       	ldi	r24, 0x00	; 0
     1b6:	5f d0       	rcall	.+190    	; 0x276 <USART_Receive>
     1b8:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <light>
     1bc:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <light+0x1>
     1c0:	28 2b       	or	r18, r24
     1c2:	30 93 1d 01 	sts	0x011D, r19	; 0x80011d <light+0x1>
     1c6:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <light>
void mlx_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_MLX_SS); /* CS low. */
	else
	AVR_GPIO_PORT |= _BV(DB_MLX_SS); /* CS high. */
     1ca:	55 9a       	sbi	0x0a, 5	; 10
	temp_t |= USART_Receive(0, LIGHT);
	light =  USART_Receive(0, LIGHT)<<8;
	light |= USART_Receive(0, LIGHT); 
	mlx_chip_select(0);
	//the calibrated temp output
		temperature = 30 + (((11775 + 67*(calib2-32))-temp_t)/(67+(calib1-16)));
     1cc:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <calib2>
     1d0:	60 91 33 01 	lds	r22, 0x0133	; 0x800133 <calib1>
     1d4:	30 e0       	ldi	r19, 0x00	; 0
     1d6:	20 52       	subi	r18, 0x20	; 32
     1d8:	31 09       	sbc	r19, r1
     1da:	c9 01       	movw	r24, r18
     1dc:	88 0f       	add	r24, r24
     1de:	99 1f       	adc	r25, r25
     1e0:	82 95       	swap	r24
     1e2:	92 95       	swap	r25
     1e4:	90 7f       	andi	r25, 0xF0	; 240
     1e6:	98 27       	eor	r25, r24
     1e8:	80 7f       	andi	r24, 0xF0	; 240
     1ea:	98 27       	eor	r25, r24
     1ec:	82 0f       	add	r24, r18
     1ee:	93 1f       	adc	r25, r19
     1f0:	88 0f       	add	r24, r24
     1f2:	99 1f       	adc	r25, r25
     1f4:	82 0f       	add	r24, r18
     1f6:	93 1f       	adc	r25, r19
     1f8:	81 50       	subi	r24, 0x01	; 1
     1fa:	92 4d       	sbci	r25, 0xD2	; 210
     1fc:	8c 1b       	sub	r24, r28
     1fe:	9d 0b       	sbc	r25, r29
     200:	70 e0       	ldi	r23, 0x00	; 0
     202:	6d 5c       	subi	r22, 0xCD	; 205
     204:	7f 4f       	sbci	r23, 0xFF	; 255
     206:	8f d9       	rcall	.-3298   	; 0xfffff526 <__eeprom_end+0xff7ef526>
     208:	62 5e       	subi	r22, 0xE2	; 226
     20a:	7f 4f       	sbci	r23, 0xFF	; 255
     20c:	70 93 1a 01 	sts	0x011A, r23	; 0x80011a <temperature+0x1>
     210:	60 93 19 01 	sts	0x0119, r22	; 0x800119 <temperature>
}
     214:	df 91       	pop	r29
     216:	cf 91       	pop	r28
     218:	08 95       	ret

0000021a <mlx_setup>:


void mlx_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_MLX_SS); /* CS low. */
     21a:	55 98       	cbi	0x0a, 5	; 10

void mlx_setup()
{
	/* MLX chip setup enable temp and Ambient Ch. C */
	mlx_chip_select(1);
	USART_Receive(MLX_WR, LIGHT);
     21c:	61 e0       	ldi	r22, 0x01	; 1
     21e:	87 e8       	ldi	r24, 0x87	; 135
     220:	2a d0       	rcall	.+84     	; 0x276 <USART_Receive>
	USART_Receive(MLX_CH_EN, LIGHT);
     222:	61 e0       	ldi	r22, 0x01	; 1
     224:	84 e8       	ldi	r24, 0x84	; 132
     226:	27 d0       	rcall	.+78     	; 0x276 <USART_Receive>
	USART_Receive(MLX_CH_EN_ADDP, LIGHT);
     228:	61 e0       	ldi	r22, 0x01	; 1
     22a:	84 ed       	ldi	r24, 0xD4	; 212
     22c:	24 d0       	rcall	.+72     	; 0x276 <USART_Receive>
void mlx_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_MLX_SS); /* CS low. */
	else
	AVR_GPIO_PORT |= _BV(DB_MLX_SS); /* CS high. */
     22e:	55 9a       	sbi	0x0a, 5	; 10
     230:	08 95       	ret

00000232 <spi_usart_setup>:
ssp_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_SSP_SS); /* CS low. */
	else
	AVR_GPIO_PORT |= _BV(DB_SSP_SS); /* CS high. */
     232:	89 2b       	or	r24, r25
     234:	09 f4       	brne	.+2      	; 0x238 <spi_usart_setup+0x6>
     236:	08 95       	ret
     238:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__EEPROM_REGION_LENGTH__+0x7f00c5>
     23c:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__EEPROM_REGION_LENGTH__+0x7f00c4>
     240:	81 ef       	ldi	r24, 0xF1	; 241
     242:	89 b9       	out	0x09, r24	; 9
     244:	83 ec       	ldi	r24, 0xC3	; 195
     246:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__EEPROM_REGION_LENGTH__+0x7f00c2>
     24a:	88 e1       	ldi	r24, 0x18	; 24
     24c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__EEPROM_REGION_LENGTH__+0x7f00c1>
     250:	88 e0       	ldi	r24, 0x08	; 8
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__EEPROM_REGION_LENGTH__+0x7f00c5>
     258:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__EEPROM_REGION_LENGTH__+0x7f00c4>
     25c:	57 9a       	sbi	0x0a, 7	; 10
     25e:	80 e0       	ldi	r24, 0x00	; 0
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	7a df       	rcall	.-268    	; 0x158 <mlx_chip_select>
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	f6 de       	rcall	.-532    	; 0x56 <adx_chip_select>
     26a:	80 e0       	ldi	r24, 0x00	; 0
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	6e cf       	rjmp	.-292    	; 0x14c <n25_chip_select>

00000270 <ssp_boot>:
     270:	57 98       	cbi	0x0a, 7	; 10
     272:	57 9a       	sbi	0x0a, 7	; 10
     274:	08 95       	ret

00000276 <USART_Receive>:
     276:	91 e0       	ldi	r25, 0x01	; 1
     278:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <usart_to>
     27c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     280:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
     284:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     288:	92 60       	ori	r25, 0x02	; 2
     28a:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     28e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     292:	95 ff       	sbrs	r25, 5
     294:	fc cf       	rjmp	.-8      	; 0x28e <USART_Receive+0x18>
     296:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
     29a:	81 e0       	ldi	r24, 0x01	; 1
     29c:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <usart_to>
     2a0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     2a4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
     2a8:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     2ac:	82 60       	ori	r24, 0x02	; 2
     2ae:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     2b2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     2b6:	87 ff       	sbrs	r24, 7
     2b8:	fc cf       	rjmp	.-8      	; 0x2b2 <USART_Receive+0x3c>
     2ba:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <usart_to>
     2be:	88 23       	and	r24, r24
     2c0:	49 f0       	breq	.+18     	; 0x2d4 <USART_Receive+0x5e>
     2c2:	64 30       	cpi	r22, 0x04	; 4
     2c4:	79 f0       	breq	.+30     	; 0x2e4 <USART_Receive+0x6e>
     2c6:	98 f0       	brcs	.+38     	; 0x2ee <USART_Receive+0x78>
     2c8:	60 31       	cpi	r22, 0x10	; 16
     2ca:	39 f0       	breq	.+14     	; 0x2da <USART_Receive+0x64>
     2cc:	60 32       	cpi	r22, 0x20	; 32
     2ce:	b1 f4       	brne	.+44     	; 0x2fc <USART_Receive+0x86>
     2d0:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <n25_fault>
     2d4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
     2d8:	08 95       	ret
     2da:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <ssp_fault>
     2de:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
     2e2:	08 95       	ret
     2e4:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <vibe_fault>
     2e8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
     2ec:	08 95       	ret
     2ee:	61 30       	cpi	r22, 0x01	; 1
     2f0:	29 f4       	brne	.+10     	; 0x2fc <USART_Receive+0x86>
     2f2:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <light_fault>
     2f6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
     2fa:	08 95       	ret
     2fc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
     300:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
     304:	08 95       	ret

00000306 <ssp_setup>:
     306:	57 98       	cbi	0x0a, 7	; 10
     308:	81 e0       	ldi	r24, 0x01	; 1
     30a:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <usart_to>
     30e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     312:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
     316:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     31a:	82 60       	ori	r24, 0x02	; 2
     31c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     320:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     324:	85 ff       	sbrs	r24, 5
     326:	fc cf       	rjmp	.-8      	; 0x320 <ssp_setup+0x1a>
     328:	80 e4       	ldi	r24, 0x40	; 64
     32a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <usart_to>
     334:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     338:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
     33c:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     340:	82 60       	ori	r24, 0x02	; 2
     342:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     346:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     34a:	87 ff       	sbrs	r24, 7
     34c:	fc cf       	rjmp	.-8      	; 0x346 <ssp_setup+0x40>
     34e:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <usart_to>
     352:	81 11       	cpse	r24, r1
     354:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <ssp_fault>
     358:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
     35c:	81 e0       	ldi	r24, 0x01	; 1
     35e:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <usart_to>
     362:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     366:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
     36a:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     36e:	82 60       	ori	r24, 0x02	; 2
     370:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     374:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     378:	85 ff       	sbrs	r24, 5
     37a:	fc cf       	rjmp	.-8      	; 0x374 <ssp_setup+0x6e>
     37c:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
     380:	81 e0       	ldi	r24, 0x01	; 1
     382:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <usart_to>
     386:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     38a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
     38e:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     392:	82 60       	ori	r24, 0x02	; 2
     394:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     398:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     39c:	87 ff       	sbrs	r24, 7
     39e:	fc cf       	rjmp	.-8      	; 0x398 <ssp_setup+0x92>
     3a0:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <usart_to>
     3a4:	81 11       	cpse	r24, r1
     3a6:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <ssp_fault>
     3aa:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
     3ae:	81 e0       	ldi	r24, 0x01	; 1
     3b0:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <usart_to>
     3b4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     3b8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
     3bc:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     3c0:	82 60       	ori	r24, 0x02	; 2
     3c2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     3c6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     3ca:	85 ff       	sbrs	r24, 5
     3cc:	fc cf       	rjmp	.-8      	; 0x3c6 <ssp_setup+0xc0>
     3ce:	81 e6       	ldi	r24, 0x61	; 97
     3d0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
     3d4:	81 e0       	ldi	r24, 0x01	; 1
     3d6:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <usart_to>
     3da:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     3de:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
     3e2:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     3e6:	82 60       	ori	r24, 0x02	; 2
     3e8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     3ec:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     3f0:	87 ff       	sbrs	r24, 7
     3f2:	fc cf       	rjmp	.-8      	; 0x3ec <ssp_setup+0xe6>
     3f4:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <usart_to>
     3f8:	81 11       	cpse	r24, r1
     3fa:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <ssp_fault>
     3fe:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
     402:	57 9a       	sbi	0x0a, 7	; 10
     404:	08 95       	ret

00000406 <ssp_int_reset>:

void
ssp_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_SSP_SS); /* CS low. */
     406:	57 98       	cbi	0x0a, 7	; 10

uint8_t
USART_Receive (uint8_t data, uint8_t source)
{
	//start timer to exit us out
	usart_to = 1;
     408:	81 e0       	ldi	r24, 0x01	; 1
     40a:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <usart_to>
	TCNT1 = 0x00;
     40e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     412:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	TIMSK1 |= (1<<OCIE1A);
     416:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     41a:	82 60       	ori	r24, 0x02	; 2
     41c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	/* wait for empty transmit buffer */
	while (!(UCSRA & (1<<UDRE))){
     420:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     424:	85 ff       	sbrs	r24, 5
     426:	fc cf       	rjmp	.-8      	; 0x420 <ssp_int_reset+0x1a>
			log_fault(source);
			break;
		}*/
	}
	/*put data into buffer, sends data */
	UDR = data;
     428:	81 e4       	ldi	r24, 0x41	; 65
     42a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
	//start timer to exit us out
	usart_to = 1;
     42e:	81 e0       	ldi	r24, 0x01	; 1
     430:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <usart_to>
	TCNT1 = 0x00;
     434:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     438:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	TIMSK1 |= (1<<OCIE1A);
     43c:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     440:	82 60       	ori	r24, 0x02	; 2
     442:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	/*wait for the data to be received */
	while (!(UCSRA & (1<<RXC))){
     446:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     44a:	87 ff       	sbrs	r24, 7
     44c:	fc cf       	rjmp	.-8      	; 0x446 <ssp_int_reset+0x40>
		/*if (!usart_to){
			log_fault(source);
			break;
		}*/
	}
	if(usart_to){
     44e:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <usart_to>
     452:	81 11       	cpse	r24, r1
		break;
		case VIBE:
		vibe_fault = 0;
		break;
		case SSP:
		ssp_fault = 0;
     454:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <ssp_fault>
		}*/
	}
	if(usart_to){
		reset_fault(source);
	}
	return UDR;
     458:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>

uint8_t
USART_Receive (uint8_t data, uint8_t source)
{
	//start timer to exit us out
	usart_to = 1;
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <usart_to>
	TCNT1 = 0x00;
     462:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     466:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	TIMSK1 |= (1<<OCIE1A);
     46a:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     46e:	82 60       	ori	r24, 0x02	; 2
     470:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	/* wait for empty transmit buffer */
	while (!(UCSRA & (1<<UDRE))){
     474:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     478:	85 ff       	sbrs	r24, 5
     47a:	fc cf       	rjmp	.-8      	; 0x474 <ssp_int_reset+0x6e>
			log_fault(source);
			break;
		}*/
	}
	/*put data into buffer, sends data */
	UDR = data;
     47c:	80 e1       	ldi	r24, 0x10	; 16
     47e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
	//start timer to exit us out
	usart_to = 1;
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <usart_to>
	TCNT1 = 0x00;
     488:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     48c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	TIMSK1 |= (1<<OCIE1A);
     490:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     494:	82 60       	ori	r24, 0x02	; 2
     496:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	/*wait for the data to be received */
	while (!(UCSRA & (1<<RXC))){
     49a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     49e:	87 ff       	sbrs	r24, 7
     4a0:	fc cf       	rjmp	.-8      	; 0x49a <ssp_int_reset+0x94>
		/*if (!usart_to){
			log_fault(source);
			break;
		}*/
	}
	if(usart_to){
     4a2:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <usart_to>
     4a6:	81 11       	cpse	r24, r1
		break;
		case VIBE:
		vibe_fault = 0;
		break;
		case SSP:
		ssp_fault = 0;
     4a8:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <ssp_fault>
		}*/
	}
	if(usart_to){
		reset_fault(source);
	}
	return UDR;
     4ac:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>

uint8_t
USART_Receive (uint8_t data, uint8_t source)
{
	//start timer to exit us out
	usart_to = 1;
     4b0:	81 e0       	ldi	r24, 0x01	; 1
     4b2:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <usart_to>
	TCNT1 = 0x00;
     4b6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     4ba:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	TIMSK1 |= (1<<OCIE1A);
     4be:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     4c2:	82 60       	ori	r24, 0x02	; 2
     4c4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	/* wait for empty transmit buffer */
	while (!(UCSRA & (1<<UDRE))){
     4c8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     4cc:	85 ff       	sbrs	r24, 5
     4ce:	fc cf       	rjmp	.-8      	; 0x4c8 <ssp_int_reset+0xc2>
			log_fault(source);
			break;
		}*/
	}
	/*put data into buffer, sends data */
	UDR = data;
     4d0:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
	//start timer to exit us out
	usart_to = 1;
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <usart_to>
	TCNT1 = 0x00;
     4da:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     4de:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	TIMSK1 |= (1<<OCIE1A);
     4e2:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     4e6:	82 60       	ori	r24, 0x02	; 2
     4e8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	/*wait for the data to be received */
	while (!(UCSRA & (1<<RXC))){
     4ec:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     4f0:	87 ff       	sbrs	r24, 7
     4f2:	fc cf       	rjmp	.-8      	; 0x4ec <ssp_int_reset+0xe6>
		/*if (!usart_to){
			log_fault(source);
			break;
		}*/
	}
	if(usart_to){
     4f4:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <usart_to>
     4f8:	81 11       	cpse	r24, r1
		break;
		case VIBE:
		vibe_fault = 0;
		break;
		case SSP:
		ssp_fault = 0;
     4fa:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <ssp_fault>
		}*/
	}
	if(usart_to){
		reset_fault(source);
	}
	return UDR;
     4fe:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
ssp_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_SSP_SS); /* CS low. */
	else
	AVR_GPIO_PORT |= _BV(DB_SSP_SS); /* CS high. */
     502:	57 9a       	sbi	0x0a, 7	; 10
     504:	08 95       	ret

00000506 <ssp_read_byte>:

void
ssp_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_SSP_SS); /* CS low. */
     506:	57 98       	cbi	0x0a, 7	; 10

uint8_t
USART_Receive (uint8_t data, uint8_t source)
{
	//start timer to exit us out
	usart_to = 1;
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <usart_to>
	TCNT1 = 0x00;
     50e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     512:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	TIMSK1 |= (1<<OCIE1A);
     516:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     51a:	82 60       	ori	r24, 0x02	; 2
     51c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	/* wait for empty transmit buffer */
	while (!(UCSRA & (1<<UDRE))){
     520:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     524:	85 ff       	sbrs	r24, 5
     526:	fc cf       	rjmp	.-8      	; 0x520 <ssp_read_byte+0x1a>
			log_fault(source);
			break;
		}*/
	}
	/*put data into buffer, sends data */
	UDR = data;
     528:	81 e4       	ldi	r24, 0x41	; 65
     52a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
	//start timer to exit us out
	usart_to = 1;
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <usart_to>
	TCNT1 = 0x00;
     534:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     538:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	TIMSK1 |= (1<<OCIE1A);
     53c:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     540:	82 60       	ori	r24, 0x02	; 2
     542:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	/*wait for the data to be received */
	while (!(UCSRA & (1<<RXC))){
     546:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     54a:	87 ff       	sbrs	r24, 7
     54c:	fc cf       	rjmp	.-8      	; 0x546 <ssp_read_byte+0x40>
		/*if (!usart_to){
			log_fault(source);
			break;
		}*/
	}
	if(usart_to){
     54e:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <usart_to>
     552:	81 11       	cpse	r24, r1
		break;
		case VIBE:
		vibe_fault = 0;
		break;
		case SSP:
		ssp_fault = 0;
     554:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <ssp_fault>
		}*/
	}
	if(usart_to){
		reset_fault(source);
	}
	return UDR;
     558:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>

uint8_t
USART_Receive (uint8_t data, uint8_t source)
{
	//start timer to exit us out
	usart_to = 1;
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <usart_to>
	TCNT1 = 0x00;
     562:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     566:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	TIMSK1 |= (1<<OCIE1A);
     56a:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     56e:	82 60       	ori	r24, 0x02	; 2
     570:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	/* wait for empty transmit buffer */
	while (!(UCSRA & (1<<UDRE))){
     574:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     578:	85 ff       	sbrs	r24, 5
     57a:	fc cf       	rjmp	.-8      	; 0x574 <ssp_read_byte+0x6e>
			log_fault(source);
			break;
		}*/
	}
	/*put data into buffer, sends data */
	UDR = data;
     57c:	8e e0       	ldi	r24, 0x0E	; 14
     57e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
	//start timer to exit us out
	usart_to = 1;
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <usart_to>
	TCNT1 = 0x00;
     588:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     58c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	TIMSK1 |= (1<<OCIE1A);
     590:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     594:	82 60       	ori	r24, 0x02	; 2
     596:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	/*wait for the data to be received */
	while (!(UCSRA & (1<<RXC))){
     59a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     59e:	87 ff       	sbrs	r24, 7
     5a0:	fc cf       	rjmp	.-8      	; 0x59a <ssp_read_byte+0x94>
		/*if (!usart_to){
			log_fault(source);
			break;
		}*/
	}
	if(usart_to){
     5a2:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <usart_to>
     5a6:	81 11       	cpse	r24, r1
		break;
		case VIBE:
		vibe_fault = 0;
		break;
		case SSP:
		ssp_fault = 0;
     5a8:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <ssp_fault>
		}*/
	}
	if(usart_to){
		reset_fault(source);
	}
	return UDR;
     5ac:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>

uint8_t
USART_Receive (uint8_t data, uint8_t source)
{
	//start timer to exit us out
	usart_to = 1;
     5b0:	81 e0       	ldi	r24, 0x01	; 1
     5b2:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <usart_to>
	TCNT1 = 0x00;
     5b6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     5ba:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	TIMSK1 |= (1<<OCIE1A);
     5be:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     5c2:	82 60       	ori	r24, 0x02	; 2
     5c4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	/* wait for empty transmit buffer */
	while (!(UCSRA & (1<<UDRE))){
     5c8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     5cc:	85 ff       	sbrs	r24, 5
     5ce:	fc cf       	rjmp	.-8      	; 0x5c8 <ssp_read_byte+0xc2>
			log_fault(source);
			break;
		}*/
	}
	/*put data into buffer, sends data */
	UDR = data;
     5d0:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
	//start timer to exit us out
	usart_to = 1;
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <usart_to>
	TCNT1 = 0x00;
     5da:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     5de:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	TIMSK1 |= (1<<OCIE1A);
     5e2:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     5e6:	82 60       	ori	r24, 0x02	; 2
     5e8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	/*wait for the data to be received */
	while (!(UCSRA & (1<<RXC))){
     5ec:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     5f0:	87 ff       	sbrs	r24, 7
     5f2:	fc cf       	rjmp	.-8      	; 0x5ec <ssp_read_byte+0xe6>
		/*if (!usart_to){
			log_fault(source);
			break;
		}*/
	}
	if(usart_to){
     5f4:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <usart_to>
     5f8:	81 11       	cpse	r24, r1
		break;
		case VIBE:
		vibe_fault = 0;
		break;
		case SSP:
		ssp_fault = 0;
     5fa:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <ssp_fault>
		}*/
	}
	if(usart_to){
		reset_fault(source);
	}
	return UDR;
     5fe:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
ssp_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_SSP_SS); /* CS low. */
	else
	AVR_GPIO_PORT |= _BV(DB_SSP_SS); /* CS high. */
     602:	57 9a       	sbi	0x0a, 7	; 10
	USART_Receive(SSP_READ, SSP);
	USART_Receive(INTFA, SSP);
	temp = USART_Receive(0x00, SSP);
	ssp_chip_select(0);
	return temp;
}
     604:	08 95       	ret

00000606 <ssp_write>:

void
ssp_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_SSP_SS); /* CS low. */
     606:	57 98       	cbi	0x0a, 7	; 10

uint8_t
USART_Receive (uint8_t data, uint8_t source)
{
	//start timer to exit us out
	usart_to = 1;
     608:	91 e0       	ldi	r25, 0x01	; 1
     60a:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <usart_to>
	TCNT1 = 0x00;
     60e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     612:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	TIMSK1 |= (1<<OCIE1A);
     616:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     61a:	92 60       	ori	r25, 0x02	; 2
     61c:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	/* wait for empty transmit buffer */
	while (!(UCSRA & (1<<UDRE))){
     620:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     624:	95 ff       	sbrs	r25, 5
     626:	fc cf       	rjmp	.-8      	; 0x620 <ssp_write+0x1a>
			log_fault(source);
			break;
		}*/
	}
	/*put data into buffer, sends data */
	UDR = data;
     628:	90 e4       	ldi	r25, 0x40	; 64
     62a:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
	//start timer to exit us out
	usart_to = 1;
     62e:	91 e0       	ldi	r25, 0x01	; 1
     630:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <usart_to>
	TCNT1 = 0x00;
     634:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     638:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	TIMSK1 |= (1<<OCIE1A);
     63c:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     640:	92 60       	ori	r25, 0x02	; 2
     642:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	/*wait for the data to be received */
	while (!(UCSRA & (1<<RXC))){
     646:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     64a:	97 ff       	sbrs	r25, 7
     64c:	fc cf       	rjmp	.-8      	; 0x646 <ssp_write+0x40>
		/*if (!usart_to){
			log_fault(source);
			break;
		}*/
	}
	if(usart_to){
     64e:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <usart_to>
     652:	91 11       	cpse	r25, r1
		break;
		case VIBE:
		vibe_fault = 0;
		break;
		case SSP:
		ssp_fault = 0;
     654:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <ssp_fault>
		}*/
	}
	if(usart_to){
		reset_fault(source);
	}
	return UDR;
     658:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>

uint8_t
USART_Receive (uint8_t data, uint8_t source)
{
	//start timer to exit us out
	usart_to = 1;
     65c:	91 e0       	ldi	r25, 0x01	; 1
     65e:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <usart_to>
	TCNT1 = 0x00;
     662:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     666:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	TIMSK1 |= (1<<OCIE1A);
     66a:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     66e:	92 60       	ori	r25, 0x02	; 2
     670:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	/* wait for empty transmit buffer */
	while (!(UCSRA & (1<<UDRE))){
     674:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     678:	95 ff       	sbrs	r25, 5
     67a:	fc cf       	rjmp	.-8      	; 0x674 <ssp_write+0x6e>
			log_fault(source);
			break;
		}*/
	}
	/*put data into buffer, sends data */
	UDR = data;
     67c:	92 e1       	ldi	r25, 0x12	; 18
     67e:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
	//start timer to exit us out
	usart_to = 1;
     682:	91 e0       	ldi	r25, 0x01	; 1
     684:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <usart_to>
	TCNT1 = 0x00;
     688:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     68c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	TIMSK1 |= (1<<OCIE1A);
     690:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     694:	92 60       	ori	r25, 0x02	; 2
     696:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	/*wait for the data to be received */
	while (!(UCSRA & (1<<RXC))){
     69a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     69e:	97 ff       	sbrs	r25, 7
     6a0:	fc cf       	rjmp	.-8      	; 0x69a <ssp_write+0x94>
		/*if (!usart_to){
			log_fault(source);
			break;
		}*/
	}
	if(usart_to){
     6a2:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <usart_to>
     6a6:	91 11       	cpse	r25, r1
		break;
		case VIBE:
		vibe_fault = 0;
		break;
		case SSP:
		ssp_fault = 0;
     6a8:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <ssp_fault>
		}*/
	}
	if(usart_to){
		reset_fault(source);
	}
	return UDR;
     6ac:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>

uint8_t
USART_Receive (uint8_t data, uint8_t source)
{
	//start timer to exit us out
	usart_to = 1;
     6b0:	91 e0       	ldi	r25, 0x01	; 1
     6b2:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <usart_to>
	TCNT1 = 0x00;
     6b6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     6ba:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	TIMSK1 |= (1<<OCIE1A);
     6be:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     6c2:	92 60       	ori	r25, 0x02	; 2
     6c4:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	/* wait for empty transmit buffer */
	while (!(UCSRA & (1<<UDRE))){
     6c8:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     6cc:	95 ff       	sbrs	r25, 5
     6ce:	fc cf       	rjmp	.-8      	; 0x6c8 <ssp_write+0xc2>
			log_fault(source);
			break;
		}*/
	}
	/*put data into buffer, sends data */
	UDR = data;
     6d0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
	//start timer to exit us out
	usart_to = 1;
     6d4:	91 e0       	ldi	r25, 0x01	; 1
     6d6:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <usart_to>
	TCNT1 = 0x00;
     6da:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     6de:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	TIMSK1 |= (1<<OCIE1A);
     6e2:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     6e6:	92 60       	ori	r25, 0x02	; 2
     6e8:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	/*wait for the data to be received */
	while (!(UCSRA & (1<<RXC))){
     6ec:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     6f0:	97 ff       	sbrs	r25, 7
     6f2:	fc cf       	rjmp	.-8      	; 0x6ec <ssp_write+0xe6>
		/*if (!usart_to){
			log_fault(source);
			break;
		}*/
	}
	if(usart_to){
     6f4:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <usart_to>
     6f8:	91 11       	cpse	r25, r1
		break;
		case VIBE:
		vibe_fault = 0;
		break;
		case SSP:
		ssp_fault = 0;
     6fa:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <ssp_fault>
		}*/
	}
	if(usart_to){
		reset_fault(source);
	}
	return UDR;
     6fe:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
ssp_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_SSP_SS); /* CS low. */
	else
	AVR_GPIO_PORT |= _BV(DB_SSP_SS); /* CS high. */
     702:	57 9a       	sbi	0x0a, 7	; 10

void
ssp_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_SSP_SS); /* CS low. */
     704:	57 98       	cbi	0x0a, 7	; 10

uint8_t
USART_Receive (uint8_t data, uint8_t source)
{
	//start timer to exit us out
	usart_to = 1;
     706:	91 e0       	ldi	r25, 0x01	; 1
     708:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <usart_to>
	TCNT1 = 0x00;
     70c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     710:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	TIMSK1 |= (1<<OCIE1A);
     714:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     718:	92 60       	ori	r25, 0x02	; 2
     71a:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	/* wait for empty transmit buffer */
	while (!(UCSRA & (1<<UDRE))){
     71e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     722:	95 ff       	sbrs	r25, 5
     724:	fc cf       	rjmp	.-8      	; 0x71e <ssp_write+0x118>
			log_fault(source);
			break;
		}*/
	}
	/*put data into buffer, sends data */
	UDR = data;
     726:	90 e4       	ldi	r25, 0x40	; 64
     728:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
	//start timer to exit us out
	usart_to = 1;
     72c:	91 e0       	ldi	r25, 0x01	; 1
     72e:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <usart_to>
	TCNT1 = 0x00;
     732:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     736:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	TIMSK1 |= (1<<OCIE1A);
     73a:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     73e:	92 60       	ori	r25, 0x02	; 2
     740:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	/*wait for the data to be received */
	while (!(UCSRA & (1<<RXC))){
     744:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     748:	97 ff       	sbrs	r25, 7
     74a:	fc cf       	rjmp	.-8      	; 0x744 <ssp_write+0x13e>
		/*if (!usart_to){
			log_fault(source);
			break;
		}*/
	}
	if(usart_to){
     74c:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <usart_to>
     750:	91 11       	cpse	r25, r1
		break;
		case VIBE:
		vibe_fault = 0;
		break;
		case SSP:
		ssp_fault = 0;
     752:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <ssp_fault>
		}*/
	}
	if(usart_to){
		reset_fault(source);
	}
	return UDR;
     756:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>

uint8_t
USART_Receive (uint8_t data, uint8_t source)
{
	//start timer to exit us out
	usart_to = 1;
     75a:	91 e0       	ldi	r25, 0x01	; 1
     75c:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <usart_to>
	TCNT1 = 0x00;
     760:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     764:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	TIMSK1 |= (1<<OCIE1A);
     768:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     76c:	92 60       	ori	r25, 0x02	; 2
     76e:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	/* wait for empty transmit buffer */
	while (!(UCSRA & (1<<UDRE))){
     772:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     776:	95 ff       	sbrs	r25, 5
     778:	fc cf       	rjmp	.-8      	; 0x772 <ssp_write+0x16c>
			log_fault(source);
			break;
		}*/
	}
	/*put data into buffer, sends data */
	UDR = data;
     77a:	94 e1       	ldi	r25, 0x14	; 20
     77c:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
	//start timer to exit us out
	usart_to = 1;
     780:	91 e0       	ldi	r25, 0x01	; 1
     782:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <usart_to>
	TCNT1 = 0x00;
     786:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     78a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	TIMSK1 |= (1<<OCIE1A);
     78e:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     792:	92 60       	ori	r25, 0x02	; 2
     794:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	/*wait for the data to be received */
	while (!(UCSRA & (1<<RXC))){
     798:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     79c:	97 ff       	sbrs	r25, 7
     79e:	fc cf       	rjmp	.-8      	; 0x798 <ssp_write+0x192>
		/*if (!usart_to){
			log_fault(source);
			break;
		}*/
	}
	if(usart_to){
     7a0:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <usart_to>
     7a4:	91 11       	cpse	r25, r1
		break;
		case VIBE:
		vibe_fault = 0;
		break;
		case SSP:
		ssp_fault = 0;
     7a6:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <ssp_fault>
		}*/
	}
	if(usart_to){
		reset_fault(source);
	}
	return UDR;
     7aa:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>

uint8_t
USART_Receive (uint8_t data, uint8_t source)
{
	//start timer to exit us out
	usart_to = 1;
     7ae:	91 e0       	ldi	r25, 0x01	; 1
     7b0:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <usart_to>
	TCNT1 = 0x00;
     7b4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     7b8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	TIMSK1 |= (1<<OCIE1A);
     7bc:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     7c0:	92 60       	ori	r25, 0x02	; 2
     7c2:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	/* wait for empty transmit buffer */
	while (!(UCSRA & (1<<UDRE))){
     7c6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     7ca:	95 ff       	sbrs	r25, 5
     7cc:	fc cf       	rjmp	.-8      	; 0x7c6 <ssp_write+0x1c0>
			log_fault(source);
			break;
		}*/
	}
	/*put data into buffer, sends data */
	UDR = data;
     7ce:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
	//start timer to exit us out
	usart_to = 1;
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <usart_to>
	TCNT1 = 0x00;
     7d8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     7dc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	TIMSK1 |= (1<<OCIE1A);
     7e0:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     7e4:	82 60       	ori	r24, 0x02	; 2
     7e6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	/*wait for the data to be received */
	while (!(UCSRA & (1<<RXC))){
     7ea:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     7ee:	87 ff       	sbrs	r24, 7
     7f0:	fc cf       	rjmp	.-8      	; 0x7ea <ssp_write+0x1e4>
		/*if (!usart_to){
			log_fault(source);
			break;
		}*/
	}
	if(usart_to){
     7f2:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <usart_to>
     7f6:	81 11       	cpse	r24, r1
		break;
		case VIBE:
		vibe_fault = 0;
		break;
		case SSP:
		ssp_fault = 0;
     7f8:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <ssp_fault>
		}*/
	}
	if(usart_to){
		reset_fault(source);
	}
	return UDR;
     7fc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
ssp_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_SSP_SS); /* CS low. */
	else
	AVR_GPIO_PORT |= _BV(DB_SSP_SS); /* CS high. */
     800:	57 9a       	sbi	0x0a, 7	; 10
     802:	08 95       	ret

00000804 <__vector_3>:
	start_bit = 1;
	sending = 1;
	TCNT0 = 0x00;						//reset counter to avoid glitch on next rcv char.
	TIMSK0 |= (1<<OCIE0A);
	while(sending);
}
     804:	1f 92       	push	r1
     806:	0f 92       	push	r0
     808:	0f b6       	in	r0, 0x3f	; 63
     80a:	0f 92       	push	r0
     80c:	11 24       	eor	r1, r1
     80e:	cf 93       	push	r28
     810:	df 93       	push	r29
     812:	00 d0       	rcall	.+0      	; 0x814 <__vector_3+0x10>
     814:	cd b7       	in	r28, 0x3d	; 61
     816:	de b7       	in	r29, 0x3e	; 62
     818:	1a 82       	std	Y+2, r1	; 0x02
     81a:	19 82       	std	Y+1, r1	; 0x01
     81c:	0f 90       	pop	r0
     81e:	0f 90       	pop	r0
     820:	df 91       	pop	r29
     822:	cf 91       	pop	r28
     824:	0f 90       	pop	r0
     826:	0f be       	out	0x3f, r0	; 63
     828:	0f 90       	pop	r0
     82a:	1f 90       	pop	r1
     82c:	18 95       	reti

0000082e <__vector_4>:
     82e:	1f 92       	push	r1
     830:	0f 92       	push	r0
     832:	0f b6       	in	r0, 0x3f	; 63
     834:	0f 92       	push	r0
     836:	11 24       	eor	r1, r1
     838:	8f 93       	push	r24
     83a:	9f 93       	push	r25
     83c:	ef 93       	push	r30
     83e:	ff 93       	push	r31
     840:	16 bc       	out	0x26, r1	; 38
     842:	ec e6       	ldi	r30, 0x6C	; 108
     844:	f0 e0       	ldi	r31, 0x00	; 0
     846:	80 81       	ld	r24, Z
     848:	87 7f       	andi	r24, 0xF7	; 247
     84a:	80 83       	st	Z, r24
     84c:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <rcv_error_stop>
     850:	81 e0       	ldi	r24, 0x01	; 1
     852:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
     856:	99 e0       	ldi	r25, 0x09	; 9
     858:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <rcv_bit_count>
     85c:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <rcv_char>
     860:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <receiving>
     864:	ee e6       	ldi	r30, 0x6E	; 110
     866:	f0 e0       	ldi	r31, 0x00	; 0
     868:	80 81       	ld	r24, Z
     86a:	82 60       	ori	r24, 0x02	; 2
     86c:	80 83       	st	Z, r24
     86e:	ff 91       	pop	r31
     870:	ef 91       	pop	r30
     872:	9f 91       	pop	r25
     874:	8f 91       	pop	r24
     876:	0f 90       	pop	r0
     878:	0f be       	out	0x3f, r0	; 63
     87a:	0f 90       	pop	r0
     87c:	1f 90       	pop	r1
     87e:	18 95       	reti

00000880 <mkm_wipe>:
     880:	13 9a       	sbi	0x02, 3	; 2
     882:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__EEPROM_REGION_LENGTH__+0x7f0064>
     886:	8b 7f       	andi	r24, 0xFB	; 251
     888:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__EEPROM_REGION_LENGTH__+0x7f0064>
     88c:	89 e0       	ldi	r24, 0x09	; 9
     88e:	8d b9       	out	0x0d, r24	; 13
     890:	48 9a       	sbi	0x09, 0	; 9
     892:	81 e5       	ldi	r24, 0x51	; 81
     894:	8c bd       	out	0x2c, r24	; 44
     896:	15 9a       	sbi	0x02, 5	; 2
     898:	17 9a       	sbi	0x02, 7	; 2
     89a:	16 98       	cbi	0x02, 6	; 2
     89c:	15 98       	cbi	0x02, 5	; 2
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	8e bd       	out	0x2e, r24	; 46
     8a2:	0d b4       	in	r0, 0x2d	; 45
     8a4:	07 fe       	sbrs	r0, 7
     8a6:	fd cf       	rjmp	.-6      	; 0x8a2 <mkm_wipe+0x22>
     8a8:	80 e4       	ldi	r24, 0x40	; 64
     8aa:	8e bd       	out	0x2e, r24	; 46
     8ac:	0d b4       	in	r0, 0x2d	; 45
     8ae:	07 fe       	sbrs	r0, 7
     8b0:	fd cf       	rjmp	.-6      	; 0x8ac <mkm_wipe+0x2c>
     8b2:	15 9a       	sbi	0x02, 5	; 2
     8b4:	15 98       	cbi	0x02, 5	; 2
     8b6:	82 e0       	ldi	r24, 0x02	; 2
     8b8:	8e bd       	out	0x2e, r24	; 46
     8ba:	0d b4       	in	r0, 0x2d	; 45
     8bc:	07 fe       	sbrs	r0, 7
     8be:	fd cf       	rjmp	.-6      	; 0x8ba <mkm_wipe+0x3a>
     8c0:	1e bc       	out	0x2e, r1	; 46
     8c2:	0d b4       	in	r0, 0x2d	; 45
     8c4:	07 fe       	sbrs	r0, 7
     8c6:	fd cf       	rjmp	.-6      	; 0x8c2 <mkm_wipe+0x42>
     8c8:	1e bc       	out	0x2e, r1	; 46
     8ca:	0d b4       	in	r0, 0x2d	; 45
     8cc:	07 fe       	sbrs	r0, 7
     8ce:	fd cf       	rjmp	.-6      	; 0x8ca <mkm_wipe+0x4a>
     8d0:	8f ef       	ldi	r24, 0xFF	; 255
     8d2:	9f e1       	ldi	r25, 0x1F	; 31
     8d4:	1e bc       	out	0x2e, r1	; 46
     8d6:	0d b4       	in	r0, 0x2d	; 45
     8d8:	07 fe       	sbrs	r0, 7
     8da:	fd cf       	rjmp	.-6      	; 0x8d6 <mkm_wipe+0x56>
     8dc:	01 97       	sbiw	r24, 0x01	; 1
     8de:	d1 f7       	brne	.-12     	; 0x8d4 <mkm_wipe+0x54>
     8e0:	15 9a       	sbi	0x02, 5	; 2
     8e2:	16 9a       	sbi	0x02, 6	; 2
     8e4:	17 98       	cbi	0x02, 7	; 2
     8e6:	8c b5       	in	r24, 0x2c	; 44
     8e8:	8f 7b       	andi	r24, 0xBF	; 191
     8ea:	8c bd       	out	0x2c, r24	; 44
     8ec:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__EEPROM_REGION_LENGTH__+0x7f0064>
     8f0:	84 60       	ori	r24, 0x04	; 4
     8f2:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__EEPROM_REGION_LENGTH__+0x7f0064>
     8f6:	13 98       	cbi	0x02, 3	; 2
     8f8:	92 b1       	in	r25, 0x02	; 2
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	98 27       	eor	r25, r24
     8fe:	92 b9       	out	0x02, r25	; 2
     900:	92 b1       	in	r25, 0x02	; 2
     902:	98 27       	eor	r25, r24
     904:	92 b9       	out	0x02, r25	; 2
     906:	92 b1       	in	r25, 0x02	; 2
     908:	98 27       	eor	r25, r24
     90a:	92 b9       	out	0x02, r25	; 2
     90c:	92 b1       	in	r25, 0x02	; 2
     90e:	98 27       	eor	r25, r24
     910:	92 b9       	out	0x02, r25	; 2
     912:	92 b1       	in	r25, 0x02	; 2
     914:	98 27       	eor	r25, r24
     916:	92 b9       	out	0x02, r25	; 2
     918:	92 b1       	in	r25, 0x02	; 2
     91a:	89 27       	eor	r24, r25
     91c:	82 b9       	out	0x02, r24	; 2
     91e:	08 95       	ret

00000920 <__vector_1>:
     920:	1f 92       	push	r1
     922:	0f 92       	push	r0
     924:	0f b6       	in	r0, 0x3f	; 63
     926:	0f 92       	push	r0
     928:	11 24       	eor	r1, r1
     92a:	2f 93       	push	r18
     92c:	3f 93       	push	r19
     92e:	4f 93       	push	r20
     930:	5f 93       	push	r21
     932:	6f 93       	push	r22
     934:	7f 93       	push	r23
     936:	8f 93       	push	r24
     938:	9f 93       	push	r25
     93a:	af 93       	push	r26
     93c:	bf 93       	push	r27
     93e:	ef 93       	push	r30
     940:	ff 93       	push	r31
     942:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <case_enable>
     946:	88 23       	and	r24, r24
     948:	21 f0       	breq	.+8      	; 0x952 <__vector_1+0x32>
     94a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <configured>
     94e:	85 35       	cpi	r24, 0x55	; 85
     950:	89 f0       	breq	.+34     	; 0x974 <__vector_1+0x54>
     952:	ff 91       	pop	r31
     954:	ef 91       	pop	r30
     956:	bf 91       	pop	r27
     958:	af 91       	pop	r26
     95a:	9f 91       	pop	r25
     95c:	8f 91       	pop	r24
     95e:	7f 91       	pop	r23
     960:	6f 91       	pop	r22
     962:	5f 91       	pop	r21
     964:	4f 91       	pop	r20
     966:	3f 91       	pop	r19
     968:	2f 91       	pop	r18
     96a:	0f 90       	pop	r0
     96c:	0f be       	out	0x3f, r0	; 63
     96e:	0f 90       	pop	r0
     970:	1f 90       	pop	r1
     972:	18 95       	reti
     974:	f8 94       	cli
     976:	84 df       	rcall	.-248    	; 0x880 <mkm_wipe>
     978:	88 e0       	ldi	r24, 0x08	; 8
     97a:	45 de       	rcall	.-886    	; 0x606 <ssp_write>
     97c:	44 dd       	rcall	.-1400   	; 0x406 <ssp_int_reset>
     97e:	17 9a       	sbi	0x02, 7	; 2
     980:	16 98       	cbi	0x02, 6	; 2
     982:	78 94       	sei
     984:	e6 cf       	rjmp	.-52     	; 0x952 <__vector_1+0x32>

00000986 <process_message>:
     986:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <rcv_char>
     98a:	81 34       	cpi	r24, 0x41	; 65
     98c:	09 f4       	brne	.+2      	; 0x990 <process_message+0xa>
     98e:	cd c2       	rjmp	.+1434   	; 0xf2a <process_message+0x5a4>
     990:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <rcv_char>
     994:	82 34       	cpi	r24, 0x42	; 66
     996:	09 f4       	brne	.+2      	; 0x99a <process_message+0x14>
     998:	9a c2       	rjmp	.+1332   	; 0xece <process_message+0x548>
     99a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <rcv_char>
     99e:	83 34       	cpi	r24, 0x43	; 67
     9a0:	09 f4       	brne	.+2      	; 0x9a4 <process_message+0x1e>
     9a2:	67 c2       	rjmp	.+1230   	; 0xe72 <process_message+0x4ec>
     9a4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <rcv_char>
     9a8:	84 34       	cpi	r24, 0x44	; 68
     9aa:	09 f4       	brne	.+2      	; 0x9ae <process_message+0x28>
     9ac:	f5 c1       	rjmp	.+1002   	; 0xd98 <process_message+0x412>
     9ae:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <rcv_char>
     9b2:	85 34       	cpi	r24, 0x45	; 69
     9b4:	09 f4       	brne	.+2      	; 0x9b8 <process_message+0x32>
     9b6:	93 c1       	rjmp	.+806    	; 0xcde <process_message+0x358>
     9b8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <rcv_char>
     9bc:	86 34       	cpi	r24, 0x46	; 70
     9be:	09 f4       	brne	.+2      	; 0x9c2 <process_message+0x3c>
     9c0:	30 c1       	rjmp	.+608    	; 0xc22 <process_message+0x29c>
     9c2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <rcv_char>
     9c6:	87 34       	cpi	r24, 0x47	; 71
     9c8:	09 f4       	brne	.+2      	; 0x9cc <process_message+0x46>
     9ca:	e6 c0       	rjmp	.+460    	; 0xb98 <process_message+0x212>
     9cc:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <rcv_char>
     9d0:	88 34       	cpi	r24, 0x48	; 72
     9d2:	09 f4       	brne	.+2      	; 0x9d6 <process_message+0x50>
     9d4:	9c c0       	rjmp	.+312    	; 0xb0e <process_message+0x188>
     9d6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <rcv_char>
     9da:	8a 34       	cpi	r24, 0x4A	; 74
     9dc:	09 f4       	brne	.+2      	; 0x9e0 <process_message+0x5a>
     9de:	7b c0       	rjmp	.+246    	; 0xad6 <process_message+0x150>
     9e0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <rcv_char>
     9e4:	8c 34       	cpi	r24, 0x4C	; 76
     9e6:	09 f1       	breq	.+66     	; 0xa2a <process_message+0xa4>
     9e8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <rcv_char>
     9ec:	8b 34       	cpi	r24, 0x4B	; 75
     9ee:	09 f0       	breq	.+2      	; 0x9f2 <process_message+0x6c>
     9f0:	08 95       	ret
     9f2:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     9f6:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <tamper_detected>
     9fa:	81 30       	cpi	r24, 0x01	; 1
     9fc:	09 f4       	brne	.+2      	; 0xa00 <process_message+0x7a>
     9fe:	00 c3       	rjmp	.+1536   	; 0x1000 <process_message+0x67a>
     a00:	84 e1       	ldi	r24, 0x14	; 20
     a02:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tx_char>
     a06:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
     a10:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sending>
     a14:	16 bc       	out	0x26, r1	; 38
     a16:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     a1a:	82 60       	ori	r24, 0x02	; 2
     a1c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     a20:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
     a24:	81 11       	cpse	r24, r1
     a26:	fc cf       	rjmp	.-8      	; 0xa20 <process_message+0x9a>
     a28:	08 95       	ret
     a2a:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     a2e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <fault_code>
     a32:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tx_char>
     a36:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
     a3a:	81 e0       	ldi	r24, 0x01	; 1
     a3c:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
     a40:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sending>
     a44:	16 bc       	out	0x26, r1	; 38
     a46:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     a4a:	82 60       	ori	r24, 0x02	; 2
     a4c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     a50:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
     a54:	81 11       	cpse	r24, r1
     a56:	fc cf       	rjmp	.-8      	; 0xa50 <process_message+0xca>
     a58:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <fault_value1>
     a5c:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tx_char>
     a60:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
     a64:	81 e0       	ldi	r24, 0x01	; 1
     a66:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
     a6a:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sending>
     a6e:	16 bc       	out	0x26, r1	; 38
     a70:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     a74:	82 60       	ori	r24, 0x02	; 2
     a76:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     a7a:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
     a7e:	81 11       	cpse	r24, r1
     a80:	fc cf       	rjmp	.-8      	; 0xa7a <process_message+0xf4>
     a82:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <fault_value2>
     a86:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tx_char>
     a8a:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
     a8e:	81 e0       	ldi	r24, 0x01	; 1
     a90:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
     a94:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sending>
     a98:	16 bc       	out	0x26, r1	; 38
     a9a:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     a9e:	82 60       	ori	r24, 0x02	; 2
     aa0:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     aa4:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
     aa8:	81 11       	cpse	r24, r1
     aaa:	fc cf       	rjmp	.-8      	; 0xaa4 <process_message+0x11e>
     aac:	84 e1       	ldi	r24, 0x14	; 20
     aae:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tx_char>
     ab2:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
     abc:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sending>
     ac0:	16 bc       	out	0x26, r1	; 38
     ac2:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     ac6:	82 60       	ori	r24, 0x02	; 2
     ac8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     acc:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
     ad0:	81 11       	cpse	r24, r1
     ad2:	fc cf       	rjmp	.-8      	; 0xacc <process_message+0x146>
     ad4:	89 cf       	rjmp	.-238    	; 0x9e8 <process_message+0x62>
     ad6:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     ada:	16 9a       	sbi	0x02, 6	; 2
     adc:	17 98       	cbi	0x02, 7	; 2
     ade:	85 e5       	ldi	r24, 0x55	; 85
     ae0:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <configured>
     ae4:	84 e1       	ldi	r24, 0x14	; 20
     ae6:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tx_char>
     aea:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
     aee:	81 e0       	ldi	r24, 0x01	; 1
     af0:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
     af4:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sending>
     af8:	16 bc       	out	0x26, r1	; 38
     afa:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     afe:	82 60       	ori	r24, 0x02	; 2
     b00:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     b04:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
     b08:	81 11       	cpse	r24, r1
     b0a:	fc cf       	rjmp	.-8      	; 0xb04 <process_message+0x17e>
     b0c:	69 cf       	rjmp	.-302    	; 0x9e0 <process_message+0x5a>
     b0e:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     b12:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <temperature>
     b16:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <temperature+0x1>
     b1a:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <tx_char>
     b1e:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
     b28:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sending>
     b2c:	16 bc       	out	0x26, r1	; 38
     b2e:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     b32:	82 60       	ori	r24, 0x02	; 2
     b34:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     b38:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
     b3c:	81 11       	cpse	r24, r1
     b3e:	fc cf       	rjmp	.-8      	; 0xb38 <process_message+0x1b2>
     b40:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <temperature>
     b44:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <temperature+0x1>
     b48:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tx_char>
     b4c:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
     b56:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sending>
     b5a:	16 bc       	out	0x26, r1	; 38
     b5c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     b60:	82 60       	ori	r24, 0x02	; 2
     b62:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     b66:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
     b6a:	81 11       	cpse	r24, r1
     b6c:	fc cf       	rjmp	.-8      	; 0xb66 <process_message+0x1e0>
     b6e:	84 e1       	ldi	r24, 0x14	; 20
     b70:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tx_char>
     b74:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
     b7e:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sending>
     b82:	16 bc       	out	0x26, r1	; 38
     b84:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     b88:	82 60       	ori	r24, 0x02	; 2
     b8a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     b8e:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
     b92:	81 11       	cpse	r24, r1
     b94:	fc cf       	rjmp	.-8      	; 0xb8e <process_message+0x208>
     b96:	1f cf       	rjmp	.-450    	; 0x9d6 <process_message+0x50>
     b98:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     b9c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <light>
     ba0:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <light+0x1>
     ba4:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <tx_char>
     ba8:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
     bb2:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sending>
     bb6:	16 bc       	out	0x26, r1	; 38
     bb8:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     bbc:	82 60       	ori	r24, 0x02	; 2
     bbe:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     bc2:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
     bc6:	81 11       	cpse	r24, r1
     bc8:	fc cf       	rjmp	.-8      	; 0xbc2 <process_message+0x23c>
     bca:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <light>
     bce:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <light+0x1>
     bd2:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tx_char>
     bd6:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
     be0:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sending>
     be4:	16 bc       	out	0x26, r1	; 38
     be6:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     bea:	82 60       	ori	r24, 0x02	; 2
     bec:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     bf0:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
     bf4:	81 11       	cpse	r24, r1
     bf6:	fc cf       	rjmp	.-8      	; 0xbf0 <process_message+0x26a>
     bf8:	84 e1       	ldi	r24, 0x14	; 20
     bfa:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tx_char>
     bfe:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
     c08:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sending>
     c0c:	16 bc       	out	0x26, r1	; 38
     c0e:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     c12:	82 60       	ori	r24, 0x02	; 2
     c14:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     c18:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
     c1c:	81 11       	cpse	r24, r1
     c1e:	fc cf       	rjmp	.-8      	; 0xc18 <process_message+0x292>
     c20:	d5 ce       	rjmp	.-598    	; 0x9cc <process_message+0x46>
     c22:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     c26:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <rcv_valid>
     c2a:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <rcv_error_stop>
     c2e:	88 23       	and	r24, r24
     c30:	b1 f1       	breq	.+108    	; 0xc9e <process_message+0x318>
     c32:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     c36:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rcv_error_stop>
     c3a:	81 30       	cpi	r24, 0x01	; 1
     c3c:	c1 f1       	breq	.+112    	; 0xcae <process_message+0x328>
     c3e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <rcv_char>
     c42:	80 95       	com	r24
     c44:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <flags>
     c48:	89 23       	and	r24, r25
     c4a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <flags>
     c4e:	80 ff       	sbrs	r24, 0
     c50:	51 c2       	rjmp	.+1186   	; 0x10f4 <process_message+0x76e>
     c52:	91 e0       	ldi	r25, 0x01	; 1
     c54:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <light_enable>
     c58:	81 ff       	sbrs	r24, 1
     c5a:	49 c2       	rjmp	.+1170   	; 0x10ee <process_message+0x768>
     c5c:	91 e0       	ldi	r25, 0x01	; 1
     c5e:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <temp_enable>
     c62:	82 ff       	sbrs	r24, 2
     c64:	41 c2       	rjmp	.+1154   	; 0x10e8 <process_message+0x762>
     c66:	91 e0       	ldi	r25, 0x01	; 1
     c68:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <vibe_enable>
     c6c:	83 fd       	sbrc	r24, 3
     c6e:	4e c2       	rjmp	.+1180   	; 0x110c <process_message+0x786>
     c70:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <case_enable>
     c74:	84 e1       	ldi	r24, 0x14	; 20
     c76:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tx_char>
     c7a:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
     c84:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sending>
     c88:	16 bc       	out	0x26, r1	; 38
     c8a:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     c8e:	82 60       	ori	r24, 0x02	; 2
     c90:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     c94:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
     c98:	81 11       	cpse	r24, r1
     c9a:	fc cf       	rjmp	.-8      	; 0xc94 <process_message+0x30e>
     c9c:	92 ce       	rjmp	.-732    	; 0x9c2 <process_message+0x3c>
     c9e:	99 23       	and	r25, r25
     ca0:	11 f2       	breq	.-124    	; 0xc26 <process_message+0x2a0>
     ca2:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     ca6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rcv_error_stop>
     caa:	81 30       	cpi	r24, 0x01	; 1
     cac:	41 f6       	brne	.-112    	; 0xc3e <process_message+0x2b8>
     cae:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <rcv_error_stop>
     cb2:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <light_status>
     cb6:	95 e1       	ldi	r25, 0x15	; 21
     cb8:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <tx_char>
     cbc:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
     cc0:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
     cc4:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sending>
     cc8:	16 bc       	out	0x26, r1	; 38
     cca:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     cce:	82 60       	ori	r24, 0x02	; 2
     cd0:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     cd4:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
     cd8:	81 11       	cpse	r24, r1
     cda:	fc cf       	rjmp	.-8      	; 0xcd4 <process_message+0x34e>
     cdc:	72 ce       	rjmp	.-796    	; 0x9c2 <process_message+0x3c>
     cde:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     ce2:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <rcv_valid>
     ce6:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <rcv_error_stop>
     cea:	88 23       	and	r24, r24
     cec:	a9 f1       	breq	.+106    	; 0xd58 <process_message+0x3d2>
     cee:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     cf2:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rcv_error_stop>
     cf6:	81 30       	cpi	r24, 0x01	; 1
     cf8:	b9 f1       	breq	.+110    	; 0xd68 <process_message+0x3e2>
     cfa:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <rcv_char>
     cfe:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <flags>
     d02:	89 2b       	or	r24, r25
     d04:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <flags>
     d08:	80 ff       	sbrs	r24, 0
     d0a:	fd c1       	rjmp	.+1018   	; 0x1106 <process_message+0x780>
     d0c:	91 e0       	ldi	r25, 0x01	; 1
     d0e:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <light_enable>
     d12:	81 ff       	sbrs	r24, 1
     d14:	f5 c1       	rjmp	.+1002   	; 0x1100 <process_message+0x77a>
     d16:	91 e0       	ldi	r25, 0x01	; 1
     d18:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <temp_enable>
     d1c:	82 ff       	sbrs	r24, 2
     d1e:	ed c1       	rjmp	.+986    	; 0x10fa <process_message+0x774>
     d20:	91 e0       	ldi	r25, 0x01	; 1
     d22:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <vibe_enable>
     d26:	83 fd       	sbrc	r24, 3
     d28:	f5 c1       	rjmp	.+1002   	; 0x1114 <process_message+0x78e>
     d2a:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <case_enable>
     d2e:	84 e1       	ldi	r24, 0x14	; 20
     d30:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tx_char>
     d34:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
     d3e:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sending>
     d42:	16 bc       	out	0x26, r1	; 38
     d44:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     d48:	82 60       	ori	r24, 0x02	; 2
     d4a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     d4e:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
     d52:	81 11       	cpse	r24, r1
     d54:	fc cf       	rjmp	.-8      	; 0xd4e <process_message+0x3c8>
     d56:	30 ce       	rjmp	.-928    	; 0x9b8 <process_message+0x32>
     d58:	99 23       	and	r25, r25
     d5a:	19 f2       	breq	.-122    	; 0xce2 <process_message+0x35c>
     d5c:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     d60:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rcv_error_stop>
     d64:	81 30       	cpi	r24, 0x01	; 1
     d66:	49 f6       	brne	.-110    	; 0xcfa <process_message+0x374>
     d68:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <rcv_error_stop>
     d6c:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <light_status>
     d70:	95 e1       	ldi	r25, 0x15	; 21
     d72:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <tx_char>
     d76:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
     d7a:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
     d7e:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sending>
     d82:	16 bc       	out	0x26, r1	; 38
     d84:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     d88:	82 60       	ori	r24, 0x02	; 2
     d8a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     d8e:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
     d92:	81 11       	cpse	r24, r1
     d94:	fc cf       	rjmp	.-8      	; 0xd8e <process_message+0x408>
     d96:	10 ce       	rjmp	.-992    	; 0x9b8 <process_message+0x32>
     d98:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <vibe_status>
     da2:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <rcv_valid>
     da6:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <rcv_error_stop>
     daa:	88 23       	and	r24, r24
     dac:	e9 f1       	breq	.+122    	; 0xe28 <process_message+0x4a2>
     dae:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <rcv_char>
     db2:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     db6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rcv_error_stop>
     dba:	81 30       	cpi	r24, 0x01	; 1
     dbc:	09 f4       	brne	.+2      	; 0xdc0 <process_message+0x43a>
     dbe:	34 c1       	rjmp	.+616    	; 0x1028 <process_message+0x6a2>
     dc0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <rcv_char>
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	38 2f       	mov	r19, r24
     dc8:	22 27       	eor	r18, r18
     dca:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <rcv_valid>
     dce:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <rcv_error_stop>
     dd2:	88 23       	and	r24, r24
     dd4:	69 f1       	breq	.+90     	; 0xe30 <process_message+0x4aa>
     dd6:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     dda:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rcv_error_stop>
     dde:	81 11       	cpse	r24, r1
     de0:	2f c0       	rjmp	.+94     	; 0xe40 <process_message+0x4ba>
     de2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <rcv_char>
     de6:	40 91 35 01 	lds	r20, 0x0135	; 0x800135 <vibe_status>
     dea:	44 23       	and	r20, r20
     dec:	09 f4       	brne	.+2      	; 0xdf0 <process_message+0x46a>
     dee:	df cd       	rjmp	.-1090   	; 0x9ae <process_message+0x28>
     df0:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <vibe_lo_thresh>
     df4:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <vibe_hi_thresh>
     df8:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <vibe_status>
     dfc:	32 d9       	rcall	.-3484   	; 0x62 <adx_setup>
     dfe:	84 e1       	ldi	r24, 0x14	; 20
     e00:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tx_char>
     e04:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
     e0e:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sending>
     e12:	16 bc       	out	0x26, r1	; 38
     e14:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     e18:	82 60       	ori	r24, 0x02	; 2
     e1a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     e1e:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
     e22:	81 11       	cpse	r24, r1
     e24:	fc cf       	rjmp	.-8      	; 0xe1e <process_message+0x498>
     e26:	c3 cd       	rjmp	.-1146   	; 0x9ae <process_message+0x28>
     e28:	99 23       	and	r25, r25
     e2a:	09 f4       	brne	.+2      	; 0xe2e <process_message+0x4a8>
     e2c:	ba cf       	rjmp	.-140    	; 0xda2 <process_message+0x41c>
     e2e:	bf cf       	rjmp	.-130    	; 0xdae <process_message+0x428>
     e30:	99 23       	and	r25, r25
     e32:	59 f2       	breq	.-106    	; 0xdca <process_message+0x444>
     e34:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     e38:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rcv_error_stop>
     e3c:	88 23       	and	r24, r24
     e3e:	89 f2       	breq	.-94     	; 0xde2 <process_message+0x45c>
     e40:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <vibe_status>
     e44:	85 e1       	ldi	r24, 0x15	; 21
     e46:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tx_char>
     e4a:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
     e54:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sending>
     e58:	16 bc       	out	0x26, r1	; 38
     e5a:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     e5e:	82 60       	ori	r24, 0x02	; 2
     e60:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     e64:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
     e68:	81 11       	cpse	r24, r1
     e6a:	fc cf       	rjmp	.-8      	; 0xe64 <process_message+0x4de>
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	ba cf       	rjmp	.-140    	; 0xde6 <process_message+0x460>
     e72:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     e76:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <rcv_valid>
     e7a:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <rcv_error_stop>
     e7e:	88 23       	and	r24, r24
     e80:	19 f1       	breq	.+70     	; 0xec8 <process_message+0x542>
     e82:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     e86:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rcv_error_stop>
     e8a:	81 30       	cpi	r24, 0x01	; 1
     e8c:	09 f4       	brne	.+2      	; 0xe90 <process_message+0x50a>
     e8e:	e4 c0       	rjmp	.+456    	; 0x1058 <process_message+0x6d2>
     e90:	84 e1       	ldi	r24, 0x14	; 20
     e92:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tx_char>
     e96:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
     ea0:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sending>
     ea4:	16 bc       	out	0x26, r1	; 38
     ea6:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     eaa:	82 60       	ori	r24, 0x02	; 2
     eac:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     eb0:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
     eb4:	81 11       	cpse	r24, r1
     eb6:	fc cf       	rjmp	.-8      	; 0xeb0 <process_message+0x52a>
     eb8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <rcv_char>
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <temp_hi_thresh+0x1>
     ec2:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <temp_hi_thresh>
     ec6:	6e cd       	rjmp	.-1316   	; 0x9a4 <process_message+0x1e>
     ec8:	99 23       	and	r25, r25
     eca:	a9 f2       	breq	.-86     	; 0xe76 <process_message+0x4f0>
     ecc:	da cf       	rjmp	.-76     	; 0xe82 <process_message+0x4fc>
     ece:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     ed2:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <rcv_valid>
     ed6:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <rcv_error_stop>
     eda:	88 23       	and	r24, r24
     edc:	19 f1       	breq	.+70     	; 0xf24 <process_message+0x59e>
     ede:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     ee2:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rcv_error_stop>
     ee6:	81 30       	cpi	r24, 0x01	; 1
     ee8:	09 f4       	brne	.+2      	; 0xeec <process_message+0x566>
     eea:	e6 c0       	rjmp	.+460    	; 0x10b8 <process_message+0x732>
     eec:	84 e1       	ldi	r24, 0x14	; 20
     eee:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tx_char>
     ef2:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
     efc:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sending>
     f00:	16 bc       	out	0x26, r1	; 38
     f02:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     f06:	82 60       	ori	r24, 0x02	; 2
     f08:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     f0c:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
     f10:	81 11       	cpse	r24, r1
     f12:	fc cf       	rjmp	.-8      	; 0xf0c <process_message+0x586>
     f14:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <rcv_char>
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <temp_hi_thresh+0x1>
     f1e:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <temp_hi_thresh>
     f22:	3b cd       	rjmp	.-1418   	; 0x99a <process_message+0x14>
     f24:	99 23       	and	r25, r25
     f26:	a9 f2       	breq	.-86     	; 0xed2 <process_message+0x54c>
     f28:	da cf       	rjmp	.-76     	; 0xede <process_message+0x558>
     f2a:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <light_status>
     f34:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <rcv_valid>
     f38:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <rcv_error_stop>
     f3c:	88 23       	and	r24, r24
     f3e:	e9 f1       	breq	.+122    	; 0xfba <process_message+0x634>
     f40:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <rcv_char>
     f44:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     f48:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rcv_error_stop>
     f4c:	81 30       	cpi	r24, 0x01	; 1
     f4e:	09 f4       	brne	.+2      	; 0xf52 <process_message+0x5cc>
     f50:	9b c0       	rjmp	.+310    	; 0x1088 <process_message+0x702>
     f52:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <rcv_char>
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	32 2f       	mov	r19, r18
     f5a:	22 27       	eor	r18, r18
     f5c:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <rcv_valid>
     f60:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <rcv_error_stop>
     f64:	88 23       	and	r24, r24
     f66:	69 f1       	breq	.+90     	; 0xfc2 <process_message+0x63c>
     f68:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     f6c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rcv_error_stop>
     f70:	81 11       	cpse	r24, r1
     f72:	2f c0       	rjmp	.+94     	; 0xfd2 <process_message+0x64c>
     f74:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <rcv_char>
     f78:	28 2b       	or	r18, r24
     f7a:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <light_status>
     f7e:	88 23       	and	r24, r24
     f80:	09 f4       	brne	.+2      	; 0xf84 <process_message+0x5fe>
     f82:	06 cd       	rjmp	.-1524   	; 0x990 <process_message+0xa>
     f84:	30 93 32 01 	sts	0x0132, r19	; 0x800132 <light_thresh+0x1>
     f88:	20 93 31 01 	sts	0x0131, r18	; 0x800131 <light_thresh>
     f8c:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <light_status>
     f90:	84 e1       	ldi	r24, 0x14	; 20
     f92:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tx_char>
     f96:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
     fa0:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sending>
     fa4:	16 bc       	out	0x26, r1	; 38
     fa6:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     faa:	82 60       	ori	r24, 0x02	; 2
     fac:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     fb0:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
     fb4:	81 11       	cpse	r24, r1
     fb6:	fc cf       	rjmp	.-8      	; 0xfb0 <process_message+0x62a>
     fb8:	eb cc       	rjmp	.-1578   	; 0x990 <process_message+0xa>
     fba:	99 23       	and	r25, r25
     fbc:	09 f4       	brne	.+2      	; 0xfc0 <process_message+0x63a>
     fbe:	ba cf       	rjmp	.-140    	; 0xf34 <process_message+0x5ae>
     fc0:	bf cf       	rjmp	.-130    	; 0xf40 <process_message+0x5ba>
     fc2:	99 23       	and	r25, r25
     fc4:	59 f2       	breq	.-106    	; 0xf5c <process_message+0x5d6>
     fc6:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     fca:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rcv_error_stop>
     fce:	88 23       	and	r24, r24
     fd0:	89 f2       	breq	.-94     	; 0xf74 <process_message+0x5ee>
     fd2:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <light_status>
     fd6:	85 e1       	ldi	r24, 0x15	; 21
     fd8:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tx_char>
     fdc:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
     fe6:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sending>
     fea:	16 bc       	out	0x26, r1	; 38
     fec:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     ff0:	82 60       	ori	r24, 0x02	; 2
     ff2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     ff6:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
     ffa:	81 11       	cpse	r24, r1
     ffc:	fc cf       	rjmp	.-8      	; 0xff6 <process_message+0x670>
     ffe:	bd cf       	rjmp	.-134    	; 0xf7a <process_message+0x5f4>
    1000:	95 e1       	ldi	r25, 0x15	; 21
    1002:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <tx_char>
    1006:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
    100a:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
    100e:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sending>
    1012:	16 bc       	out	0x26, r1	; 38
    1014:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
    1018:	82 60       	ori	r24, 0x02	; 2
    101a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
    101e:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
    1022:	81 11       	cpse	r24, r1
    1024:	fc cf       	rjmp	.-8      	; 0x101e <process_message+0x698>
    1026:	08 95       	ret
    1028:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <rcv_error_stop>
    102c:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <vibe_status>
    1030:	95 e1       	ldi	r25, 0x15	; 21
    1032:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <tx_char>
    1036:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
    103a:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
    103e:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sending>
    1042:	16 bc       	out	0x26, r1	; 38
    1044:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
    1048:	82 60       	ori	r24, 0x02	; 2
    104a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
    104e:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
    1052:	81 11       	cpse	r24, r1
    1054:	fc cf       	rjmp	.-8      	; 0x104e <process_message+0x6c8>
    1056:	b9 ce       	rjmp	.-654    	; 0xdca <process_message+0x444>
    1058:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <rcv_error_stop>
    105c:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <light_status>
    1060:	95 e1       	ldi	r25, 0x15	; 21
    1062:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <tx_char>
    1066:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
    106a:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
    106e:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sending>
    1072:	16 bc       	out	0x26, r1	; 38
    1074:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
    1078:	82 60       	ori	r24, 0x02	; 2
    107a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
    107e:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
    1082:	81 11       	cpse	r24, r1
    1084:	fc cf       	rjmp	.-8      	; 0x107e <process_message+0x6f8>
    1086:	8e cc       	rjmp	.-1764   	; 0x9a4 <process_message+0x1e>
    1088:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <rcv_error_stop>
    108c:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <light_status>
    1090:	95 e1       	ldi	r25, 0x15	; 21
    1092:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <tx_char>
    1096:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
    109a:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
    109e:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sending>
    10a2:	16 bc       	out	0x26, r1	; 38
    10a4:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
    10a8:	82 60       	ori	r24, 0x02	; 2
    10aa:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
    10ae:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
    10b2:	81 11       	cpse	r24, r1
    10b4:	fc cf       	rjmp	.-8      	; 0x10ae <process_message+0x728>
    10b6:	4f cf       	rjmp	.-354    	; 0xf56 <process_message+0x5d0>
    10b8:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <rcv_error_stop>
    10bc:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <light_status>
    10c0:	95 e1       	ldi	r25, 0x15	; 21
    10c2:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <tx_char>
    10c6:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
    10ca:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
    10ce:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sending>
    10d2:	16 bc       	out	0x26, r1	; 38
    10d4:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
    10d8:	82 60       	ori	r24, 0x02	; 2
    10da:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
    10de:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
    10e2:	81 11       	cpse	r24, r1
    10e4:	fc cf       	rjmp	.-8      	; 0x10de <process_message+0x758>
    10e6:	59 cc       	rjmp	.-1870   	; 0x99a <process_message+0x14>
    10e8:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <vibe_enable>
    10ec:	bf cd       	rjmp	.-1154   	; 0xc6c <process_message+0x2e6>
    10ee:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <temp_enable>
    10f2:	b7 cd       	rjmp	.-1170   	; 0xc62 <process_message+0x2dc>
    10f4:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <light_enable>
    10f8:	af cd       	rjmp	.-1186   	; 0xc58 <process_message+0x2d2>
    10fa:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <vibe_enable>
    10fe:	13 ce       	rjmp	.-986    	; 0xd26 <process_message+0x3a0>
    1100:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <temp_enable>
    1104:	0b ce       	rjmp	.-1002   	; 0xd1c <process_message+0x396>
    1106:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <light_enable>
    110a:	03 ce       	rjmp	.-1018   	; 0xd12 <process_message+0x38c>
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <case_enable>
    1112:	b0 cd       	rjmp	.-1184   	; 0xc74 <process_message+0x2ee>
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <case_enable>
    111a:	09 ce       	rjmp	.-1006   	; 0xd2e <process_message+0x3a8>

0000111c <check_usart_faults>:

void check_usart_faults(){
	if ((light_fault > 20)&& (light_enable||temp_enable)){  //light and temp same chip
    111c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <light_fault>
    1120:	85 31       	cpi	r24, 0x15	; 21
    1122:	78 f0       	brcs	.+30     	; 0x1142 <check_usart_faults+0x26>
    1124:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <light_enable>
    1128:	88 23       	and	r24, r24
    112a:	09 f4       	brne	.+2      	; 0x112e <check_usart_faults+0x12>
    112c:	51 c0       	rjmp	.+162    	; 0x11d0 <check_usart_faults+0xb4>
		fault_code = USART;
    112e:	80 e4       	ldi	r24, 0x40	; 64
    1130:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <fault_code>
		fault_value1 = LIGHT;
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <fault_value1>
		fault_value2 = 0x00;
    113a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <fault_value2>
		tamper_detected = 1;
    113e:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <tamper_detected>
	}
	if ((vibe_fault > 20) && vibe_enable){
    1142:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <vibe_fault>
    1146:	85 31       	cpi	r24, 0x15	; 21
    1148:	20 f0       	brcs	.+8      	; 0x1152 <check_usart_faults+0x36>
    114a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <vibe_enable>
    114e:	81 11       	cpse	r24, r1
    1150:	33 c0       	rjmp	.+102    	; 0x11b8 <check_usart_faults+0x9c>
		fault_code = USART;
		fault_value1 = VIBE;
		fault_value2 = 0x00;
		tamper_detected = 1;
	}
	if ((ssp_fault >20) && case_enable) {
    1152:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <ssp_fault>
    1156:	85 31       	cpi	r24, 0x15	; 21
    1158:	20 f0       	brcs	.+8      	; 0x1162 <check_usart_faults+0x46>
    115a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <case_enable>
    115e:	81 11       	cpse	r24, r1
    1160:	1f c0       	rjmp	.+62     	; 0x11a0 <check_usart_faults+0x84>
		fault_code = USART;
		fault_value1 = SSP;
		fault_value2 = 0x00;
		tamper_detected = 1;
	}
	if (n25_fault >20) {
    1162:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <n25_fault>
    1166:	85 31       	cpi	r24, 0x15	; 21
    1168:	58 f0       	brcs	.+22     	; 0x1180 <check_usart_faults+0x64>
		fault_code = USART;
    116a:	80 e4       	ldi	r24, 0x40	; 64
    116c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <fault_code>
		fault_value1 = N25;
    1170:	80 e2       	ldi	r24, 0x20	; 32
    1172:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <fault_value1>
		fault_value2 = 0x00;
    1176:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <fault_value2>
		tamper_detected = 1;
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <tamper_detected>
	}
	if (unk_fault >20) {
    1180:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <unk_fault>
    1184:	85 31       	cpi	r24, 0x15	; 21
    1186:	58 f0       	brcs	.+22     	; 0x119e <check_usart_faults+0x82>
		fault_code = USART;
    1188:	80 e4       	ldi	r24, 0x40	; 64
    118a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <fault_code>
		fault_value1 = UNK;
    118e:	80 e8       	ldi	r24, 0x80	; 128
    1190:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <fault_value1>
		fault_value2 = 0x00;
    1194:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <fault_value2>
		tamper_detected = 1;
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <tamper_detected>
    119e:	08 95       	ret
		fault_value1 = VIBE;
		fault_value2 = 0x00;
		tamper_detected = 1;
	}
	if ((ssp_fault >20) && case_enable) {
		fault_code = USART;
    11a0:	80 e4       	ldi	r24, 0x40	; 64
    11a2:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <fault_code>
		fault_value1 = SSP;
    11a6:	80 e1       	ldi	r24, 0x10	; 16
    11a8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <fault_value1>
		fault_value2 = 0x00;
    11ac:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <fault_value2>
		tamper_detected = 1;
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <tamper_detected>
    11b6:	d5 cf       	rjmp	.-86     	; 0x1162 <check_usart_faults+0x46>
		fault_value1 = LIGHT;
		fault_value2 = 0x00;
		tamper_detected = 1;
	}
	if ((vibe_fault > 20) && vibe_enable){
		fault_code = USART;
    11b8:	80 e4       	ldi	r24, 0x40	; 64
    11ba:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <fault_code>
		fault_value1 = VIBE;
    11be:	84 e0       	ldi	r24, 0x04	; 4
    11c0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <fault_value1>
		fault_value2 = 0x00;
    11c4:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <fault_value2>
		tamper_detected = 1;
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <tamper_detected>
    11ce:	c1 cf       	rjmp	.-126    	; 0x1152 <check_usart_faults+0x36>
	TIMSK0 |= (1<<OCIE0A);
	while(sending);
}

void check_usart_faults(){
	if ((light_fault > 20)&& (light_enable||temp_enable)){  //light and temp same chip
    11d0:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <temp_enable>
    11d4:	88 23       	and	r24, r24
    11d6:	09 f4       	brne	.+2      	; 0x11da <check_usart_faults+0xbe>
    11d8:	b4 cf       	rjmp	.-152    	; 0x1142 <check_usart_faults+0x26>
    11da:	a9 cf       	rjmp	.-174    	; 0x112e <check_usart_faults+0x12>

000011dc <main>:
}

static inline void
mkm_grab()
{
  MKM_CONTROL_FPGA_PORT |= _BV(MKM_CONTROL_FPGA_BIT);
    11dc:	17 9a       	sbi	0x02, 7	; 2
  MKM_CONTROL_AVR_PORT &= ~_BV(MKM_CONTROL_AVR_BIT);
    11de:	16 98       	cbi	0x02, 6	; 2
static inline void
init_ports()
{
  /* Configure all PORTA pins except the tamper detection pin as
     outputs. */
  DDRA = 0xff & ~_BV(AVR_PANIC_BIT);
    11e0:	8f ee       	ldi	r24, 0xEF	; 239
    11e2:	81 b9       	out	0x01, r24	; 1
  //DDRB = 0xff & ~_BV(PINB3);
  //DDRB = 0xff & ~_BV(PINB2);
	DDRB = 0xf7; //was fb
    11e4:	87 ef       	ldi	r24, 0xF7	; 247
    11e6:	85 b9       	out	0x05, r24	; 5

static void
init_interrupts()
{
  //PCICR |= _BV(PCIE0|PCIE2);    /* Enable pin change interrupt on PCMSK0 & PCMSK2*/
  PCICR = (1<<PCIE0)|(1<<PCIE1)|(1<<PCIE2);
    11e8:	87 e0       	ldi	r24, 0x07	; 7
    11ea:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__EEPROM_REGION_LENGTH__+0x7f0068>
  PCMSK0 |= _BV(PCINT4);        /* Set mask bit for PCINT4 (panic) */
    11ee:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__EEPROM_REGION_LENGTH__+0x7f006b>
    11f2:	80 61       	ori	r24, 0x10	; 16
    11f4:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__EEPROM_REGION_LENGTH__+0x7f006b>
  /*setup PC6 as tamper disable */
  //PUEC = (1<<PUEC6);			/*enable internal pull-up to avoid false triggers */ 
  PORTC |= (1<<PORTC6);
    11f8:	56 9a       	sbi	0x0a, 6	; 10
  //PCMSK2 |= _BV(PCINT22);
  /*setup PB2 as soft-UART RX*/
  //PUEB = (1<<PUEB3) | (1<<PUEB2);			/*enable internal pull-up to detect start bit */
  PUEB = (1<<PUEB3);
    11fa:	88 e0       	ldi	r24, 0x08	; 8
    11fc:	87 b9       	out	0x07, r24	; 7
  PCMSK1 |= _BV(PCINT11);
    11fe:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__EEPROM_REGION_LENGTH__+0x7f006c>
    1202:	88 60       	ori	r24, 0x08	; 8
    1204:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__EEPROM_REGION_LENGTH__+0x7f006c>
 // PCMSK1 |= _BV(PCINT10);
  sei();
    1208:	78 94       	sei
  init_power_reduction();
  init_interrupts();
  //mlx_get_calib();
  //init_tamper_values(0, 1);
	
  flags = 0xFF;
    120a:	8f ef       	ldi	r24, 0xFF	; 255
    120c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <flags>
  configured = 0;
    1210:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <configured>
  tamper_detected = 0;
    1214:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <tamper_detected>
  uint8_t ssp_status = 0;
  sending = 0;
    1218:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <sending>
  receiving = 0;
    121c:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <receiving>
  tx_char = 0;
    1220:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <tx_char>
  tx_bit_count = 0;
    1224:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
  light_fault = 0;
    1228:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <light_fault>
  vibe_fault = 0;
    122c:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <vibe_fault>
  ssp_fault = 0;
    1230:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <ssp_fault>
  n25_fault = 0;
    1234:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <n25_fault>
  unk_fault = 0;
    1238:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <unk_fault>
  PORTB |= _BV(PORTB3);   //set TX idle high
    123c:	33 9a       	sbi	0x06, 3	; 6
  wd_init = 0x01;
    123e:	c1 e0       	ldi	r28, 0x01	; 1
    1240:	c0 93 23 01 	sts	0x0123, r28	; 0x800123 <wd_init>
  ssp_out = WDOG_RS;
    1244:	80 e1       	ldi	r24, 0x10	; 16
    1246:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <ssp_out>
  PORTC |= _BV(PORTC6);
    124a:	56 9a       	sbi	0x0a, 6	; 10
  TCNT0 = 0x00;
    124c:	16 bc       	out	0x26, r1	; 38
  TCCR0A = (1<<COM0A1) | (1 << WGM01);             //CTC mode
    124e:	82 e8       	ldi	r24, 0x82	; 130
    1250:	84 bd       	out	0x24, r24	; 36
  TCCR0B = (1 << CS00);              //div1
    1252:	c5 bd       	out	0x25, r28	; 37
  OCR0A = 180;						// 208us compare value for 4800 baud
    1254:	94 eb       	ldi	r25, 0xB4	; 180
    1256:	97 bd       	out	0x27, r25	; 39
  
   TCNT1 = 0x00;
    1258:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
    125c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
   TCCR1A = (1<<COM1A1) | (1 << WGM01);             //CTC mode
    1260:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__EEPROM_REGION_LENGTH__+0x7f0080>
   TCCR1B = (1 << CS00);              //div1
    1264:	c0 93 81 00 	sts	0x0081, r28	; 0x800081 <__EEPROM_REGION_LENGTH__+0x7f0081>
   OCR1A = 2000;						// 208us compare value for 4800 baud
    1268:	80 ed       	ldi	r24, 0xD0	; 208
    126a:	97 e0       	ldi	r25, 0x07	; 7
    126c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__EEPROM_REGION_LENGTH__+0x7f0089>
    1270:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__EEPROM_REGION_LENGTH__+0x7f0088>
  spi_usart_setup(1);
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	dc d7       	rcall	.+4024   	; 0x2232 <__TEXT_REGION_LENGTH__+0x232>
  //ensure that adx is also at low power mode

  adx_wr_reg(ADX_POWER_CTL, 0x00);
  adx_rd_reg(ADX_STATUS);*/
 
  ssp_boot();
    127a:	fa d7       	rcall	.+4084   	; 0x2270 <__TEXT_REGION_LENGTH__+0x270>
  ssp_read_byte();
    127c:	44 d9       	rcall	.-3448   	; 0x506 <ssp_read_byte>
  //setup directions for ssp pins
  ssp_setup();
    127e:	43 d8       	rcall	.-3962   	; 0x306 <ssp_setup>
  //cycle the TAMP_CLR to reset the relays and turn of LEDS
  //to save power. Keep WDOG signal in high state
  ssp_write(ssp_out|0x02);
    1280:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <ssp_out>
    1284:	82 60       	ori	r24, 0x02	; 2
    1286:	bf d9       	rcall	.-3202   	; 0x606 <ssp_write>
  ssp_write(ssp_out);
    1288:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <ssp_out>
    128c:	bc d9       	rcall	.-3208   	; 0x606 <ssp_write>
  //setup the tamper monitoring input
  //ssp_int_config();
 uint8_t check =  ssp_read_byte();
    128e:	3b d9       	rcall	.-3466   	; 0x506 <ssp_read_byte>
  //init_int0();
  //mlx_sleep();
  // do not need to configure these for tamper switch only 
  adx_setup();
    1290:	e8 d6       	rcall	.+3536   	; 0x2062 <__TEXT_REGION_LENGTH__+0x62>
  mlx_setup();
    1292:	c3 d7       	rcall	.+3974   	; 0x221a <__TEXT_REGION_LENGTH__+0x21a>
  mlx_setup();
    1294:	c2 d7       	rcall	.+3972   	; 0x221a <__TEXT_REGION_LENGTH__+0x21a>
  mlx_start_meas();
    1296:	66 d7       	rcall	.+3788   	; 0x2164 <__TEXT_REGION_LENGTH__+0x164>
  mlx_start_meas();
    1298:	65 d7       	rcall	.+3786   	; 0x2164 <__TEXT_REGION_LENGTH__+0x164>
  mlx_start_meas();
    129a:	64 d7       	rcall	.+3784   	; 0x2164 <__TEXT_REGION_LENGTH__+0x164>
}

static inline void
mkm_release()
{
  MKM_CONTROL_AVR_PORT |= _BV(MKM_CONTROL_AVR_BIT);
    129c:	16 9a       	sbi	0x02, 6	; 2
  MKM_CONTROL_FPGA_PORT &= ~_BV(MKM_CONTROL_FPGA_BIT);
    129e:	17 98       	cbi	0x02, 7	; 2
  
  //initTimer1(TWD_INIT);
  
  mkm_release();
  /* Flash LED's at startup. */
  AVR_LED_PORT |= 0x0f;
    12a0:	82 b1       	in	r24, 0x02	; 2
    12a2:	8f 60       	ori	r24, 0x0F	; 15
    12a4:	82 b9       	out	0x02, r24	; 2
  for (int i = 0; i < 16000; i++);
  AVR_LED_PORT &= ~0x0f;
    12a6:	82 b1       	in	r24, 0x02	; 2
    12a8:	80 7f       	andi	r24, 0xF0	; 240
    12aa:	82 b9       	out	0x02, r24	; 2
  // go to sleep, interrupt will wake us
  //sleep();
  temperature = 80;
    12ac:	80 e5       	ldi	r24, 0x50	; 80
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <temperature+0x1>
    12b4:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <temperature>
  light = 0xaa55;
    12b8:	85 e5       	ldi	r24, 0x55	; 85
    12ba:	9a ea       	ldi	r25, 0xAA	; 170
    12bc:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <light+0x1>
    12c0:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <light>
init_int0()
{
	//this has to be done after the SPI expander has been set up for the proper levels
	//
	/*lets use the INT0 pin as triggered form the SPI expander low level */
	EICRA = 0x00;   /* insure that we are interrupting on low-level */
    12c4:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__EEPROM_REGION_LENGTH__+0x7f0069>
	EIMSK = 0x01;		/*enable INT0 */
    12c8:	cd bb       	out	0x1d, r28	; 29
  // go to sleep, interrupt will wake us
  //sleep();
  temperature = 80;
  light = 0xaa55;
  init_int0();
  rcv_valid = 0;
    12ca:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
  sei();
    12ce:	78 94       	sei
			//if ((ssp_status && LOW_VOLT)|(ssp_status && BATT_ON)) {
				//mkm_wipe();
			//}
			//read accelerometer 
			if ((adx_read_status() & ADX_ACT) && (vibe_enable)){
				fault_code = VIBE;
    12d0:	14 e0       	ldi	r17, 0x04	; 4
			mlx_start_meas();
			mlx_get_meas();
			//if temp is out side normal storage or sensor is exposed to bright light
			//actual values 1TBD 
			if ((((temperature > temp_hi_thresh) | (temperature < temp_lo_thresh)) && temp_enable) ){
				fault_code = TEMP;
    12d2:	d2 e0       	ldi	r29, 0x02	; 2
    12d4:	04 c0       	rjmp	.+8      	; 0x12de <main+0x102>
			rcv_valid = 0;
			start_bit = 1;
			process_message();
		}
		
		if (configured == 0x55) {
    12d6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <configured>
    12da:	85 35       	cpi	r24, 0x55	; 85
    12dc:	69 f0       	breq	.+26     	; 0x12f8 <main+0x11c>
  sei();
  while (1)
    {
		//n25_read(0x00, 0x00, 0x00, 8);
		//read in character and echo back
		if (rcv_valid == 1){
    12de:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <rcv_valid>
    12e2:	81 30       	cpi	r24, 0x01	; 1
    12e4:	c1 f7       	brne	.-16     	; 0x12d6 <main+0xfa>
			rcv_valid = 0;
    12e6:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
			start_bit = 1;
    12ea:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
			process_message();
    12ee:	4b db       	rcall	.-2410   	; 0x986 <process_message>
		}
		
		if (configured == 0x55) {
    12f0:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <configured>
    12f4:	85 35       	cpi	r24, 0x55	; 85
    12f6:	99 f7       	brne	.-26     	; 0x12de <main+0x102>
			check_usart_faults();
    12f8:	11 df       	rcall	.-478    	; 0x111c <check_usart_faults>
			//ssp_status = ssp_read_byte();
			//if ((ssp_status && LOW_VOLT)|(ssp_status && BATT_ON)) {
				//mkm_wipe();
			//}
			//read accelerometer 
			if ((adx_read_status() & ADX_ACT) && (vibe_enable)){
    12fa:	1c d7       	rcall	.+3640   	; 0x2134 <__TEXT_REGION_LENGTH__+0x134>
    12fc:	84 ff       	sbrs	r24, 4
    12fe:	04 c0       	rjmp	.+8      	; 0x1308 <main+0x12c>
    1300:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <vibe_enable>
    1304:	81 11       	cpse	r24, r1
    1306:	54 c0       	rjmp	.+168    	; 0x13b0 <main+0x1d4>
				fault_code = VIBE;
				mkm_wipe();
			}
			//}
			//read light and temp
			mlx_start_meas();
    1308:	2d d7       	rcall	.+3674   	; 0x2164 <__TEXT_REGION_LENGTH__+0x164>
			mlx_get_meas();
    130a:	35 d7       	rcall	.+3690   	; 0x2176 <__TEXT_REGION_LENGTH__+0x176>
			//if temp is out side normal storage or sensor is exposed to bright light
			//actual values 1TBD 
			if ((((temperature > temp_hi_thresh) | (temperature < temp_lo_thresh)) && temp_enable) ){
    130c:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <temperature>
    1310:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <temperature+0x1>
    1314:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <temp_hi_thresh>
    1318:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <temp_hi_thresh+0x1>
    131c:	60 91 19 01 	lds	r22, 0x0119	; 0x800119 <temperature>
    1320:	70 91 1a 01 	lds	r23, 0x011A	; 0x80011a <temperature+0x1>
    1324:	40 91 39 01 	lds	r20, 0x0139	; 0x800139 <temp_lo_thresh>
    1328:	50 91 3a 01 	lds	r21, 0x013A	; 0x80013a <temp_lo_thresh+0x1>
    132c:	82 17       	cp	r24, r18
    132e:	93 07       	cpc	r25, r19
    1330:	44 f5       	brge	.+80     	; 0x1382 <main+0x1a6>
    1332:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <temp_enable>
    1336:	81 11       	cpse	r24, r1
    1338:	2b c0       	rjmp	.+86     	; 0x1390 <main+0x1b4>
				fault_code = TEMP;
				fault_value1 = ((uint8_t) temperature>>8);
				fault_value2 = ((uint8_t) temperature&0xFF);
				mkm_wipe();
			}
			if((light > light_thresh) && light_enable ) {
    133a:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <light>
    133e:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <light+0x1>
    1342:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <light_thresh>
    1346:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <light_thresh+0x1>
    134a:	82 17       	cp	r24, r18
    134c:	93 07       	cpc	r25, r19
    134e:	38 f6       	brcc	.-114    	; 0x12de <main+0x102>
    1350:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <light_enable>
    1354:	88 23       	and	r24, r24
    1356:	19 f2       	breq	.-122    	; 0x12de <main+0x102>
				fault_code = LIGHT;
    1358:	c0 93 07 01 	sts	0x0107, r28	; 0x800107 <fault_code>
				fault_value1 = ((uint8_t) light>8);
    135c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <light>
    1360:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <light+0x1>
    1364:	99 27       	eor	r25, r25
    1366:	21 e0       	ldi	r18, 0x01	; 1
    1368:	09 97       	sbiw	r24, 0x09	; 9
    136a:	0c f4       	brge	.+2      	; 0x136e <main+0x192>
    136c:	20 e0       	ldi	r18, 0x00	; 0
    136e:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <fault_value1>
				fault_value2 = ((uint8_t) light&0xFF);
    1372:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <light>
    1376:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <light+0x1>
    137a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <fault_value2>
				mkm_wipe();
    137e:	80 da       	rcall	.-2816   	; 0x880 <mkm_wipe>
    1380:	ae cf       	rjmp	.-164    	; 0x12de <main+0x102>
			//read light and temp
			mlx_start_meas();
			mlx_get_meas();
			//if temp is out side normal storage or sensor is exposed to bright light
			//actual values 1TBD 
			if ((((temperature > temp_hi_thresh) | (temperature < temp_lo_thresh)) && temp_enable) ){
    1382:	64 17       	cp	r22, r20
    1384:	75 07       	cpc	r23, r21
    1386:	cc f6       	brge	.-78     	; 0x133a <main+0x15e>
    1388:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <temp_enable>
    138c:	88 23       	and	r24, r24
    138e:	a9 f2       	breq	.-86     	; 0x133a <main+0x15e>
				fault_code = TEMP;
    1390:	d0 93 07 01 	sts	0x0107, r29	; 0x800107 <fault_code>
				fault_value1 = ((uint8_t) temperature>>8);
    1394:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <temperature>
    1398:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <temperature+0x1>
    139c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <fault_value1>
				fault_value2 = ((uint8_t) temperature&0xFF);
    13a0:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <temperature>
    13a4:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <temperature+0x1>
    13a8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <fault_value2>
				mkm_wipe();
    13ac:	69 da       	rcall	.-2862   	; 0x880 <mkm_wipe>
    13ae:	c5 cf       	rjmp	.-118    	; 0x133a <main+0x15e>
			//if ((ssp_status && LOW_VOLT)|(ssp_status && BATT_ON)) {
				//mkm_wipe();
			//}
			//read accelerometer 
			if ((adx_read_status() & ADX_ACT) && (vibe_enable)){
				fault_code = VIBE;
    13b0:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <fault_code>
				mkm_wipe();
    13b4:	65 da       	rcall	.-2870   	; 0x880 <mkm_wipe>
    13b6:	a8 cf       	rjmp	.-176    	; 0x1308 <main+0x12c>

000013b8 <__vector_12>:
}


//soft-uart timer
ISR (TIMER0_COMPA_vect)
{
    13b8:	1f 92       	push	r1
    13ba:	0f 92       	push	r0
    13bc:	0f b6       	in	r0, 0x3f	; 63
    13be:	0f 92       	push	r0
    13c0:	11 24       	eor	r1, r1
    13c2:	2f 93       	push	r18
    13c4:	3f 93       	push	r19
    13c6:	4f 93       	push	r20
    13c8:	5f 93       	push	r21
    13ca:	8f 93       	push	r24
    13cc:	9f 93       	push	r25
	/*disable interrupts, should we or allow NMI of tamper switch detect? */
	//cli();
	//sei();
	TCNT0 = 0x00;
    13ce:	16 bc       	out	0x26, r1	; 38
	int i;
	PORTC ^= _BV(PORTC6);		//toggle gp6 to check on progress
    13d0:	9a b1       	in	r25, 0x0a	; 10
    13d2:	80 e4       	ldi	r24, 0x40	; 64
    13d4:	89 27       	eor	r24, r25
    13d6:	8a b9       	out	0x0a, r24	; 10
	if (receiving) {
    13d8:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <receiving>
    13dc:	88 23       	and	r24, r24
    13de:	49 f0       	breq	.+18     	; 0x13f2 <__vector_12+0x3a>
		if (start_bit)	{
    13e0:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <start_bit>
    13e4:	88 23       	and	r24, r24
    13e6:	79 f1       	breq	.+94     	; 0x1446 <__vector_12+0x8e>
			start_bit--;
    13e8:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <start_bit>
    13ec:	81 50       	subi	r24, 0x01	; 1
    13ee:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
				//return;
			}
			rcv_bit_count--;
		}
	}
	if (sending){
    13f2:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
    13f6:	88 23       	and	r24, r24
    13f8:	d9 f0       	breq	.+54     	; 0x1430 <__vector_12+0x78>
		if (start_bit == 1)	{
    13fa:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <start_bit>
    13fe:	81 30       	cpi	r24, 0x01	; 1
    1400:	09 f4       	brne	.+2      	; 0x1404 <__vector_12+0x4c>
    1402:	54 c0       	rjmp	.+168    	; 0x14ac <__vector_12+0xf4>
			start_bit = 0;
			PORTB &= ~_BV(PORTB2);  //PORTB3 to PORTB2
		}
		else {
			if (tx_bit_count<8){
    1404:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <tx_bit_count>
    1408:	88 30       	cpi	r24, 0x08	; 8
    140a:	d8 f5       	brcc	.+118    	; 0x1482 <__vector_12+0xca>
				if (tx_char & (1<<tx_bit_count)){  //check the bit sending LSB first
    140c:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <tx_char>
    1410:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <tx_bit_count>
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	02 c0       	rjmp	.+4      	; 0x141c <__vector_12+0x64>
    1418:	95 95       	asr	r25
    141a:	87 95       	ror	r24
    141c:	2a 95       	dec	r18
    141e:	e2 f7       	brpl	.-8      	; 0x1418 <__vector_12+0x60>
    1420:	80 ff       	sbrs	r24, 0
    1422:	3d c0       	rjmp	.+122    	; 0x149e <__vector_12+0xe6>
					PORTB |= _BV(PORTB2);
    1424:	32 9a       	sbi	0x06, 2	; 6
				PORTB |= _BV(PORTB2);        //send stop bit
				TIMSK0 &= ~(1<<OCIE0A);		//stop the bit timer
				sending = 0;
				PORTC |= _BV(PORTC6);
			}
			tx_bit_count++;
    1426:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <tx_bit_count>
    142a:	8f 5f       	subi	r24, 0xFF	; 255
    142c:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <tx_bit_count>
		
	}
	//
	//sei();
	
}
    1430:	9f 91       	pop	r25
    1432:	8f 91       	pop	r24
    1434:	5f 91       	pop	r21
    1436:	4f 91       	pop	r20
    1438:	3f 91       	pop	r19
    143a:	2f 91       	pop	r18
    143c:	0f 90       	pop	r0
    143e:	0f be       	out	0x3f, r0	; 63
    1440:	0f 90       	pop	r0
    1442:	1f 90       	pop	r1
    1444:	18 95       	reti
		if (start_bit)	{
			start_bit--;
			//skip first bit
		}
		else {	
			if (rcv_bit_count-1 > 0) {     //looking for data) 
    1446:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <rcv_bit_count>
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	02 97       	sbiw	r24, 0x02	; 2
    144e:	94 f1       	brlt	.+100    	; 0x14b4 <__vector_12+0xfc>
				rcv_char |= ((PINB & (1<<3))>>3)<<(9-rcv_bit_count);  //from (1<<2) to (1<<3)
    1450:	84 b1       	in	r24, 0x04	; 4
    1452:	50 91 27 01 	lds	r21, 0x0127	; 0x800127 <rcv_bit_count>
    1456:	40 91 20 01 	lds	r20, 0x0120	; 0x800120 <rcv_char>
    145a:	83 fb       	bst	r24, 3
    145c:	22 27       	eor	r18, r18
    145e:	20 f9       	bld	r18, 0
    1460:	89 e0       	ldi	r24, 0x09	; 9
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	85 1b       	sub	r24, r21
    1466:	91 09       	sbc	r25, r1
    1468:	01 c0       	rjmp	.+2      	; 0x146c <__vector_12+0xb4>
    146a:	22 0f       	add	r18, r18
    146c:	8a 95       	dec	r24
    146e:	ea f7       	brpl	.-6      	; 0x146a <__vector_12+0xb2>
    1470:	24 2b       	or	r18, r20
    1472:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <rcv_char>
				//PCICR |= _BV(PCIE1);
				PORTC |= _BV(PORTC6);
				receiving = 0;
				//return;
			}
			rcv_bit_count--;
    1476:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <rcv_bit_count>
    147a:	81 50       	subi	r24, 0x01	; 1
    147c:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <rcv_bit_count>
    1480:	b8 cf       	rjmp	.-144    	; 0x13f2 <__vector_12+0x3a>
				}
				else{
					PORTB &= ~_BV(PORTB2);
				}
			}
			else if (tx_bit_count == 8){
    1482:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <tx_bit_count>
    1486:	88 30       	cpi	r24, 0x08	; 8
    1488:	71 f6       	brne	.-100    	; 0x1426 <__vector_12+0x6e>
				PORTB |= _BV(PORTB2);        //send stop bit
    148a:	32 9a       	sbi	0x06, 2	; 6
				TIMSK0 &= ~(1<<OCIE0A);		//stop the bit timer
    148c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
    1490:	8d 7f       	andi	r24, 0xFD	; 253
    1492:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
				sending = 0;
    1496:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <sending>
				PORTC |= _BV(PORTC6);
    149a:	56 9a       	sbi	0x0a, 6	; 10
    149c:	c4 cf       	rjmp	.-120    	; 0x1426 <__vector_12+0x6e>
			if (tx_bit_count<8){
				if (tx_char & (1<<tx_bit_count)){  //check the bit sending LSB first
					PORTB |= _BV(PORTB2);
				}
				else{
					PORTB &= ~_BV(PORTB2);
    149e:	32 98       	cbi	0x06, 2	; 6
				PORTB |= _BV(PORTB2);        //send stop bit
				TIMSK0 &= ~(1<<OCIE0A);		//stop the bit timer
				sending = 0;
				PORTC |= _BV(PORTC6);
			}
			tx_bit_count++;
    14a0:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <tx_bit_count>
    14a4:	8f 5f       	subi	r24, 0xFF	; 255
    14a6:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <tx_bit_count>
    14aa:	c2 cf       	rjmp	.-124    	; 0x1430 <__vector_12+0x78>
			rcv_bit_count--;
		}
	}
	if (sending){
		if (start_bit == 1)	{
			start_bit = 0;
    14ac:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <start_bit>
			PORTB &= ~_BV(PORTB2);  //PORTB3 to PORTB2
    14b0:	32 98       	cbi	0x06, 2	; 6
    14b2:	be cf       	rjmp	.-132    	; 0x1430 <__vector_12+0x78>
		else {	
			if (rcv_bit_count-1 > 0) {     //looking for data) 
				rcv_char |= ((PINB & (1<<3))>>3)<<(9-rcv_bit_count);  //from (1<<2) to (1<<3)
				//rcv[9-rcv_bit_count] = (PINB & (1<<3))>>3;
			}
			else if (rcv_bit_count == 0) {  //looking for stop bit
    14b4:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <rcv_bit_count>
    14b8:	81 11       	cpse	r24, r1
    14ba:	dd cf       	rjmp	.-70     	; 0x1476 <__vector_12+0xbe>
				if (PINB & (1<<PINB3)) {    //PINB2 to PINB3
					rcv_valid = 1;
    14bc:	81 e0       	ldi	r24, 0x01	; 1
			if (rcv_bit_count-1 > 0) {     //looking for data) 
				rcv_char |= ((PINB & (1<<3))>>3)<<(9-rcv_bit_count);  //from (1<<2) to (1<<3)
				//rcv[9-rcv_bit_count] = (PINB & (1<<3))>>3;
			}
			else if (rcv_bit_count == 0) {  //looking for stop bit
				if (PINB & (1<<PINB3)) {    //PINB2 to PINB3
    14be:	23 9b       	sbis	0x04, 3	; 4
    14c0:	14 c0       	rjmp	.+40     	; 0x14ea <__vector_12+0x132>
					rcv_valid = 1;
    14c2:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <rcv_valid>
					AVR_LED_PORT ^= _BV(AVR_LED_RED_BIT);
    14c6:	92 b1       	in	r25, 0x02	; 2
    14c8:	88 e0       	ldi	r24, 0x08	; 8
    14ca:	89 27       	eor	r24, r25
    14cc:	82 b9       	out	0x02, r24	; 2
				}
				else {
					rcv_error_stop = 1;
				}
				TIMSK0 &= ~(1<<OCIE0A);		//stop the bit timer
    14ce:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
    14d2:	8d 7f       	andi	r24, 0xFD	; 253
    14d4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
				PCMSK1 |= _BV(PCINT11);		//enable start bit detect INT10 to INT11
    14d8:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__EEPROM_REGION_LENGTH__+0x7f006c>
    14dc:	88 60       	ori	r24, 0x08	; 8
    14de:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__EEPROM_REGION_LENGTH__+0x7f006c>
				//PCICR |= _BV(PCIE1);
				PORTC |= _BV(PORTC6);
    14e2:	56 9a       	sbi	0x0a, 6	; 10
				receiving = 0;
    14e4:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <receiving>
    14e8:	c6 cf       	rjmp	.-116    	; 0x1476 <__vector_12+0xbe>
				if (PINB & (1<<PINB3)) {    //PINB2 to PINB3
					rcv_valid = 1;
					AVR_LED_PORT ^= _BV(AVR_LED_RED_BIT);
				}
				else {
					rcv_error_stop = 1;
    14ea:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <rcv_error_stop>
    14ee:	ef cf       	rjmp	.-34     	; 0x14ce <__vector_12+0x116>

000014f0 <__vector_9>:
	//sei();
	
}

ISR (TIMER1_COMPA_vect)
{
    14f0:	1f 92       	push	r1
    14f2:	0f 92       	push	r0
    14f4:	0f b6       	in	r0, 0x3f	; 63
    14f6:	0f 92       	push	r0
    14f8:	11 24       	eor	r1, r1
    14fa:	8f 93       	push	r24
    14fc:	ef 93       	push	r30
    14fe:	ff 93       	push	r31
	/*disable interrupts, should we or allow NMI of tamper switch detect? */
	//cli();
	//sei();
	TCNT1 = 0x00;
    1500:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
    1504:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	int i;
	//PORTC ^= _BV(PORTC6);		//toggle gp6 to check on progress
	TIMSK1 &= ~(1<<OCIE1A);		//stop the  timer
    1508:	ef e6       	ldi	r30, 0x6F	; 111
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	8d 7f       	andi	r24, 0xFD	; 253
    1510:	80 83       	st	Z, r24
	usart_to = 0;
    1512:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <usart_to>
	
    1516:	ff 91       	pop	r31
    1518:	ef 91       	pop	r30
    151a:	8f 91       	pop	r24
    151c:	0f 90       	pop	r0
    151e:	0f be       	out	0x3f, r0	; 63
    1520:	0f 90       	pop	r0
    1522:	1f 90       	pop	r1
    1524:	18 95       	reti

00001526 <__divmodhi4>:
    1526:	97 fb       	bst	r25, 7
    1528:	07 2e       	mov	r0, r23
    152a:	16 f4       	brtc	.+4      	; 0x1530 <__divmodhi4+0xa>
    152c:	00 94       	com	r0
    152e:	06 d0       	rcall	.+12     	; 0x153c <__divmodhi4_neg1>
    1530:	77 fd       	sbrc	r23, 7
    1532:	08 d0       	rcall	.+16     	; 0x1544 <__divmodhi4_neg2>
    1534:	0b d0       	rcall	.+22     	; 0x154c <__udivmodhi4>
    1536:	07 fc       	sbrc	r0, 7
    1538:	05 d0       	rcall	.+10     	; 0x1544 <__divmodhi4_neg2>
    153a:	3e f4       	brtc	.+14     	; 0x154a <__divmodhi4_exit>

0000153c <__divmodhi4_neg1>:
    153c:	90 95       	com	r25
    153e:	81 95       	neg	r24
    1540:	9f 4f       	sbci	r25, 0xFF	; 255
    1542:	08 95       	ret

00001544 <__divmodhi4_neg2>:
    1544:	70 95       	com	r23
    1546:	61 95       	neg	r22
    1548:	7f 4f       	sbci	r23, 0xFF	; 255

0000154a <__divmodhi4_exit>:
    154a:	08 95       	ret

0000154c <__udivmodhi4>:
    154c:	aa 1b       	sub	r26, r26
    154e:	bb 1b       	sub	r27, r27
    1550:	51 e1       	ldi	r21, 0x11	; 17
    1552:	07 c0       	rjmp	.+14     	; 0x1562 <__udivmodhi4_ep>

00001554 <__udivmodhi4_loop>:
    1554:	aa 1f       	adc	r26, r26
    1556:	bb 1f       	adc	r27, r27
    1558:	a6 17       	cp	r26, r22
    155a:	b7 07       	cpc	r27, r23
    155c:	10 f0       	brcs	.+4      	; 0x1562 <__udivmodhi4_ep>
    155e:	a6 1b       	sub	r26, r22
    1560:	b7 0b       	sbc	r27, r23

00001562 <__udivmodhi4_ep>:
    1562:	88 1f       	adc	r24, r24
    1564:	99 1f       	adc	r25, r25
    1566:	5a 95       	dec	r21
    1568:	a9 f7       	brne	.-22     	; 0x1554 <__udivmodhi4_loop>
    156a:	80 95       	com	r24
    156c:	90 95       	com	r25
    156e:	bc 01       	movw	r22, r24
    1570:	cd 01       	movw	r24, r26
    1572:	08 95       	ret

00001574 <_exit>:
    1574:	f8 94       	cli

00001576 <__stop_program>:
    1576:	ff cf       	rjmp	.-2      	; 0x1576 <__stop_program>
