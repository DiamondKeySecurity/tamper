
Sensor_board.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001630  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003b  00800100  00800100  00001630  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001630  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001660  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  0000169c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004cc1  00000000  00000000  00001884  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010f5  00000000  00000000  00006545  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002681  00000000  00000000  0000763a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000444  00000000  00000000  00009cbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000905  00000000  00000000  0000a100  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001db6  00000000  00000000  0000aa05  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000258  00000000  00000000  0000c7bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
       2:	97 c4       	rjmp	.+2350   	; 0x932 <__vector_1>
       4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
       6:	07 c4       	rjmp	.+2062   	; 0x816 <__vector_3>
       8:	1b c4       	rjmp	.+2102   	; 0x840 <__vector_4>
       a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
       c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
       e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
      10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
      12:	90 ca       	rjmp	.-2784   	; 0xfffff534 <__eeprom_end+0xff7ef534>
      14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
      16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
      18:	f1 c9       	rjmp	.-3102   	; 0xfffff3fc <__eeprom_end+0xff7ef3fc>
      1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
      1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
      1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
      20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
      22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
      24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
      26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
      28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
      2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
      2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
      2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
      30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
      32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
      34:	11 24       	eor	r1, r1
      36:	1f be       	out	0x3f, r1	; 63
      38:	cf ef       	ldi	r28, 0xFF	; 255
      3a:	d2 e0       	ldi	r29, 0x02	; 2
      3c:	de bf       	out	0x3e, r29	; 62
      3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
      40:	21 e0       	ldi	r18, 0x01	; 1
      42:	a0 e0       	ldi	r26, 0x00	; 0
      44:	b1 e0       	ldi	r27, 0x01	; 1
      46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
      48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
      4a:	ab 33       	cpi	r26, 0x3B	; 59
      4c:	b2 07       	cpc	r27, r18
      4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
      50:	d3 d8       	rcall	.-3674   	; 0xfffff1f8 <__eeprom_end+0xff7ef1f8>
      52:	b2 ca       	rjmp	.-2716   	; 0xfffff5b8 <__eeprom_end+0xff7ef5b8>

00000054 <__bad_interrupt>:
      54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <adx_chip_select>:
	USART_Receive(ADX_RD, VIBE);
	USART_Receive(reg, VIBE);  //device id address 0x00
	temp = USART_Receive(0x00, VIBE);
	adx_chip_select(0);
	return temp;
}
      56:	89 2b       	or	r24, r25
      58:	11 f4       	brne	.+4      	; 0x5e <adx_chip_select+0x8>
      5a:	54 9a       	sbi	0x0a, 4	; 10
      5c:	08 95       	ret
      5e:	54 98       	cbi	0x0a, 4	; 10
      60:	08 95       	ret

00000062 <adx_setup>:
      62:	cf 93       	push	r28
      64:	c0 91 1e 01 	lds	r28, 0x011E	; 0x80011e <vibe_lo_thresh>
      68:	54 98       	cbi	0x0a, 4	; 10
      6a:	64 e0       	ldi	r22, 0x04	; 4
      6c:	8a e0       	ldi	r24, 0x0A	; 10
      6e:	0c d1       	rcall	.+536    	; 0x288 <USART_Receive>
      70:	64 e0       	ldi	r22, 0x04	; 4
      72:	80 e2       	ldi	r24, 0x20	; 32
      74:	09 d1       	rcall	.+530    	; 0x288 <USART_Receive>
      76:	64 e0       	ldi	r22, 0x04	; 4
      78:	8c 2f       	mov	r24, r28
      7a:	06 d1       	rcall	.+524    	; 0x288 <USART_Receive>
      7c:	64 e0       	ldi	r22, 0x04	; 4
      7e:	80 e0       	ldi	r24, 0x00	; 0
      80:	03 d1       	rcall	.+518    	; 0x288 <USART_Receive>
      82:	54 9a       	sbi	0x0a, 4	; 10
      84:	c0 91 11 01 	lds	r28, 0x0111	; 0x800111 <vibe_hi_thresh>
      88:	54 98       	cbi	0x0a, 4	; 10
      8a:	64 e0       	ldi	r22, 0x04	; 4
      8c:	8a e0       	ldi	r24, 0x0A	; 10
      8e:	fc d0       	rcall	.+504    	; 0x288 <USART_Receive>
      90:	64 e0       	ldi	r22, 0x04	; 4
      92:	81 e2       	ldi	r24, 0x21	; 33
      94:	f9 d0       	rcall	.+498    	; 0x288 <USART_Receive>
      96:	64 e0       	ldi	r22, 0x04	; 4
      98:	8c 2f       	mov	r24, r28
      9a:	f6 d0       	rcall	.+492    	; 0x288 <USART_Receive>
      9c:	64 e0       	ldi	r22, 0x04	; 4
      9e:	80 e0       	ldi	r24, 0x00	; 0
      a0:	f3 d0       	rcall	.+486    	; 0x288 <USART_Receive>
      a2:	54 9a       	sbi	0x0a, 4	; 10
      a4:	54 98       	cbi	0x0a, 4	; 10
      a6:	64 e0       	ldi	r22, 0x04	; 4
      a8:	8a e0       	ldi	r24, 0x0A	; 10
      aa:	ee d0       	rcall	.+476    	; 0x288 <USART_Receive>
      ac:	64 e0       	ldi	r22, 0x04	; 4
      ae:	82 e2       	ldi	r24, 0x22	; 34
      b0:	eb d0       	rcall	.+470    	; 0x288 <USART_Receive>
      b2:	64 e0       	ldi	r22, 0x04	; 4
      b4:	85 e0       	ldi	r24, 0x05	; 5
      b6:	e8 d0       	rcall	.+464    	; 0x288 <USART_Receive>
      b8:	64 e0       	ldi	r22, 0x04	; 4
      ba:	80 e0       	ldi	r24, 0x00	; 0
      bc:	e5 d0       	rcall	.+458    	; 0x288 <USART_Receive>
      be:	54 9a       	sbi	0x0a, 4	; 10
      c0:	54 98       	cbi	0x0a, 4	; 10
      c2:	64 e0       	ldi	r22, 0x04	; 4
      c4:	8a e0       	ldi	r24, 0x0A	; 10
      c6:	e0 d0       	rcall	.+448    	; 0x288 <USART_Receive>
      c8:	64 e0       	ldi	r22, 0x04	; 4
      ca:	8c e2       	ldi	r24, 0x2C	; 44
      cc:	dd d0       	rcall	.+442    	; 0x288 <USART_Receive>
      ce:	64 e0       	ldi	r22, 0x04	; 4
      d0:	81 e1       	ldi	r24, 0x11	; 17
      d2:	da d0       	rcall	.+436    	; 0x288 <USART_Receive>
      d4:	64 e0       	ldi	r22, 0x04	; 4
      d6:	80 e0       	ldi	r24, 0x00	; 0
      d8:	d7 d0       	rcall	.+430    	; 0x288 <USART_Receive>
      da:	54 9a       	sbi	0x0a, 4	; 10
      dc:	54 98       	cbi	0x0a, 4	; 10
      de:	64 e0       	ldi	r22, 0x04	; 4
      e0:	8a e0       	ldi	r24, 0x0A	; 10
      e2:	d2 d0       	rcall	.+420    	; 0x288 <USART_Receive>
      e4:	64 e0       	ldi	r22, 0x04	; 4
      e6:	87 e2       	ldi	r24, 0x27	; 39
      e8:	cf d0       	rcall	.+414    	; 0x288 <USART_Receive>
      ea:	64 e0       	ldi	r22, 0x04	; 4
      ec:	83 e0       	ldi	r24, 0x03	; 3
      ee:	cc d0       	rcall	.+408    	; 0x288 <USART_Receive>
      f0:	64 e0       	ldi	r22, 0x04	; 4
      f2:	80 e0       	ldi	r24, 0x00	; 0
      f4:	c9 d0       	rcall	.+402    	; 0x288 <USART_Receive>
      f6:	54 9a       	sbi	0x0a, 4	; 10
      f8:	54 98       	cbi	0x0a, 4	; 10
      fa:	64 e0       	ldi	r22, 0x04	; 4
      fc:	8a e0       	ldi	r24, 0x0A	; 10
      fe:	c4 d0       	rcall	.+392    	; 0x288 <USART_Receive>
     100:	64 e0       	ldi	r22, 0x04	; 4
     102:	8b e2       	ldi	r24, 0x2B	; 43
     104:	c1 d0       	rcall	.+386    	; 0x288 <USART_Receive>
     106:	64 e0       	ldi	r22, 0x04	; 4
     108:	80 e9       	ldi	r24, 0x90	; 144
     10a:	be d0       	rcall	.+380    	; 0x288 <USART_Receive>
     10c:	64 e0       	ldi	r22, 0x04	; 4
     10e:	80 e0       	ldi	r24, 0x00	; 0
     110:	bb d0       	rcall	.+374    	; 0x288 <USART_Receive>
     112:	54 9a       	sbi	0x0a, 4	; 10
     114:	54 98       	cbi	0x0a, 4	; 10
     116:	64 e0       	ldi	r22, 0x04	; 4
     118:	8a e0       	ldi	r24, 0x0A	; 10
     11a:	b6 d0       	rcall	.+364    	; 0x288 <USART_Receive>
     11c:	64 e0       	ldi	r22, 0x04	; 4
     11e:	8d e2       	ldi	r24, 0x2D	; 45
     120:	b3 d0       	rcall	.+358    	; 0x288 <USART_Receive>
     122:	64 e0       	ldi	r22, 0x04	; 4
     124:	8a e0       	ldi	r24, 0x0A	; 10
     126:	b0 d0       	rcall	.+352    	; 0x288 <USART_Receive>
     128:	64 e0       	ldi	r22, 0x04	; 4
     12a:	80 e0       	ldi	r24, 0x00	; 0
     12c:	ad d0       	rcall	.+346    	; 0x288 <USART_Receive>
     12e:	54 9a       	sbi	0x0a, 4	; 10
     130:	cf 91       	pop	r28
     132:	08 95       	ret

00000134 <adx_read_status>:


void adx_chip_select(int select_flag)
{
	if (select_flag) {
	AVR_GPIO_PORT &= ~_BV(DB_ADX_SS); /* CS low. */
     134:	54 98       	cbi	0x0a, 4	; 10

uint8_t adx_read_status(){
	/* ADX status */
	uint8_t temp;
	adx_chip_select(1);
	USART_Receive(ADX_RD, VIBE);
     136:	64 e0       	ldi	r22, 0x04	; 4
     138:	8b e0       	ldi	r24, 0x0B	; 11
     13a:	a6 d0       	rcall	.+332    	; 0x288 <USART_Receive>
	USART_Receive(ADX_STATUS, VIBE);  //device id address 0x00
     13c:	64 e0       	ldi	r22, 0x04	; 4
     13e:	8d e0       	ldi	r24, 0x0D	; 13
     140:	a3 d0       	rcall	.+326    	; 0x288 <USART_Receive>
	temp = USART_Receive(0x00, VIBE);
     142:	64 e0       	ldi	r22, 0x04	; 4
     144:	80 e0       	ldi	r24, 0x00	; 0
     146:	a0 d0       	rcall	.+320    	; 0x288 <USART_Receive>
{
	if (select_flag) {
	AVR_GPIO_PORT &= ~_BV(DB_ADX_SS); /* CS low. */
	}
	else {
	AVR_GPIO_PORT |= _BV(DB_ADX_SS); /* CS high. */
     148:	54 9a       	sbi	0x0a, 4	; 10
	USART_Receive(ADX_STATUS, VIBE);  //device id address 0x00
	temp = USART_Receive(0x00, VIBE);
    adx_chip_select(0);
	
	return temp;
}
     14a:	08 95       	ret

0000014c <n25_chip_select>:
#include "ssp.h"


void n25_chip_select(int select_flag)
{
	if (select_flag) {
     14c:	89 2b       	or	r24, r25
     14e:	11 f4       	brne	.+4      	; 0x154 <n25_chip_select+0x8>
		AVR_GPIO_PORT &= ~_BV(PORTC6); /* CS low. */
	}
	else {
		AVR_GPIO_PORT |= _BV(PORTC6); /* CS high. */
     150:	56 9a       	sbi	0x0a, 6	; 10
     152:	08 95       	ret


void n25_chip_select(int select_flag)
{
	if (select_flag) {
		AVR_GPIO_PORT &= ~_BV(PORTC6); /* CS low. */
     154:	56 98       	cbi	0x0a, 6	; 10
     156:	08 95       	ret

00000158 <mlx_chip_select>:
void mlx_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_MLX_SS); /* CS low. */
	else
	AVR_GPIO_PORT |= _BV(DB_MLX_SS); /* CS high. */
     158:	89 2b       	or	r24, r25
     15a:	11 f4       	brne	.+4      	; 0x160 <mlx_chip_select+0x8>
     15c:	55 9a       	sbi	0x0a, 5	; 10
     15e:	08 95       	ret
     160:	55 98       	cbi	0x0a, 5	; 10
     162:	08 95       	ret

00000164 <mlx_start_meas>:
     164:	55 98       	cbi	0x0a, 5	; 10
     166:	61 e0       	ldi	r22, 0x01	; 1
     168:	80 ed       	ldi	r24, 0xD0	; 208
     16a:	8e d0       	rcall	.+284    	; 0x288 <USART_Receive>
     16c:	61 e0       	ldi	r22, 0x01	; 1
     16e:	80 e6       	ldi	r24, 0x60	; 96
     170:	8b d0       	rcall	.+278    	; 0x288 <USART_Receive>
     172:	55 9a       	sbi	0x0a, 5	; 10
     174:	08 95       	ret

00000176 <mlx_get_meas>:
     176:	cf 93       	push	r28
     178:	df 93       	push	r29
     17a:	55 98       	cbi	0x0a, 5	; 10
     17c:	61 e0       	ldi	r22, 0x01	; 1
     17e:	83 ec       	ldi	r24, 0xC3	; 195
     180:	83 d0       	rcall	.+262    	; 0x288 <USART_Receive>
     182:	61 e0       	ldi	r22, 0x01	; 1
     184:	80 e0       	ldi	r24, 0x00	; 0
     186:	80 d0       	rcall	.+256    	; 0x288 <USART_Receive>
     188:	61 e0       	ldi	r22, 0x01	; 1
     18a:	80 e0       	ldi	r24, 0x00	; 0
     18c:	7d d0       	rcall	.+250    	; 0x288 <USART_Receive>
     18e:	c8 2f       	mov	r28, r24
     190:	d0 e0       	ldi	r29, 0x00	; 0
     192:	dc 2f       	mov	r29, r28
     194:	cc 27       	eor	r28, r28
     196:	61 e0       	ldi	r22, 0x01	; 1
     198:	80 e0       	ldi	r24, 0x00	; 0
     19a:	76 d0       	rcall	.+236    	; 0x288 <USART_Receive>
     19c:	c8 2b       	or	r28, r24
     19e:	61 e0       	ldi	r22, 0x01	; 1
     1a0:	80 e0       	ldi	r24, 0x00	; 0
     1a2:	72 d0       	rcall	.+228    	; 0x288 <USART_Receive>
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	98 2f       	mov	r25, r24
     1a8:	88 27       	eor	r24, r24
     1aa:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <light+0x1>
     1ae:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <light>
     1b2:	61 e0       	ldi	r22, 0x01	; 1
     1b4:	80 e0       	ldi	r24, 0x00	; 0
     1b6:	68 d0       	rcall	.+208    	; 0x288 <USART_Receive>
     1b8:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <light>
     1bc:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <light+0x1>
     1c0:	28 2b       	or	r18, r24
     1c2:	30 93 1d 01 	sts	0x011D, r19	; 0x80011d <light+0x1>
     1c6:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <light>
     1ca:	55 9a       	sbi	0x0a, 5	; 10
     1cc:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <calib2>
     1d0:	60 91 33 01 	lds	r22, 0x0133	; 0x800133 <calib1>
     1d4:	30 e0       	ldi	r19, 0x00	; 0
     1d6:	20 52       	subi	r18, 0x20	; 32
     1d8:	31 09       	sbc	r19, r1
     1da:	c9 01       	movw	r24, r18
     1dc:	88 0f       	add	r24, r24
     1de:	99 1f       	adc	r25, r25
     1e0:	82 95       	swap	r24
     1e2:	92 95       	swap	r25
     1e4:	90 7f       	andi	r25, 0xF0	; 240
     1e6:	98 27       	eor	r25, r24
     1e8:	80 7f       	andi	r24, 0xF0	; 240
     1ea:	98 27       	eor	r25, r24
     1ec:	82 0f       	add	r24, r18
     1ee:	93 1f       	adc	r25, r19
     1f0:	88 0f       	add	r24, r24
     1f2:	99 1f       	adc	r25, r25
     1f4:	82 0f       	add	r24, r18
     1f6:	93 1f       	adc	r25, r19
     1f8:	81 50       	subi	r24, 0x01	; 1
     1fa:	92 4d       	sbci	r25, 0xD2	; 210
     1fc:	8c 1b       	sub	r24, r28
     1fe:	9d 0b       	sbc	r25, r29
     200:	70 e0       	ldi	r23, 0x00	; 0
     202:	6d 5c       	subi	r22, 0xCD	; 205
     204:	7f 4f       	sbci	r23, 0xFF	; 255
     206:	b1 d9       	rcall	.-3230   	; 0xfffff56a <__eeprom_end+0xff7ef56a>
     208:	62 5e       	subi	r22, 0xE2	; 226
     20a:	7f 4f       	sbci	r23, 0xFF	; 255
     20c:	70 93 1a 01 	sts	0x011A, r23	; 0x80011a <temperature+0x1>
     210:	60 93 19 01 	sts	0x0119, r22	; 0x800119 <temperature>
     214:	df 91       	pop	r29
     216:	cf 91       	pop	r28
     218:	08 95       	ret

0000021a <mlx_setup>:
     21a:	55 98       	cbi	0x0a, 5	; 10
     21c:	61 e0       	ldi	r22, 0x01	; 1
     21e:	87 e8       	ldi	r24, 0x87	; 135
     220:	33 d0       	rcall	.+102    	; 0x288 <USART_Receive>
     222:	61 e0       	ldi	r22, 0x01	; 1
     224:	84 e8       	ldi	r24, 0x84	; 132
     226:	30 d0       	rcall	.+96     	; 0x288 <USART_Receive>
     228:	61 e0       	ldi	r22, 0x01	; 1
     22a:	84 ed       	ldi	r24, 0xD4	; 212
     22c:	2d d0       	rcall	.+90     	; 0x288 <USART_Receive>
     22e:	55 9a       	sbi	0x0a, 5	; 10
     230:	08 95       	ret

00000232 <mlx_reset>:


void mlx_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_MLX_SS); /* CS low. */
     232:	55 98       	cbi	0x0a, 5	; 10
	USART_Receive(0, LIGHT);
	mlx_chip_select(0);
}
void mlx_reset(){
	mlx_chip_select(1);
	USART_Receive(MLX_RS, LIGHT);
     234:	61 e0       	ldi	r22, 0x01	; 1
     236:	80 ef       	ldi	r24, 0xF0	; 240
     238:	27 d0       	rcall	.+78     	; 0x288 <USART_Receive>
	USART_Receive(0, LIGHT);
     23a:	61 e0       	ldi	r22, 0x01	; 1
     23c:	80 e0       	ldi	r24, 0x00	; 0
     23e:	24 d0       	rcall	.+72     	; 0x288 <USART_Receive>
void mlx_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_MLX_SS); /* CS low. */
	else
	AVR_GPIO_PORT |= _BV(DB_MLX_SS); /* CS high. */
     240:	55 9a       	sbi	0x0a, 5	; 10
     242:	08 95       	ret

00000244 <spi_usart_setup>:
ssp_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_SSP_SS); /* CS low. */
	else
	AVR_GPIO_PORT |= _BV(DB_SSP_SS); /* CS high. */
     244:	89 2b       	or	r24, r25
     246:	09 f4       	brne	.+2      	; 0x24a <spi_usart_setup+0x6>
     248:	08 95       	ret
     24a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__EEPROM_REGION_LENGTH__+0x7f00c5>
     24e:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__EEPROM_REGION_LENGTH__+0x7f00c4>
     252:	81 ef       	ldi	r24, 0xF1	; 241
     254:	89 b9       	out	0x09, r24	; 9
     256:	83 ec       	ldi	r24, 0xC3	; 195
     258:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__EEPROM_REGION_LENGTH__+0x7f00c2>
     25c:	88 e1       	ldi	r24, 0x18	; 24
     25e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__EEPROM_REGION_LENGTH__+0x7f00c1>
     262:	88 e0       	ldi	r24, 0x08	; 8
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__EEPROM_REGION_LENGTH__+0x7f00c5>
     26a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__EEPROM_REGION_LENGTH__+0x7f00c4>
     26e:	57 9a       	sbi	0x0a, 7	; 10
     270:	80 e0       	ldi	r24, 0x00	; 0
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	71 df       	rcall	.-286    	; 0x158 <mlx_chip_select>
     276:	80 e0       	ldi	r24, 0x00	; 0
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	ed de       	rcall	.-550    	; 0x56 <adx_chip_select>
     27c:	80 e0       	ldi	r24, 0x00	; 0
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	65 cf       	rjmp	.-310    	; 0x14c <n25_chip_select>

00000282 <ssp_boot>:
     282:	57 98       	cbi	0x0a, 7	; 10
     284:	57 9a       	sbi	0x0a, 7	; 10
     286:	08 95       	ret

00000288 <USART_Receive>:
     288:	91 e0       	ldi	r25, 0x01	; 1
     28a:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <usart_to>
     28e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     292:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
     296:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     29a:	92 60       	ori	r25, 0x02	; 2
     29c:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     2a0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     2a4:	95 ff       	sbrs	r25, 5
     2a6:	fc cf       	rjmp	.-8      	; 0x2a0 <USART_Receive+0x18>
     2a8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
     2ac:	81 e0       	ldi	r24, 0x01	; 1
     2ae:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <usart_to>
     2b2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     2b6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
     2ba:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     2be:	82 60       	ori	r24, 0x02	; 2
     2c0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     2c4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     2c8:	87 ff       	sbrs	r24, 7
     2ca:	fc cf       	rjmp	.-8      	; 0x2c4 <USART_Receive+0x3c>
     2cc:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <usart_to>
     2d0:	88 23       	and	r24, r24
     2d2:	49 f0       	breq	.+18     	; 0x2e6 <USART_Receive+0x5e>
     2d4:	64 30       	cpi	r22, 0x04	; 4
     2d6:	79 f0       	breq	.+30     	; 0x2f6 <USART_Receive+0x6e>
     2d8:	98 f0       	brcs	.+38     	; 0x300 <__stack+0x1>
     2da:	60 31       	cpi	r22, 0x10	; 16
     2dc:	39 f0       	breq	.+14     	; 0x2ec <USART_Receive+0x64>
     2de:	60 32       	cpi	r22, 0x20	; 32
     2e0:	b1 f4       	brne	.+44     	; 0x30e <__stack+0xf>
     2e2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <n25_fault>
     2e6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
     2ea:	08 95       	ret
     2ec:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <ssp_fault>
     2f0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
     2f4:	08 95       	ret
     2f6:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <vibe_fault>
     2fa:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
     2fe:	08 95       	ret
     300:	61 30       	cpi	r22, 0x01	; 1
     302:	29 f4       	brne	.+10     	; 0x30e <__stack+0xf>
     304:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <light_fault>
     308:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
     30c:	08 95       	ret
     30e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
     312:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
     316:	08 95       	ret

00000318 <ssp_setup>:
     318:	57 98       	cbi	0x0a, 7	; 10
     31a:	81 e0       	ldi	r24, 0x01	; 1
     31c:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <usart_to>
     320:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     324:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
     328:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     32c:	82 60       	ori	r24, 0x02	; 2
     32e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     332:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     336:	85 ff       	sbrs	r24, 5
     338:	fc cf       	rjmp	.-8      	; 0x332 <ssp_setup+0x1a>
     33a:	80 e4       	ldi	r24, 0x40	; 64
     33c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
     340:	81 e0       	ldi	r24, 0x01	; 1
     342:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <usart_to>
     346:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     34a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
     34e:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     352:	82 60       	ori	r24, 0x02	; 2
     354:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     358:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     35c:	87 ff       	sbrs	r24, 7
     35e:	fc cf       	rjmp	.-8      	; 0x358 <ssp_setup+0x40>
     360:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <usart_to>
     364:	81 11       	cpse	r24, r1
     366:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <ssp_fault>
     36a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <usart_to>
     374:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     378:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
     37c:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     380:	82 60       	ori	r24, 0x02	; 2
     382:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     386:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     38a:	85 ff       	sbrs	r24, 5
     38c:	fc cf       	rjmp	.-8      	; 0x386 <ssp_setup+0x6e>
     38e:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
     392:	81 e0       	ldi	r24, 0x01	; 1
     394:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <usart_to>
     398:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     39c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
     3a0:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     3a4:	82 60       	ori	r24, 0x02	; 2
     3a6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     3aa:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     3ae:	87 ff       	sbrs	r24, 7
     3b0:	fc cf       	rjmp	.-8      	; 0x3aa <ssp_setup+0x92>
     3b2:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <usart_to>
     3b6:	81 11       	cpse	r24, r1
     3b8:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <ssp_fault>
     3bc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
     3c0:	81 e0       	ldi	r24, 0x01	; 1
     3c2:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <usart_to>
     3c6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     3ca:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
     3ce:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     3d2:	82 60       	ori	r24, 0x02	; 2
     3d4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     3d8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     3dc:	85 ff       	sbrs	r24, 5
     3de:	fc cf       	rjmp	.-8      	; 0x3d8 <ssp_setup+0xc0>
     3e0:	81 e6       	ldi	r24, 0x61	; 97
     3e2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <usart_to>
     3ec:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     3f0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
     3f4:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     3f8:	82 60       	ori	r24, 0x02	; 2
     3fa:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     3fe:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     402:	87 ff       	sbrs	r24, 7
     404:	fc cf       	rjmp	.-8      	; 0x3fe <ssp_setup+0xe6>
     406:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <usart_to>
     40a:	81 11       	cpse	r24, r1
     40c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <ssp_fault>
     410:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
     414:	57 9a       	sbi	0x0a, 7	; 10
     416:	08 95       	ret

00000418 <ssp_int_reset>:

void
ssp_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_SSP_SS); /* CS low. */
     418:	57 98       	cbi	0x0a, 7	; 10

uint8_t
USART_Receive (uint8_t data, uint8_t source)
{
	//start timer to exit us out
	usart_to = 1;
     41a:	81 e0       	ldi	r24, 0x01	; 1
     41c:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <usart_to>
	TCNT1 = 0x00;
     420:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     424:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	TIMSK1 |= (1<<OCIE1A);
     428:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     42c:	82 60       	ori	r24, 0x02	; 2
     42e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	/* wait for empty transmit buffer */
	while (!(UCSRA & (1<<UDRE))){
     432:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     436:	85 ff       	sbrs	r24, 5
     438:	fc cf       	rjmp	.-8      	; 0x432 <ssp_int_reset+0x1a>
			log_fault(source);
			break;
		}*/
	}
	/*put data into buffer, sends data */
	UDR = data;
     43a:	81 e4       	ldi	r24, 0x41	; 65
     43c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
	//start timer to exit us out
	usart_to = 1;
     440:	81 e0       	ldi	r24, 0x01	; 1
     442:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <usart_to>
	TCNT1 = 0x00;
     446:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     44a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	TIMSK1 |= (1<<OCIE1A);
     44e:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     452:	82 60       	ori	r24, 0x02	; 2
     454:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	/*wait for the data to be received */
	while (!(UCSRA & (1<<RXC))){
     458:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     45c:	87 ff       	sbrs	r24, 7
     45e:	fc cf       	rjmp	.-8      	; 0x458 <ssp_int_reset+0x40>
		/*if (!usart_to){
			log_fault(source);
			break;
		}*/
	}
	if(usart_to){
     460:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <usart_to>
     464:	81 11       	cpse	r24, r1
		break;
		case VIBE:
		vibe_fault = 0;
		break;
		case SSP:
		ssp_fault = 0;
     466:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <ssp_fault>
		}*/
	}
	if(usart_to){
		reset_fault(source);
	}
	return UDR;
     46a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>

uint8_t
USART_Receive (uint8_t data, uint8_t source)
{
	//start timer to exit us out
	usart_to = 1;
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <usart_to>
	TCNT1 = 0x00;
     474:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     478:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	TIMSK1 |= (1<<OCIE1A);
     47c:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     480:	82 60       	ori	r24, 0x02	; 2
     482:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	/* wait for empty transmit buffer */
	while (!(UCSRA & (1<<UDRE))){
     486:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     48a:	85 ff       	sbrs	r24, 5
     48c:	fc cf       	rjmp	.-8      	; 0x486 <ssp_int_reset+0x6e>
			log_fault(source);
			break;
		}*/
	}
	/*put data into buffer, sends data */
	UDR = data;
     48e:	80 e1       	ldi	r24, 0x10	; 16
     490:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
	//start timer to exit us out
	usart_to = 1;
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <usart_to>
	TCNT1 = 0x00;
     49a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     49e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	TIMSK1 |= (1<<OCIE1A);
     4a2:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     4a6:	82 60       	ori	r24, 0x02	; 2
     4a8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	/*wait for the data to be received */
	while (!(UCSRA & (1<<RXC))){
     4ac:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     4b0:	87 ff       	sbrs	r24, 7
     4b2:	fc cf       	rjmp	.-8      	; 0x4ac <ssp_int_reset+0x94>
		/*if (!usart_to){
			log_fault(source);
			break;
		}*/
	}
	if(usart_to){
     4b4:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <usart_to>
     4b8:	81 11       	cpse	r24, r1
		break;
		case VIBE:
		vibe_fault = 0;
		break;
		case SSP:
		ssp_fault = 0;
     4ba:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <ssp_fault>
		}*/
	}
	if(usart_to){
		reset_fault(source);
	}
	return UDR;
     4be:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>

uint8_t
USART_Receive (uint8_t data, uint8_t source)
{
	//start timer to exit us out
	usart_to = 1;
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <usart_to>
	TCNT1 = 0x00;
     4c8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     4cc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	TIMSK1 |= (1<<OCIE1A);
     4d0:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     4d4:	82 60       	ori	r24, 0x02	; 2
     4d6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	/* wait for empty transmit buffer */
	while (!(UCSRA & (1<<UDRE))){
     4da:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     4de:	85 ff       	sbrs	r24, 5
     4e0:	fc cf       	rjmp	.-8      	; 0x4da <ssp_int_reset+0xc2>
			log_fault(source);
			break;
		}*/
	}
	/*put data into buffer, sends data */
	UDR = data;
     4e2:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
	//start timer to exit us out
	usart_to = 1;
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <usart_to>
	TCNT1 = 0x00;
     4ec:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     4f0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	TIMSK1 |= (1<<OCIE1A);
     4f4:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     4f8:	82 60       	ori	r24, 0x02	; 2
     4fa:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	/*wait for the data to be received */
	while (!(UCSRA & (1<<RXC))){
     4fe:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     502:	87 ff       	sbrs	r24, 7
     504:	fc cf       	rjmp	.-8      	; 0x4fe <ssp_int_reset+0xe6>
		/*if (!usart_to){
			log_fault(source);
			break;
		}*/
	}
	if(usart_to){
     506:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <usart_to>
     50a:	81 11       	cpse	r24, r1
		break;
		case VIBE:
		vibe_fault = 0;
		break;
		case SSP:
		ssp_fault = 0;
     50c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <ssp_fault>
		}*/
	}
	if(usart_to){
		reset_fault(source);
	}
	return UDR;
     510:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
ssp_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_SSP_SS); /* CS low. */
	else
	AVR_GPIO_PORT |= _BV(DB_SSP_SS); /* CS high. */
     514:	57 9a       	sbi	0x0a, 7	; 10
     516:	08 95       	ret

00000518 <ssp_read_byte>:

void
ssp_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_SSP_SS); /* CS low. */
     518:	57 98       	cbi	0x0a, 7	; 10

uint8_t
USART_Receive (uint8_t data, uint8_t source)
{
	//start timer to exit us out
	usart_to = 1;
     51a:	81 e0       	ldi	r24, 0x01	; 1
     51c:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <usart_to>
	TCNT1 = 0x00;
     520:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     524:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	TIMSK1 |= (1<<OCIE1A);
     528:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     52c:	82 60       	ori	r24, 0x02	; 2
     52e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	/* wait for empty transmit buffer */
	while (!(UCSRA & (1<<UDRE))){
     532:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     536:	85 ff       	sbrs	r24, 5
     538:	fc cf       	rjmp	.-8      	; 0x532 <ssp_read_byte+0x1a>
			log_fault(source);
			break;
		}*/
	}
	/*put data into buffer, sends data */
	UDR = data;
     53a:	81 e4       	ldi	r24, 0x41	; 65
     53c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
	//start timer to exit us out
	usart_to = 1;
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <usart_to>
	TCNT1 = 0x00;
     546:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     54a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	TIMSK1 |= (1<<OCIE1A);
     54e:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     552:	82 60       	ori	r24, 0x02	; 2
     554:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	/*wait for the data to be received */
	while (!(UCSRA & (1<<RXC))){
     558:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     55c:	87 ff       	sbrs	r24, 7
     55e:	fc cf       	rjmp	.-8      	; 0x558 <ssp_read_byte+0x40>
		/*if (!usart_to){
			log_fault(source);
			break;
		}*/
	}
	if(usart_to){
     560:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <usart_to>
     564:	81 11       	cpse	r24, r1
		break;
		case VIBE:
		vibe_fault = 0;
		break;
		case SSP:
		ssp_fault = 0;
     566:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <ssp_fault>
		}*/
	}
	if(usart_to){
		reset_fault(source);
	}
	return UDR;
     56a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>

uint8_t
USART_Receive (uint8_t data, uint8_t source)
{
	//start timer to exit us out
	usart_to = 1;
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <usart_to>
	TCNT1 = 0x00;
     574:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     578:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	TIMSK1 |= (1<<OCIE1A);
     57c:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     580:	82 60       	ori	r24, 0x02	; 2
     582:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	/* wait for empty transmit buffer */
	while (!(UCSRA & (1<<UDRE))){
     586:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     58a:	85 ff       	sbrs	r24, 5
     58c:	fc cf       	rjmp	.-8      	; 0x586 <ssp_read_byte+0x6e>
			log_fault(source);
			break;
		}*/
	}
	/*put data into buffer, sends data */
	UDR = data;
     58e:	8e e0       	ldi	r24, 0x0E	; 14
     590:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
	//start timer to exit us out
	usart_to = 1;
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <usart_to>
	TCNT1 = 0x00;
     59a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     59e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	TIMSK1 |= (1<<OCIE1A);
     5a2:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     5a6:	82 60       	ori	r24, 0x02	; 2
     5a8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	/*wait for the data to be received */
	while (!(UCSRA & (1<<RXC))){
     5ac:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     5b0:	87 ff       	sbrs	r24, 7
     5b2:	fc cf       	rjmp	.-8      	; 0x5ac <ssp_read_byte+0x94>
		/*if (!usart_to){
			log_fault(source);
			break;
		}*/
	}
	if(usart_to){
     5b4:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <usart_to>
     5b8:	81 11       	cpse	r24, r1
		break;
		case VIBE:
		vibe_fault = 0;
		break;
		case SSP:
		ssp_fault = 0;
     5ba:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <ssp_fault>
		}*/
	}
	if(usart_to){
		reset_fault(source);
	}
	return UDR;
     5be:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>

uint8_t
USART_Receive (uint8_t data, uint8_t source)
{
	//start timer to exit us out
	usart_to = 1;
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <usart_to>
	TCNT1 = 0x00;
     5c8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     5cc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	TIMSK1 |= (1<<OCIE1A);
     5d0:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     5d4:	82 60       	ori	r24, 0x02	; 2
     5d6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	/* wait for empty transmit buffer */
	while (!(UCSRA & (1<<UDRE))){
     5da:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     5de:	85 ff       	sbrs	r24, 5
     5e0:	fc cf       	rjmp	.-8      	; 0x5da <ssp_read_byte+0xc2>
			log_fault(source);
			break;
		}*/
	}
	/*put data into buffer, sends data */
	UDR = data;
     5e2:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
	//start timer to exit us out
	usart_to = 1;
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <usart_to>
	TCNT1 = 0x00;
     5ec:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     5f0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	TIMSK1 |= (1<<OCIE1A);
     5f4:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     5f8:	82 60       	ori	r24, 0x02	; 2
     5fa:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	/*wait for the data to be received */
	while (!(UCSRA & (1<<RXC))){
     5fe:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     602:	87 ff       	sbrs	r24, 7
     604:	fc cf       	rjmp	.-8      	; 0x5fe <ssp_read_byte+0xe6>
		/*if (!usart_to){
			log_fault(source);
			break;
		}*/
	}
	if(usart_to){
     606:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <usart_to>
     60a:	81 11       	cpse	r24, r1
		break;
		case VIBE:
		vibe_fault = 0;
		break;
		case SSP:
		ssp_fault = 0;
     60c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <ssp_fault>
		}*/
	}
	if(usart_to){
		reset_fault(source);
	}
	return UDR;
     610:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
ssp_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_SSP_SS); /* CS low. */
	else
	AVR_GPIO_PORT |= _BV(DB_SSP_SS); /* CS high. */
     614:	57 9a       	sbi	0x0a, 7	; 10
	USART_Receive(SSP_READ, SSP);
	USART_Receive(INTFA, SSP);
	temp = USART_Receive(0x00, SSP);
	ssp_chip_select(0);
	return temp;
}
     616:	08 95       	ret

00000618 <ssp_write>:

void
ssp_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_SSP_SS); /* CS low. */
     618:	57 98       	cbi	0x0a, 7	; 10

uint8_t
USART_Receive (uint8_t data, uint8_t source)
{
	//start timer to exit us out
	usart_to = 1;
     61a:	91 e0       	ldi	r25, 0x01	; 1
     61c:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <usart_to>
	TCNT1 = 0x00;
     620:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     624:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	TIMSK1 |= (1<<OCIE1A);
     628:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     62c:	92 60       	ori	r25, 0x02	; 2
     62e:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	/* wait for empty transmit buffer */
	while (!(UCSRA & (1<<UDRE))){
     632:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     636:	95 ff       	sbrs	r25, 5
     638:	fc cf       	rjmp	.-8      	; 0x632 <ssp_write+0x1a>
			log_fault(source);
			break;
		}*/
	}
	/*put data into buffer, sends data */
	UDR = data;
     63a:	90 e4       	ldi	r25, 0x40	; 64
     63c:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
	//start timer to exit us out
	usart_to = 1;
     640:	91 e0       	ldi	r25, 0x01	; 1
     642:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <usart_to>
	TCNT1 = 0x00;
     646:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     64a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	TIMSK1 |= (1<<OCIE1A);
     64e:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     652:	92 60       	ori	r25, 0x02	; 2
     654:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	/*wait for the data to be received */
	while (!(UCSRA & (1<<RXC))){
     658:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     65c:	97 ff       	sbrs	r25, 7
     65e:	fc cf       	rjmp	.-8      	; 0x658 <ssp_write+0x40>
		/*if (!usart_to){
			log_fault(source);
			break;
		}*/
	}
	if(usart_to){
     660:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <usart_to>
     664:	91 11       	cpse	r25, r1
		break;
		case VIBE:
		vibe_fault = 0;
		break;
		case SSP:
		ssp_fault = 0;
     666:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <ssp_fault>
		}*/
	}
	if(usart_to){
		reset_fault(source);
	}
	return UDR;
     66a:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>

uint8_t
USART_Receive (uint8_t data, uint8_t source)
{
	//start timer to exit us out
	usart_to = 1;
     66e:	91 e0       	ldi	r25, 0x01	; 1
     670:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <usart_to>
	TCNT1 = 0x00;
     674:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     678:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	TIMSK1 |= (1<<OCIE1A);
     67c:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     680:	92 60       	ori	r25, 0x02	; 2
     682:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	/* wait for empty transmit buffer */
	while (!(UCSRA & (1<<UDRE))){
     686:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     68a:	95 ff       	sbrs	r25, 5
     68c:	fc cf       	rjmp	.-8      	; 0x686 <ssp_write+0x6e>
			log_fault(source);
			break;
		}*/
	}
	/*put data into buffer, sends data */
	UDR = data;
     68e:	92 e1       	ldi	r25, 0x12	; 18
     690:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
	//start timer to exit us out
	usart_to = 1;
     694:	91 e0       	ldi	r25, 0x01	; 1
     696:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <usart_to>
	TCNT1 = 0x00;
     69a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     69e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	TIMSK1 |= (1<<OCIE1A);
     6a2:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     6a6:	92 60       	ori	r25, 0x02	; 2
     6a8:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	/*wait for the data to be received */
	while (!(UCSRA & (1<<RXC))){
     6ac:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     6b0:	97 ff       	sbrs	r25, 7
     6b2:	fc cf       	rjmp	.-8      	; 0x6ac <ssp_write+0x94>
		/*if (!usart_to){
			log_fault(source);
			break;
		}*/
	}
	if(usart_to){
     6b4:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <usart_to>
     6b8:	91 11       	cpse	r25, r1
		break;
		case VIBE:
		vibe_fault = 0;
		break;
		case SSP:
		ssp_fault = 0;
     6ba:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <ssp_fault>
		}*/
	}
	if(usart_to){
		reset_fault(source);
	}
	return UDR;
     6be:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>

uint8_t
USART_Receive (uint8_t data, uint8_t source)
{
	//start timer to exit us out
	usart_to = 1;
     6c2:	91 e0       	ldi	r25, 0x01	; 1
     6c4:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <usart_to>
	TCNT1 = 0x00;
     6c8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     6cc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	TIMSK1 |= (1<<OCIE1A);
     6d0:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     6d4:	92 60       	ori	r25, 0x02	; 2
     6d6:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	/* wait for empty transmit buffer */
	while (!(UCSRA & (1<<UDRE))){
     6da:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     6de:	95 ff       	sbrs	r25, 5
     6e0:	fc cf       	rjmp	.-8      	; 0x6da <ssp_write+0xc2>
			log_fault(source);
			break;
		}*/
	}
	/*put data into buffer, sends data */
	UDR = data;
     6e2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
	//start timer to exit us out
	usart_to = 1;
     6e6:	91 e0       	ldi	r25, 0x01	; 1
     6e8:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <usart_to>
	TCNT1 = 0x00;
     6ec:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     6f0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	TIMSK1 |= (1<<OCIE1A);
     6f4:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     6f8:	92 60       	ori	r25, 0x02	; 2
     6fa:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	/*wait for the data to be received */
	while (!(UCSRA & (1<<RXC))){
     6fe:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     702:	97 ff       	sbrs	r25, 7
     704:	fc cf       	rjmp	.-8      	; 0x6fe <ssp_write+0xe6>
		/*if (!usart_to){
			log_fault(source);
			break;
		}*/
	}
	if(usart_to){
     706:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <usart_to>
     70a:	91 11       	cpse	r25, r1
		break;
		case VIBE:
		vibe_fault = 0;
		break;
		case SSP:
		ssp_fault = 0;
     70c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <ssp_fault>
		}*/
	}
	if(usart_to){
		reset_fault(source);
	}
	return UDR;
     710:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
ssp_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_SSP_SS); /* CS low. */
	else
	AVR_GPIO_PORT |= _BV(DB_SSP_SS); /* CS high. */
     714:	57 9a       	sbi	0x0a, 7	; 10

void
ssp_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_SSP_SS); /* CS low. */
     716:	57 98       	cbi	0x0a, 7	; 10

uint8_t
USART_Receive (uint8_t data, uint8_t source)
{
	//start timer to exit us out
	usart_to = 1;
     718:	91 e0       	ldi	r25, 0x01	; 1
     71a:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <usart_to>
	TCNT1 = 0x00;
     71e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     722:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	TIMSK1 |= (1<<OCIE1A);
     726:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     72a:	92 60       	ori	r25, 0x02	; 2
     72c:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	/* wait for empty transmit buffer */
	while (!(UCSRA & (1<<UDRE))){
     730:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     734:	95 ff       	sbrs	r25, 5
     736:	fc cf       	rjmp	.-8      	; 0x730 <ssp_write+0x118>
			log_fault(source);
			break;
		}*/
	}
	/*put data into buffer, sends data */
	UDR = data;
     738:	90 e4       	ldi	r25, 0x40	; 64
     73a:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
	//start timer to exit us out
	usart_to = 1;
     73e:	91 e0       	ldi	r25, 0x01	; 1
     740:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <usart_to>
	TCNT1 = 0x00;
     744:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     748:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	TIMSK1 |= (1<<OCIE1A);
     74c:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     750:	92 60       	ori	r25, 0x02	; 2
     752:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	/*wait for the data to be received */
	while (!(UCSRA & (1<<RXC))){
     756:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     75a:	97 ff       	sbrs	r25, 7
     75c:	fc cf       	rjmp	.-8      	; 0x756 <ssp_write+0x13e>
		/*if (!usart_to){
			log_fault(source);
			break;
		}*/
	}
	if(usart_to){
     75e:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <usart_to>
     762:	91 11       	cpse	r25, r1
		break;
		case VIBE:
		vibe_fault = 0;
		break;
		case SSP:
		ssp_fault = 0;
     764:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <ssp_fault>
		}*/
	}
	if(usart_to){
		reset_fault(source);
	}
	return UDR;
     768:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>

uint8_t
USART_Receive (uint8_t data, uint8_t source)
{
	//start timer to exit us out
	usart_to = 1;
     76c:	91 e0       	ldi	r25, 0x01	; 1
     76e:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <usart_to>
	TCNT1 = 0x00;
     772:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     776:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	TIMSK1 |= (1<<OCIE1A);
     77a:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     77e:	92 60       	ori	r25, 0x02	; 2
     780:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	/* wait for empty transmit buffer */
	while (!(UCSRA & (1<<UDRE))){
     784:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     788:	95 ff       	sbrs	r25, 5
     78a:	fc cf       	rjmp	.-8      	; 0x784 <ssp_write+0x16c>
			log_fault(source);
			break;
		}*/
	}
	/*put data into buffer, sends data */
	UDR = data;
     78c:	94 e1       	ldi	r25, 0x14	; 20
     78e:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
	//start timer to exit us out
	usart_to = 1;
     792:	91 e0       	ldi	r25, 0x01	; 1
     794:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <usart_to>
	TCNT1 = 0x00;
     798:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     79c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	TIMSK1 |= (1<<OCIE1A);
     7a0:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     7a4:	92 60       	ori	r25, 0x02	; 2
     7a6:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	/*wait for the data to be received */
	while (!(UCSRA & (1<<RXC))){
     7aa:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     7ae:	97 ff       	sbrs	r25, 7
     7b0:	fc cf       	rjmp	.-8      	; 0x7aa <ssp_write+0x192>
		/*if (!usart_to){
			log_fault(source);
			break;
		}*/
	}
	if(usart_to){
     7b2:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <usart_to>
     7b6:	91 11       	cpse	r25, r1
		break;
		case VIBE:
		vibe_fault = 0;
		break;
		case SSP:
		ssp_fault = 0;
     7b8:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <ssp_fault>
		}*/
	}
	if(usart_to){
		reset_fault(source);
	}
	return UDR;
     7bc:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>

uint8_t
USART_Receive (uint8_t data, uint8_t source)
{
	//start timer to exit us out
	usart_to = 1;
     7c0:	91 e0       	ldi	r25, 0x01	; 1
     7c2:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <usart_to>
	TCNT1 = 0x00;
     7c6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     7ca:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	TIMSK1 |= (1<<OCIE1A);
     7ce:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     7d2:	92 60       	ori	r25, 0x02	; 2
     7d4:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	/* wait for empty transmit buffer */
	while (!(UCSRA & (1<<UDRE))){
     7d8:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     7dc:	95 ff       	sbrs	r25, 5
     7de:	fc cf       	rjmp	.-8      	; 0x7d8 <ssp_write+0x1c0>
			log_fault(source);
			break;
		}*/
	}
	/*put data into buffer, sends data */
	UDR = data;
     7e0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
	//start timer to exit us out
	usart_to = 1;
     7e4:	81 e0       	ldi	r24, 0x01	; 1
     7e6:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <usart_to>
	TCNT1 = 0x00;
     7ea:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     7ee:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	TIMSK1 |= (1<<OCIE1A);
     7f2:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     7f6:	82 60       	ori	r24, 0x02	; 2
     7f8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	/*wait for the data to be received */
	while (!(UCSRA & (1<<RXC))){
     7fc:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     800:	87 ff       	sbrs	r24, 7
     802:	fc cf       	rjmp	.-8      	; 0x7fc <ssp_write+0x1e4>
		/*if (!usart_to){
			log_fault(source);
			break;
		}*/
	}
	if(usart_to){
     804:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <usart_to>
     808:	81 11       	cpse	r24, r1
		break;
		case VIBE:
		vibe_fault = 0;
		break;
		case SSP:
		ssp_fault = 0;
     80a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <ssp_fault>
		}*/
	}
	if(usart_to){
		reset_fault(source);
	}
	return UDR;
     80e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
ssp_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_SSP_SS); /* CS low. */
	else
	AVR_GPIO_PORT |= _BV(DB_SSP_SS); /* CS high. */
     812:	57 9a       	sbi	0x0a, 7	; 10
     814:	08 95       	ret

00000816 <__vector_3>:
	start_bit = 1;
	sending = 1;
	TCNT0 = 0x00;						//reset counter to avoid glitch on next rcv char.
	TIMSK0 |= (1<<OCIE0A);
	while(sending);
}
     816:	1f 92       	push	r1
     818:	0f 92       	push	r0
     81a:	0f b6       	in	r0, 0x3f	; 63
     81c:	0f 92       	push	r0
     81e:	11 24       	eor	r1, r1
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
     824:	00 d0       	rcall	.+0      	; 0x826 <__vector_3+0x10>
     826:	cd b7       	in	r28, 0x3d	; 61
     828:	de b7       	in	r29, 0x3e	; 62
     82a:	1a 82       	std	Y+2, r1	; 0x02
     82c:	19 82       	std	Y+1, r1	; 0x01
     82e:	0f 90       	pop	r0
     830:	0f 90       	pop	r0
     832:	df 91       	pop	r29
     834:	cf 91       	pop	r28
     836:	0f 90       	pop	r0
     838:	0f be       	out	0x3f, r0	; 63
     83a:	0f 90       	pop	r0
     83c:	1f 90       	pop	r1
     83e:	18 95       	reti

00000840 <__vector_4>:
     840:	1f 92       	push	r1
     842:	0f 92       	push	r0
     844:	0f b6       	in	r0, 0x3f	; 63
     846:	0f 92       	push	r0
     848:	11 24       	eor	r1, r1
     84a:	8f 93       	push	r24
     84c:	9f 93       	push	r25
     84e:	ef 93       	push	r30
     850:	ff 93       	push	r31
     852:	16 bc       	out	0x26, r1	; 38
     854:	ec e6       	ldi	r30, 0x6C	; 108
     856:	f0 e0       	ldi	r31, 0x00	; 0
     858:	80 81       	ld	r24, Z
     85a:	87 7f       	andi	r24, 0xF7	; 247
     85c:	80 83       	st	Z, r24
     85e:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <rcv_error_stop>
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
     868:	99 e0       	ldi	r25, 0x09	; 9
     86a:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <rcv_bit_count>
     86e:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <rcv_char>
     872:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <receiving>
     876:	ee e6       	ldi	r30, 0x6E	; 110
     878:	f0 e0       	ldi	r31, 0x00	; 0
     87a:	80 81       	ld	r24, Z
     87c:	82 60       	ori	r24, 0x02	; 2
     87e:	80 83       	st	Z, r24
     880:	ff 91       	pop	r31
     882:	ef 91       	pop	r30
     884:	9f 91       	pop	r25
     886:	8f 91       	pop	r24
     888:	0f 90       	pop	r0
     88a:	0f be       	out	0x3f, r0	; 63
     88c:	0f 90       	pop	r0
     88e:	1f 90       	pop	r1
     890:	18 95       	reti

00000892 <mkm_wipe>:
     892:	13 9a       	sbi	0x02, 3	; 2
     894:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__EEPROM_REGION_LENGTH__+0x7f0064>
     898:	8b 7f       	andi	r24, 0xFB	; 251
     89a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__EEPROM_REGION_LENGTH__+0x7f0064>
     89e:	89 e0       	ldi	r24, 0x09	; 9
     8a0:	8d b9       	out	0x0d, r24	; 13
     8a2:	48 9a       	sbi	0x09, 0	; 9
     8a4:	81 e5       	ldi	r24, 0x51	; 81
     8a6:	8c bd       	out	0x2c, r24	; 44
     8a8:	15 9a       	sbi	0x02, 5	; 2
     8aa:	17 9a       	sbi	0x02, 7	; 2
     8ac:	16 98       	cbi	0x02, 6	; 2
     8ae:	15 98       	cbi	0x02, 5	; 2
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	8e bd       	out	0x2e, r24	; 46
     8b4:	0d b4       	in	r0, 0x2d	; 45
     8b6:	07 fe       	sbrs	r0, 7
     8b8:	fd cf       	rjmp	.-6      	; 0x8b4 <mkm_wipe+0x22>
     8ba:	80 e4       	ldi	r24, 0x40	; 64
     8bc:	8e bd       	out	0x2e, r24	; 46
     8be:	0d b4       	in	r0, 0x2d	; 45
     8c0:	07 fe       	sbrs	r0, 7
     8c2:	fd cf       	rjmp	.-6      	; 0x8be <mkm_wipe+0x2c>
     8c4:	15 9a       	sbi	0x02, 5	; 2
     8c6:	15 98       	cbi	0x02, 5	; 2
     8c8:	82 e0       	ldi	r24, 0x02	; 2
     8ca:	8e bd       	out	0x2e, r24	; 46
     8cc:	0d b4       	in	r0, 0x2d	; 45
     8ce:	07 fe       	sbrs	r0, 7
     8d0:	fd cf       	rjmp	.-6      	; 0x8cc <mkm_wipe+0x3a>
     8d2:	1e bc       	out	0x2e, r1	; 46
     8d4:	0d b4       	in	r0, 0x2d	; 45
     8d6:	07 fe       	sbrs	r0, 7
     8d8:	fd cf       	rjmp	.-6      	; 0x8d4 <mkm_wipe+0x42>
     8da:	1e bc       	out	0x2e, r1	; 46
     8dc:	0d b4       	in	r0, 0x2d	; 45
     8de:	07 fe       	sbrs	r0, 7
     8e0:	fd cf       	rjmp	.-6      	; 0x8dc <mkm_wipe+0x4a>
     8e2:	8f ef       	ldi	r24, 0xFF	; 255
     8e4:	9f e1       	ldi	r25, 0x1F	; 31
     8e6:	1e bc       	out	0x2e, r1	; 46
     8e8:	0d b4       	in	r0, 0x2d	; 45
     8ea:	07 fe       	sbrs	r0, 7
     8ec:	fd cf       	rjmp	.-6      	; 0x8e8 <mkm_wipe+0x56>
     8ee:	01 97       	sbiw	r24, 0x01	; 1
     8f0:	d1 f7       	brne	.-12     	; 0x8e6 <mkm_wipe+0x54>
     8f2:	15 9a       	sbi	0x02, 5	; 2
     8f4:	16 9a       	sbi	0x02, 6	; 2
     8f6:	17 98       	cbi	0x02, 7	; 2
     8f8:	8c b5       	in	r24, 0x2c	; 44
     8fa:	8f 7b       	andi	r24, 0xBF	; 191
     8fc:	8c bd       	out	0x2c, r24	; 44
     8fe:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__EEPROM_REGION_LENGTH__+0x7f0064>
     902:	84 60       	ori	r24, 0x04	; 4
     904:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__EEPROM_REGION_LENGTH__+0x7f0064>
     908:	13 98       	cbi	0x02, 3	; 2
     90a:	92 b1       	in	r25, 0x02	; 2
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	98 27       	eor	r25, r24
     910:	92 b9       	out	0x02, r25	; 2
     912:	92 b1       	in	r25, 0x02	; 2
     914:	98 27       	eor	r25, r24
     916:	92 b9       	out	0x02, r25	; 2
     918:	92 b1       	in	r25, 0x02	; 2
     91a:	98 27       	eor	r25, r24
     91c:	92 b9       	out	0x02, r25	; 2
     91e:	92 b1       	in	r25, 0x02	; 2
     920:	98 27       	eor	r25, r24
     922:	92 b9       	out	0x02, r25	; 2
     924:	92 b1       	in	r25, 0x02	; 2
     926:	98 27       	eor	r25, r24
     928:	92 b9       	out	0x02, r25	; 2
     92a:	92 b1       	in	r25, 0x02	; 2
     92c:	89 27       	eor	r24, r25
     92e:	82 b9       	out	0x02, r24	; 2
     930:	08 95       	ret

00000932 <__vector_1>:
     932:	1f 92       	push	r1
     934:	0f 92       	push	r0
     936:	0f b6       	in	r0, 0x3f	; 63
     938:	0f 92       	push	r0
     93a:	11 24       	eor	r1, r1
     93c:	2f 93       	push	r18
     93e:	3f 93       	push	r19
     940:	4f 93       	push	r20
     942:	5f 93       	push	r21
     944:	6f 93       	push	r22
     946:	7f 93       	push	r23
     948:	8f 93       	push	r24
     94a:	9f 93       	push	r25
     94c:	af 93       	push	r26
     94e:	bf 93       	push	r27
     950:	ef 93       	push	r30
     952:	ff 93       	push	r31
     954:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <case_enable>
     958:	88 23       	and	r24, r24
     95a:	21 f0       	breq	.+8      	; 0x964 <__vector_1+0x32>
     95c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <configured>
     960:	85 35       	cpi	r24, 0x55	; 85
     962:	89 f0       	breq	.+34     	; 0x986 <__vector_1+0x54>
     964:	ff 91       	pop	r31
     966:	ef 91       	pop	r30
     968:	bf 91       	pop	r27
     96a:	af 91       	pop	r26
     96c:	9f 91       	pop	r25
     96e:	8f 91       	pop	r24
     970:	7f 91       	pop	r23
     972:	6f 91       	pop	r22
     974:	5f 91       	pop	r21
     976:	4f 91       	pop	r20
     978:	3f 91       	pop	r19
     97a:	2f 91       	pop	r18
     97c:	0f 90       	pop	r0
     97e:	0f be       	out	0x3f, r0	; 63
     980:	0f 90       	pop	r0
     982:	1f 90       	pop	r1
     984:	18 95       	reti
     986:	f8 94       	cli
     988:	84 df       	rcall	.-248    	; 0x892 <mkm_wipe>
     98a:	88 e0       	ldi	r24, 0x08	; 8
     98c:	45 de       	rcall	.-886    	; 0x618 <ssp_write>
     98e:	44 dd       	rcall	.-1400   	; 0x418 <ssp_int_reset>
     990:	17 9a       	sbi	0x02, 7	; 2
     992:	16 98       	cbi	0x02, 6	; 2
     994:	1d ba       	out	0x1d, r1	; 29
     996:	78 94       	sei
     998:	e5 cf       	rjmp	.-54     	; 0x964 <__vector_1+0x32>

0000099a <process_message>:
     99a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <rcv_char>
     99e:	81 34       	cpi	r24, 0x41	; 65
     9a0:	09 f4       	brne	.+2      	; 0x9a4 <process_message+0xa>
     9a2:	cf c2       	rjmp	.+1438   	; 0xf42 <process_message+0x5a8>
     9a4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <rcv_char>
     9a8:	82 34       	cpi	r24, 0x42	; 66
     9aa:	09 f4       	brne	.+2      	; 0x9ae <process_message+0x14>
     9ac:	9c c2       	rjmp	.+1336   	; 0xee6 <process_message+0x54c>
     9ae:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <rcv_char>
     9b2:	83 34       	cpi	r24, 0x43	; 67
     9b4:	09 f4       	brne	.+2      	; 0x9b8 <process_message+0x1e>
     9b6:	69 c2       	rjmp	.+1234   	; 0xe8a <process_message+0x4f0>
     9b8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <rcv_char>
     9bc:	84 34       	cpi	r24, 0x44	; 68
     9be:	09 f4       	brne	.+2      	; 0x9c2 <process_message+0x28>
     9c0:	f7 c1       	rjmp	.+1006   	; 0xdb0 <process_message+0x416>
     9c2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <rcv_char>
     9c6:	85 34       	cpi	r24, 0x45	; 69
     9c8:	09 f4       	brne	.+2      	; 0x9cc <process_message+0x32>
     9ca:	94 c1       	rjmp	.+808    	; 0xcf4 <process_message+0x35a>
     9cc:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <rcv_char>
     9d0:	86 34       	cpi	r24, 0x46	; 70
     9d2:	09 f4       	brne	.+2      	; 0x9d6 <process_message+0x3c>
     9d4:	30 c1       	rjmp	.+608    	; 0xc36 <process_message+0x29c>
     9d6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <rcv_char>
     9da:	87 34       	cpi	r24, 0x47	; 71
     9dc:	09 f4       	brne	.+2      	; 0x9e0 <process_message+0x46>
     9de:	e6 c0       	rjmp	.+460    	; 0xbac <process_message+0x212>
     9e0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <rcv_char>
     9e4:	88 34       	cpi	r24, 0x48	; 72
     9e6:	09 f4       	brne	.+2      	; 0x9ea <process_message+0x50>
     9e8:	9c c0       	rjmp	.+312    	; 0xb22 <process_message+0x188>
     9ea:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <rcv_char>
     9ee:	8a 34       	cpi	r24, 0x4A	; 74
     9f0:	09 f4       	brne	.+2      	; 0x9f4 <process_message+0x5a>
     9f2:	7b c0       	rjmp	.+246    	; 0xaea <process_message+0x150>
     9f4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <rcv_char>
     9f8:	8c 34       	cpi	r24, 0x4C	; 76
     9fa:	09 f1       	breq	.+66     	; 0xa3e <process_message+0xa4>
     9fc:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <rcv_char>
     a00:	8b 34       	cpi	r24, 0x4B	; 75
     a02:	09 f0       	breq	.+2      	; 0xa06 <process_message+0x6c>
     a04:	08 95       	ret
     a06:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     a0a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <tamper_detected>
     a0e:	81 30       	cpi	r24, 0x01	; 1
     a10:	09 f4       	brne	.+2      	; 0xa14 <process_message+0x7a>
     a12:	02 c3       	rjmp	.+1540   	; 0x1018 <process_message+0x67e>
     a14:	84 e1       	ldi	r24, 0x14	; 20
     a16:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tx_char>
     a1a:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
     a24:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sending>
     a28:	16 bc       	out	0x26, r1	; 38
     a2a:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     a2e:	82 60       	ori	r24, 0x02	; 2
     a30:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     a34:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
     a38:	81 11       	cpse	r24, r1
     a3a:	fc cf       	rjmp	.-8      	; 0xa34 <process_message+0x9a>
     a3c:	08 95       	ret
     a3e:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     a42:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <fault_code>
     a46:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tx_char>
     a4a:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
     a4e:	81 e0       	ldi	r24, 0x01	; 1
     a50:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
     a54:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sending>
     a58:	16 bc       	out	0x26, r1	; 38
     a5a:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     a5e:	82 60       	ori	r24, 0x02	; 2
     a60:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     a64:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
     a68:	81 11       	cpse	r24, r1
     a6a:	fc cf       	rjmp	.-8      	; 0xa64 <process_message+0xca>
     a6c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <fault_value1>
     a70:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tx_char>
     a74:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
     a7e:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sending>
     a82:	16 bc       	out	0x26, r1	; 38
     a84:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     a88:	82 60       	ori	r24, 0x02	; 2
     a8a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     a8e:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
     a92:	81 11       	cpse	r24, r1
     a94:	fc cf       	rjmp	.-8      	; 0xa8e <process_message+0xf4>
     a96:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <fault_value2>
     a9a:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tx_char>
     a9e:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
     aa2:	81 e0       	ldi	r24, 0x01	; 1
     aa4:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
     aa8:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sending>
     aac:	16 bc       	out	0x26, r1	; 38
     aae:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     ab2:	82 60       	ori	r24, 0x02	; 2
     ab4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     ab8:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
     abc:	81 11       	cpse	r24, r1
     abe:	fc cf       	rjmp	.-8      	; 0xab8 <process_message+0x11e>
     ac0:	84 e1       	ldi	r24, 0x14	; 20
     ac2:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tx_char>
     ac6:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
     aca:	81 e0       	ldi	r24, 0x01	; 1
     acc:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
     ad0:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sending>
     ad4:	16 bc       	out	0x26, r1	; 38
     ad6:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     ada:	82 60       	ori	r24, 0x02	; 2
     adc:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     ae0:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
     ae4:	81 11       	cpse	r24, r1
     ae6:	fc cf       	rjmp	.-8      	; 0xae0 <process_message+0x146>
     ae8:	89 cf       	rjmp	.-238    	; 0x9fc <process_message+0x62>
     aea:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     aee:	16 9a       	sbi	0x02, 6	; 2
     af0:	17 98       	cbi	0x02, 7	; 2
     af2:	85 e5       	ldi	r24, 0x55	; 85
     af4:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <configured>
     af8:	84 e1       	ldi	r24, 0x14	; 20
     afa:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tx_char>
     afe:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
     b02:	81 e0       	ldi	r24, 0x01	; 1
     b04:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
     b08:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sending>
     b0c:	16 bc       	out	0x26, r1	; 38
     b0e:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     b12:	82 60       	ori	r24, 0x02	; 2
     b14:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     b18:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
     b1c:	81 11       	cpse	r24, r1
     b1e:	fc cf       	rjmp	.-8      	; 0xb18 <process_message+0x17e>
     b20:	69 cf       	rjmp	.-302    	; 0x9f4 <process_message+0x5a>
     b22:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     b26:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <temperature>
     b2a:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <temperature+0x1>
     b2e:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <tx_char>
     b32:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
     b3c:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sending>
     b40:	16 bc       	out	0x26, r1	; 38
     b42:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     b46:	82 60       	ori	r24, 0x02	; 2
     b48:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     b4c:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
     b50:	81 11       	cpse	r24, r1
     b52:	fc cf       	rjmp	.-8      	; 0xb4c <process_message+0x1b2>
     b54:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <temperature>
     b58:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <temperature+0x1>
     b5c:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tx_char>
     b60:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
     b6a:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sending>
     b6e:	16 bc       	out	0x26, r1	; 38
     b70:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     b74:	82 60       	ori	r24, 0x02	; 2
     b76:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     b7a:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
     b7e:	81 11       	cpse	r24, r1
     b80:	fc cf       	rjmp	.-8      	; 0xb7a <process_message+0x1e0>
     b82:	84 e1       	ldi	r24, 0x14	; 20
     b84:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tx_char>
     b88:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
     b8c:	81 e0       	ldi	r24, 0x01	; 1
     b8e:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
     b92:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sending>
     b96:	16 bc       	out	0x26, r1	; 38
     b98:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     b9c:	82 60       	ori	r24, 0x02	; 2
     b9e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     ba2:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
     ba6:	81 11       	cpse	r24, r1
     ba8:	fc cf       	rjmp	.-8      	; 0xba2 <process_message+0x208>
     baa:	1f cf       	rjmp	.-450    	; 0x9ea <process_message+0x50>
     bac:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     bb0:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <light>
     bb4:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <light+0x1>
     bb8:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <tx_char>
     bbc:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
     bc6:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sending>
     bca:	16 bc       	out	0x26, r1	; 38
     bcc:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     bd0:	82 60       	ori	r24, 0x02	; 2
     bd2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     bd6:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
     bda:	81 11       	cpse	r24, r1
     bdc:	fc cf       	rjmp	.-8      	; 0xbd6 <process_message+0x23c>
     bde:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <light>
     be2:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <light+0x1>
     be6:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tx_char>
     bea:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
     bf4:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sending>
     bf8:	16 bc       	out	0x26, r1	; 38
     bfa:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     bfe:	82 60       	ori	r24, 0x02	; 2
     c00:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     c04:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
     c08:	81 11       	cpse	r24, r1
     c0a:	fc cf       	rjmp	.-8      	; 0xc04 <process_message+0x26a>
     c0c:	84 e1       	ldi	r24, 0x14	; 20
     c0e:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tx_char>
     c12:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
     c1c:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sending>
     c20:	16 bc       	out	0x26, r1	; 38
     c22:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     c26:	82 60       	ori	r24, 0x02	; 2
     c28:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     c2c:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
     c30:	81 11       	cpse	r24, r1
     c32:	fc cf       	rjmp	.-8      	; 0xc2c <process_message+0x292>
     c34:	d5 ce       	rjmp	.-598    	; 0x9e0 <process_message+0x46>
     c36:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     c3a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <rcv_valid>
     c3e:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <rcv_error_stop>
     c42:	88 23       	and	r24, r24
     c44:	b9 f1       	breq	.+110    	; 0xcb4 <process_message+0x31a>
     c46:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     c4a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rcv_error_stop>
     c4e:	81 30       	cpi	r24, 0x01	; 1
     c50:	c9 f1       	breq	.+114    	; 0xcc4 <process_message+0x32a>
     c52:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <rcv_char>
     c56:	80 95       	com	r24
     c58:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <flags>
     c5c:	89 23       	and	r24, r25
     c5e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <flags>
     c62:	80 ff       	sbrs	r24, 0
     c64:	53 c2       	rjmp	.+1190   	; 0x110c <process_message+0x772>
     c66:	91 e0       	ldi	r25, 0x01	; 1
     c68:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <light_enable>
     c6c:	81 ff       	sbrs	r24, 1
     c6e:	4b c2       	rjmp	.+1174   	; 0x1106 <process_message+0x76c>
     c70:	91 e0       	ldi	r25, 0x01	; 1
     c72:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <temp_enable>
     c76:	82 ff       	sbrs	r24, 2
     c78:	43 c2       	rjmp	.+1158   	; 0x1100 <process_message+0x766>
     c7a:	91 e0       	ldi	r25, 0x01	; 1
     c7c:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <vibe_enable>
     c80:	83 fd       	sbrc	r24, 3
     c82:	50 c2       	rjmp	.+1184   	; 0x1124 <process_message+0x78a>
     c84:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <case_enable>
     c88:	1d ba       	out	0x1d, r1	; 29
     c8a:	84 e1       	ldi	r24, 0x14	; 20
     c8c:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tx_char>
     c90:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
     c9a:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sending>
     c9e:	16 bc       	out	0x26, r1	; 38
     ca0:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     ca4:	82 60       	ori	r24, 0x02	; 2
     ca6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     caa:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
     cae:	81 11       	cpse	r24, r1
     cb0:	fc cf       	rjmp	.-8      	; 0xcaa <process_message+0x310>
     cb2:	91 ce       	rjmp	.-734    	; 0x9d6 <process_message+0x3c>
     cb4:	99 23       	and	r25, r25
     cb6:	09 f2       	breq	.-126    	; 0xc3a <process_message+0x2a0>
     cb8:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     cbc:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rcv_error_stop>
     cc0:	81 30       	cpi	r24, 0x01	; 1
     cc2:	39 f6       	brne	.-114    	; 0xc52 <process_message+0x2b8>
     cc4:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <rcv_error_stop>
     cc8:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <light_status>
     ccc:	95 e1       	ldi	r25, 0x15	; 21
     cce:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <tx_char>
     cd2:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
     cd6:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
     cda:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sending>
     cde:	16 bc       	out	0x26, r1	; 38
     ce0:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     ce4:	82 60       	ori	r24, 0x02	; 2
     ce6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     cea:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
     cee:	81 11       	cpse	r24, r1
     cf0:	fc cf       	rjmp	.-8      	; 0xcea <process_message+0x350>
     cf2:	71 ce       	rjmp	.-798    	; 0x9d6 <process_message+0x3c>
     cf4:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     cf8:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <rcv_valid>
     cfc:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <rcv_error_stop>
     d00:	88 23       	and	r24, r24
     d02:	b1 f1       	breq	.+108    	; 0xd70 <process_message+0x3d6>
     d04:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     d08:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rcv_error_stop>
     d0c:	81 30       	cpi	r24, 0x01	; 1
     d0e:	c1 f1       	breq	.+112    	; 0xd80 <process_message+0x3e6>
     d10:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <rcv_char>
     d14:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <flags>
     d18:	89 2b       	or	r24, r25
     d1a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <flags>
     d1e:	80 ff       	sbrs	r24, 0
     d20:	fe c1       	rjmp	.+1020   	; 0x111e <process_message+0x784>
     d22:	91 e0       	ldi	r25, 0x01	; 1
     d24:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <light_enable>
     d28:	81 ff       	sbrs	r24, 1
     d2a:	f6 c1       	rjmp	.+1004   	; 0x1118 <process_message+0x77e>
     d2c:	91 e0       	ldi	r25, 0x01	; 1
     d2e:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <temp_enable>
     d32:	82 ff       	sbrs	r24, 2
     d34:	ee c1       	rjmp	.+988    	; 0x1112 <process_message+0x778>
     d36:	91 e0       	ldi	r25, 0x01	; 1
     d38:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <vibe_enable>
     d3c:	83 fd       	sbrc	r24, 3
     d3e:	f7 c1       	rjmp	.+1006   	; 0x112e <process_message+0x794>
     d40:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <case_enable>
     d44:	1d ba       	out	0x1d, r1	; 29
     d46:	84 e1       	ldi	r24, 0x14	; 20
     d48:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tx_char>
     d4c:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
     d56:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sending>
     d5a:	16 bc       	out	0x26, r1	; 38
     d5c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     d60:	82 60       	ori	r24, 0x02	; 2
     d62:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     d66:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
     d6a:	81 11       	cpse	r24, r1
     d6c:	fc cf       	rjmp	.-8      	; 0xd66 <process_message+0x3cc>
     d6e:	2e ce       	rjmp	.-932    	; 0x9cc <process_message+0x32>
     d70:	99 23       	and	r25, r25
     d72:	11 f2       	breq	.-124    	; 0xcf8 <process_message+0x35e>
     d74:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     d78:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rcv_error_stop>
     d7c:	81 30       	cpi	r24, 0x01	; 1
     d7e:	41 f6       	brne	.-112    	; 0xd10 <process_message+0x376>
     d80:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <rcv_error_stop>
     d84:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <light_status>
     d88:	95 e1       	ldi	r25, 0x15	; 21
     d8a:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <tx_char>
     d8e:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
     d92:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
     d96:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sending>
     d9a:	16 bc       	out	0x26, r1	; 38
     d9c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     da0:	82 60       	ori	r24, 0x02	; 2
     da2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     da6:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
     daa:	81 11       	cpse	r24, r1
     dac:	fc cf       	rjmp	.-8      	; 0xda6 <process_message+0x40c>
     dae:	0e ce       	rjmp	.-996    	; 0x9cc <process_message+0x32>
     db0:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <vibe_status>
     dba:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <rcv_valid>
     dbe:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <rcv_error_stop>
     dc2:	88 23       	and	r24, r24
     dc4:	e9 f1       	breq	.+122    	; 0xe40 <process_message+0x4a6>
     dc6:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <rcv_char>
     dca:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     dce:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rcv_error_stop>
     dd2:	81 30       	cpi	r24, 0x01	; 1
     dd4:	09 f4       	brne	.+2      	; 0xdd8 <process_message+0x43e>
     dd6:	34 c1       	rjmp	.+616    	; 0x1040 <process_message+0x6a6>
     dd8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <rcv_char>
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	38 2f       	mov	r19, r24
     de0:	22 27       	eor	r18, r18
     de2:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <rcv_valid>
     de6:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <rcv_error_stop>
     dea:	88 23       	and	r24, r24
     dec:	69 f1       	breq	.+90     	; 0xe48 <process_message+0x4ae>
     dee:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     df2:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rcv_error_stop>
     df6:	81 11       	cpse	r24, r1
     df8:	2f c0       	rjmp	.+94     	; 0xe58 <process_message+0x4be>
     dfa:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <rcv_char>
     dfe:	40 91 35 01 	lds	r20, 0x0135	; 0x800135 <vibe_status>
     e02:	44 23       	and	r20, r20
     e04:	09 f4       	brne	.+2      	; 0xe08 <process_message+0x46e>
     e06:	dd cd       	rjmp	.-1094   	; 0x9c2 <process_message+0x28>
     e08:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <vibe_lo_thresh>
     e0c:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <vibe_hi_thresh>
     e10:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <vibe_status>
     e14:	26 d9       	rcall	.-3508   	; 0x62 <adx_setup>
     e16:	84 e1       	ldi	r24, 0x14	; 20
     e18:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tx_char>
     e1c:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
     e26:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sending>
     e2a:	16 bc       	out	0x26, r1	; 38
     e2c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     e30:	82 60       	ori	r24, 0x02	; 2
     e32:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     e36:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
     e3a:	81 11       	cpse	r24, r1
     e3c:	fc cf       	rjmp	.-8      	; 0xe36 <process_message+0x49c>
     e3e:	c1 cd       	rjmp	.-1150   	; 0x9c2 <process_message+0x28>
     e40:	99 23       	and	r25, r25
     e42:	09 f4       	brne	.+2      	; 0xe46 <process_message+0x4ac>
     e44:	ba cf       	rjmp	.-140    	; 0xdba <process_message+0x420>
     e46:	bf cf       	rjmp	.-130    	; 0xdc6 <process_message+0x42c>
     e48:	99 23       	and	r25, r25
     e4a:	59 f2       	breq	.-106    	; 0xde2 <process_message+0x448>
     e4c:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     e50:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rcv_error_stop>
     e54:	88 23       	and	r24, r24
     e56:	89 f2       	breq	.-94     	; 0xdfa <process_message+0x460>
     e58:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <vibe_status>
     e5c:	85 e1       	ldi	r24, 0x15	; 21
     e5e:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tx_char>
     e62:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
     e6c:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sending>
     e70:	16 bc       	out	0x26, r1	; 38
     e72:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     e76:	82 60       	ori	r24, 0x02	; 2
     e78:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     e7c:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
     e80:	81 11       	cpse	r24, r1
     e82:	fc cf       	rjmp	.-8      	; 0xe7c <process_message+0x4e2>
     e84:	80 e0       	ldi	r24, 0x00	; 0
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	ba cf       	rjmp	.-140    	; 0xdfe <process_message+0x464>
     e8a:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     e8e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <rcv_valid>
     e92:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <rcv_error_stop>
     e96:	88 23       	and	r24, r24
     e98:	19 f1       	breq	.+70     	; 0xee0 <process_message+0x546>
     e9a:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     e9e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rcv_error_stop>
     ea2:	81 30       	cpi	r24, 0x01	; 1
     ea4:	09 f4       	brne	.+2      	; 0xea8 <process_message+0x50e>
     ea6:	e4 c0       	rjmp	.+456    	; 0x1070 <process_message+0x6d6>
     ea8:	84 e1       	ldi	r24, 0x14	; 20
     eaa:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tx_char>
     eae:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
     eb8:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sending>
     ebc:	16 bc       	out	0x26, r1	; 38
     ebe:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     ec2:	82 60       	ori	r24, 0x02	; 2
     ec4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     ec8:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
     ecc:	81 11       	cpse	r24, r1
     ece:	fc cf       	rjmp	.-8      	; 0xec8 <process_message+0x52e>
     ed0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <rcv_char>
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <temp_hi_thresh+0x1>
     eda:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <temp_hi_thresh>
     ede:	6c cd       	rjmp	.-1320   	; 0x9b8 <process_message+0x1e>
     ee0:	99 23       	and	r25, r25
     ee2:	a9 f2       	breq	.-86     	; 0xe8e <process_message+0x4f4>
     ee4:	da cf       	rjmp	.-76     	; 0xe9a <process_message+0x500>
     ee6:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     eea:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <rcv_valid>
     eee:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <rcv_error_stop>
     ef2:	88 23       	and	r24, r24
     ef4:	19 f1       	breq	.+70     	; 0xf3c <process_message+0x5a2>
     ef6:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     efa:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rcv_error_stop>
     efe:	81 30       	cpi	r24, 0x01	; 1
     f00:	09 f4       	brne	.+2      	; 0xf04 <process_message+0x56a>
     f02:	e6 c0       	rjmp	.+460    	; 0x10d0 <process_message+0x736>
     f04:	84 e1       	ldi	r24, 0x14	; 20
     f06:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tx_char>
     f0a:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
     f14:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sending>
     f18:	16 bc       	out	0x26, r1	; 38
     f1a:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     f1e:	82 60       	ori	r24, 0x02	; 2
     f20:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     f24:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
     f28:	81 11       	cpse	r24, r1
     f2a:	fc cf       	rjmp	.-8      	; 0xf24 <process_message+0x58a>
     f2c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <rcv_char>
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <temp_hi_thresh+0x1>
     f36:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <temp_hi_thresh>
     f3a:	39 cd       	rjmp	.-1422   	; 0x9ae <process_message+0x14>
     f3c:	99 23       	and	r25, r25
     f3e:	a9 f2       	breq	.-86     	; 0xeea <process_message+0x550>
     f40:	da cf       	rjmp	.-76     	; 0xef6 <process_message+0x55c>
     f42:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <light_status>
     f4c:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <rcv_valid>
     f50:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <rcv_error_stop>
     f54:	88 23       	and	r24, r24
     f56:	e9 f1       	breq	.+122    	; 0xfd2 <process_message+0x638>
     f58:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <rcv_char>
     f5c:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     f60:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rcv_error_stop>
     f64:	81 30       	cpi	r24, 0x01	; 1
     f66:	09 f4       	brne	.+2      	; 0xf6a <process_message+0x5d0>
     f68:	9b c0       	rjmp	.+310    	; 0x10a0 <process_message+0x706>
     f6a:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <rcv_char>
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	32 2f       	mov	r19, r18
     f72:	22 27       	eor	r18, r18
     f74:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <rcv_valid>
     f78:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <rcv_error_stop>
     f7c:	88 23       	and	r24, r24
     f7e:	69 f1       	breq	.+90     	; 0xfda <process_message+0x640>
     f80:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     f84:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rcv_error_stop>
     f88:	81 11       	cpse	r24, r1
     f8a:	2f c0       	rjmp	.+94     	; 0xfea <process_message+0x650>
     f8c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <rcv_char>
     f90:	28 2b       	or	r18, r24
     f92:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <light_status>
     f96:	88 23       	and	r24, r24
     f98:	09 f4       	brne	.+2      	; 0xf9c <process_message+0x602>
     f9a:	04 cd       	rjmp	.-1528   	; 0x9a4 <process_message+0xa>
     f9c:	30 93 32 01 	sts	0x0132, r19	; 0x800132 <light_thresh+0x1>
     fa0:	20 93 31 01 	sts	0x0131, r18	; 0x800131 <light_thresh>
     fa4:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <light_status>
     fa8:	84 e1       	ldi	r24, 0x14	; 20
     faa:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tx_char>
     fae:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
     fb8:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sending>
     fbc:	16 bc       	out	0x26, r1	; 38
     fbe:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     fc2:	82 60       	ori	r24, 0x02	; 2
     fc4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     fc8:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
     fcc:	81 11       	cpse	r24, r1
     fce:	fc cf       	rjmp	.-8      	; 0xfc8 <process_message+0x62e>
     fd0:	e9 cc       	rjmp	.-1582   	; 0x9a4 <process_message+0xa>
     fd2:	99 23       	and	r25, r25
     fd4:	09 f4       	brne	.+2      	; 0xfd8 <process_message+0x63e>
     fd6:	ba cf       	rjmp	.-140    	; 0xf4c <process_message+0x5b2>
     fd8:	bf cf       	rjmp	.-130    	; 0xf58 <process_message+0x5be>
     fda:	99 23       	and	r25, r25
     fdc:	59 f2       	breq	.-106    	; 0xf74 <process_message+0x5da>
     fde:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
     fe2:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rcv_error_stop>
     fe6:	88 23       	and	r24, r24
     fe8:	89 f2       	breq	.-94     	; 0xf8c <process_message+0x5f2>
     fea:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <light_status>
     fee:	85 e1       	ldi	r24, 0x15	; 21
     ff0:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tx_char>
     ff4:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
     ffe:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sending>
    1002:	16 bc       	out	0x26, r1	; 38
    1004:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
    1008:	82 60       	ori	r24, 0x02	; 2
    100a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
    100e:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
    1012:	81 11       	cpse	r24, r1
    1014:	fc cf       	rjmp	.-8      	; 0x100e <process_message+0x674>
    1016:	bd cf       	rjmp	.-134    	; 0xf92 <process_message+0x5f8>
    1018:	95 e1       	ldi	r25, 0x15	; 21
    101a:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <tx_char>
    101e:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
    1022:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
    1026:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sending>
    102a:	16 bc       	out	0x26, r1	; 38
    102c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
    1030:	82 60       	ori	r24, 0x02	; 2
    1032:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
    1036:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
    103a:	81 11       	cpse	r24, r1
    103c:	fc cf       	rjmp	.-8      	; 0x1036 <process_message+0x69c>
    103e:	08 95       	ret
    1040:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <rcv_error_stop>
    1044:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <vibe_status>
    1048:	95 e1       	ldi	r25, 0x15	; 21
    104a:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <tx_char>
    104e:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
    1052:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
    1056:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sending>
    105a:	16 bc       	out	0x26, r1	; 38
    105c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
    1060:	82 60       	ori	r24, 0x02	; 2
    1062:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
    1066:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
    106a:	81 11       	cpse	r24, r1
    106c:	fc cf       	rjmp	.-8      	; 0x1066 <process_message+0x6cc>
    106e:	b9 ce       	rjmp	.-654    	; 0xde2 <process_message+0x448>
    1070:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <rcv_error_stop>
    1074:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <light_status>
    1078:	95 e1       	ldi	r25, 0x15	; 21
    107a:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <tx_char>
    107e:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
    1082:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
    1086:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sending>
    108a:	16 bc       	out	0x26, r1	; 38
    108c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
    1090:	82 60       	ori	r24, 0x02	; 2
    1092:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
    1096:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
    109a:	81 11       	cpse	r24, r1
    109c:	fc cf       	rjmp	.-8      	; 0x1096 <process_message+0x6fc>
    109e:	8c cc       	rjmp	.-1768   	; 0x9b8 <process_message+0x1e>
    10a0:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <rcv_error_stop>
    10a4:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <light_status>
    10a8:	95 e1       	ldi	r25, 0x15	; 21
    10aa:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <tx_char>
    10ae:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
    10b2:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
    10b6:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sending>
    10ba:	16 bc       	out	0x26, r1	; 38
    10bc:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
    10c0:	82 60       	ori	r24, 0x02	; 2
    10c2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
    10c6:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
    10ca:	81 11       	cpse	r24, r1
    10cc:	fc cf       	rjmp	.-8      	; 0x10c6 <process_message+0x72c>
    10ce:	4f cf       	rjmp	.-354    	; 0xf6e <process_message+0x5d4>
    10d0:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <rcv_error_stop>
    10d4:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <light_status>
    10d8:	95 e1       	ldi	r25, 0x15	; 21
    10da:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <tx_char>
    10de:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
    10e2:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
    10e6:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sending>
    10ea:	16 bc       	out	0x26, r1	; 38
    10ec:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
    10f0:	82 60       	ori	r24, 0x02	; 2
    10f2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
    10f6:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
    10fa:	81 11       	cpse	r24, r1
    10fc:	fc cf       	rjmp	.-8      	; 0x10f6 <process_message+0x75c>
    10fe:	57 cc       	rjmp	.-1874   	; 0x9ae <process_message+0x14>
    1100:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <vibe_enable>
    1104:	bd cd       	rjmp	.-1158   	; 0xc80 <process_message+0x2e6>
    1106:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <temp_enable>
    110a:	b5 cd       	rjmp	.-1174   	; 0xc76 <process_message+0x2dc>
    110c:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <light_enable>
    1110:	ad cd       	rjmp	.-1190   	; 0xc6c <process_message+0x2d2>
    1112:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <vibe_enable>
    1116:	12 ce       	rjmp	.-988    	; 0xd3c <process_message+0x3a2>
    1118:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <temp_enable>
    111c:	0a ce       	rjmp	.-1004   	; 0xd32 <process_message+0x398>
    111e:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <light_enable>
    1122:	02 ce       	rjmp	.-1020   	; 0xd28 <process_message+0x38e>
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <case_enable>
    112a:	8d bb       	out	0x1d, r24	; 29
    112c:	ae cd       	rjmp	.-1188   	; 0xc8a <process_message+0x2f0>
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <case_enable>
    1134:	8d bb       	out	0x1d, r24	; 29
    1136:	07 ce       	rjmp	.-1010   	; 0xd46 <process_message+0x3ac>

00001138 <check_usart_faults>:

void check_usart_faults(){
	if ((light_fault > 20)&& (light_enable||temp_enable)){  //light and temp same chip
    1138:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <light_fault>
    113c:	85 31       	cpi	r24, 0x15	; 21
    113e:	78 f0       	brcs	.+30     	; 0x115e <check_usart_faults+0x26>
    1140:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <light_enable>
    1144:	88 23       	and	r24, r24
    1146:	09 f4       	brne	.+2      	; 0x114a <check_usart_faults+0x12>
    1148:	51 c0       	rjmp	.+162    	; 0x11ec <check_usart_faults+0xb4>
		fault_code = USART;
    114a:	80 e4       	ldi	r24, 0x40	; 64
    114c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <fault_code>
		fault_value1 = LIGHT;
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <fault_value1>
		fault_value2 = 0x00;
    1156:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <fault_value2>
		tamper_detected = 1;
    115a:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <tamper_detected>
	}
	if ((vibe_fault > 20) && vibe_enable){
    115e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <vibe_fault>
    1162:	85 31       	cpi	r24, 0x15	; 21
    1164:	20 f0       	brcs	.+8      	; 0x116e <check_usart_faults+0x36>
    1166:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <vibe_enable>
    116a:	81 11       	cpse	r24, r1
    116c:	33 c0       	rjmp	.+102    	; 0x11d4 <check_usart_faults+0x9c>
		fault_code = USART;
		fault_value1 = VIBE;
		fault_value2 = 0x00;
		tamper_detected = 1;
	}
	if ((ssp_fault >20) && case_enable) {
    116e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <ssp_fault>
    1172:	85 31       	cpi	r24, 0x15	; 21
    1174:	20 f0       	brcs	.+8      	; 0x117e <check_usart_faults+0x46>
    1176:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <case_enable>
    117a:	81 11       	cpse	r24, r1
    117c:	1f c0       	rjmp	.+62     	; 0x11bc <check_usart_faults+0x84>
		fault_code = USART;
		fault_value1 = SSP;
		fault_value2 = 0x00;
		tamper_detected = 1;
	}
	if (n25_fault >20) {
    117e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <n25_fault>
    1182:	85 31       	cpi	r24, 0x15	; 21
    1184:	58 f0       	brcs	.+22     	; 0x119c <check_usart_faults+0x64>
		fault_code = USART;
    1186:	80 e4       	ldi	r24, 0x40	; 64
    1188:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <fault_code>
		fault_value1 = N25;
    118c:	80 e2       	ldi	r24, 0x20	; 32
    118e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <fault_value1>
		fault_value2 = 0x00;
    1192:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <fault_value2>
		tamper_detected = 1;
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <tamper_detected>
	}
	if (unk_fault >20) {
    119c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <unk_fault>
    11a0:	85 31       	cpi	r24, 0x15	; 21
    11a2:	58 f0       	brcs	.+22     	; 0x11ba <check_usart_faults+0x82>
		fault_code = USART;
    11a4:	80 e4       	ldi	r24, 0x40	; 64
    11a6:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <fault_code>
		fault_value1 = UNK;
    11aa:	80 e8       	ldi	r24, 0x80	; 128
    11ac:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <fault_value1>
		fault_value2 = 0x00;
    11b0:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <fault_value2>
		tamper_detected = 1;
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <tamper_detected>
    11ba:	08 95       	ret
		fault_value1 = VIBE;
		fault_value2 = 0x00;
		tamper_detected = 1;
	}
	if ((ssp_fault >20) && case_enable) {
		fault_code = USART;
    11bc:	80 e4       	ldi	r24, 0x40	; 64
    11be:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <fault_code>
		fault_value1 = SSP;
    11c2:	80 e1       	ldi	r24, 0x10	; 16
    11c4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <fault_value1>
		fault_value2 = 0x00;
    11c8:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <fault_value2>
		tamper_detected = 1;
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <tamper_detected>
    11d2:	d5 cf       	rjmp	.-86     	; 0x117e <check_usart_faults+0x46>
		fault_value1 = LIGHT;
		fault_value2 = 0x00;
		tamper_detected = 1;
	}
	if ((vibe_fault > 20) && vibe_enable){
		fault_code = USART;
    11d4:	80 e4       	ldi	r24, 0x40	; 64
    11d6:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <fault_code>
		fault_value1 = VIBE;
    11da:	84 e0       	ldi	r24, 0x04	; 4
    11dc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <fault_value1>
		fault_value2 = 0x00;
    11e0:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <fault_value2>
		tamper_detected = 1;
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <tamper_detected>
    11ea:	c1 cf       	rjmp	.-126    	; 0x116e <check_usart_faults+0x36>
	TIMSK0 |= (1<<OCIE0A);
	while(sending);
}

void check_usart_faults(){
	if ((light_fault > 20)&& (light_enable||temp_enable)){  //light and temp same chip
    11ec:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <temp_enable>
    11f0:	88 23       	and	r24, r24
    11f2:	09 f4       	brne	.+2      	; 0x11f6 <check_usart_faults+0xbe>
    11f4:	b4 cf       	rjmp	.-152    	; 0x115e <check_usart_faults+0x26>
    11f6:	a9 cf       	rjmp	.-174    	; 0x114a <check_usart_faults+0x12>

000011f8 <main>:
}

static inline void
mkm_grab()
{
  MKM_CONTROL_FPGA_PORT |= _BV(MKM_CONTROL_FPGA_BIT);
    11f8:	17 9a       	sbi	0x02, 7	; 2
  MKM_CONTROL_AVR_PORT &= ~_BV(MKM_CONTROL_AVR_BIT);
    11fa:	16 98       	cbi	0x02, 6	; 2
static inline void
init_ports()
{
  /* Configure all PORTA pins except the tamper detection pin as
     outputs. */
  DDRA = 0xff & ~_BV(AVR_PANIC_BIT);
    11fc:	8f ee       	ldi	r24, 0xEF	; 239
    11fe:	81 b9       	out	0x01, r24	; 1
  //DDRB = 0xff & ~_BV(PINB3);
  //DDRB = 0xff & ~_BV(PINB2);
	DDRB = 0xf7; //was fb
    1200:	87 ef       	ldi	r24, 0xF7	; 247
    1202:	85 b9       	out	0x05, r24	; 5

static void
init_interrupts()
{
  //PCICR |= _BV(PCIE0|PCIE2);    /* Enable pin change interrupt on PCMSK0 & PCMSK2*/
  PCICR = (1<<PCIE0)|(1<<PCIE1)|(1<<PCIE2);
    1204:	87 e0       	ldi	r24, 0x07	; 7
    1206:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__EEPROM_REGION_LENGTH__+0x7f0068>
  PCMSK0 |= _BV(PCINT4);        /* Set mask bit for PCINT4 (panic) */
    120a:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__EEPROM_REGION_LENGTH__+0x7f006b>
    120e:	80 61       	ori	r24, 0x10	; 16
    1210:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__EEPROM_REGION_LENGTH__+0x7f006b>
  /*setup PC6 as tamper disable */
  //PUEC = (1<<PUEC6);			/*enable internal pull-up to avoid false triggers */ 
  PORTC |= (1<<PORTC6);
    1214:	56 9a       	sbi	0x0a, 6	; 10
  //PCMSK2 |= _BV(PCINT22);
  /*setup PB2 as soft-UART RX*/
  //PUEB = (1<<PUEB3) | (1<<PUEB2);			/*enable internal pull-up to detect start bit */
  PUEB = (1<<PUEB3);
    1216:	88 e0       	ldi	r24, 0x08	; 8
    1218:	87 b9       	out	0x07, r24	; 7
  PCMSK1 |= _BV(PCINT11);
    121a:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__EEPROM_REGION_LENGTH__+0x7f006c>
    121e:	88 60       	ori	r24, 0x08	; 8
    1220:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__EEPROM_REGION_LENGTH__+0x7f006c>
 // PCMSK1 |= _BV(PCINT10);
  sei();
    1224:	78 94       	sei
  init_power_reduction();
  init_interrupts();
  //mlx_get_calib();
  //init_tamper_values(0, 1);
	
  flags = 0xFF;
    1226:	8f ef       	ldi	r24, 0xFF	; 255
    1228:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <flags>
  configured = 0;
    122c:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <configured>
  tamper_detected = 0;
    1230:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <tamper_detected>
  uint8_t ssp_status = 0;
  sending = 0;
    1234:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <sending>
  receiving = 0;
    1238:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <receiving>
  tx_char = 0;
    123c:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <tx_char>
  tx_bit_count = 0;
    1240:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
  light_fault = 0;
    1244:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <light_fault>
  vibe_fault = 0;
    1248:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <vibe_fault>
  ssp_fault = 0;
    124c:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <ssp_fault>
  n25_fault = 0;
    1250:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <n25_fault>
  unk_fault = 0;
    1254:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <unk_fault>
  PORTB |= _BV(PORTB3);   //set TX idle high
    1258:	33 9a       	sbi	0x06, 3	; 6
  wd_init = 0x01;
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <wd_init>
  ssp_out = WDOG_RS;
    1260:	90 e1       	ldi	r25, 0x10	; 16
    1262:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <ssp_out>
  PORTC |= _BV(PORTC6);
    1266:	56 9a       	sbi	0x0a, 6	; 10
  TCNT0 = 0x00;
    1268:	16 bc       	out	0x26, r1	; 38
  TCCR0A = (1<<COM0A1) | (1 << WGM01);             //CTC mode
    126a:	92 e8       	ldi	r25, 0x82	; 130
    126c:	94 bd       	out	0x24, r25	; 36
  TCCR0B = (1 << CS00);              //div1
    126e:	85 bd       	out	0x25, r24	; 37
  OCR0A = 146;						// 208us compare value for 4800 baud was 180
    1270:	22 e9       	ldi	r18, 0x92	; 146
    1272:	27 bd       	out	0x27, r18	; 39
  
   TCNT1 = 0x00;
    1274:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
    1278:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
   TCCR1A = (1<<COM1A1) | (1 << WGM01);             //CTC mode
    127c:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__EEPROM_REGION_LENGTH__+0x7f0080>
   TCCR1B = (1 << CS00);              //div1
    1280:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__EEPROM_REGION_LENGTH__+0x7f0081>
   //OCR1A = 2000;						// 208us compare value for 4800 baud
   OCR1A = 2000;						// 208us compare value for 4800 baud
    1284:	80 ed       	ldi	r24, 0xD0	; 208
    1286:	97 e0       	ldi	r25, 0x07	; 7
    1288:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__EEPROM_REGION_LENGTH__+0x7f0089>
    128c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__EEPROM_REGION_LENGTH__+0x7f0088>
  spi_usart_setup(1);
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	d7 d7       	rcall	.+4014   	; 0x2244 <__TEXT_REGION_LENGTH__+0x244>
  //ensure that adx is also at low power mode

  adx_wr_reg(ADX_POWER_CTL, 0x00);
  adx_rd_reg(ADX_STATUS);*/
 
  ssp_boot();
    1296:	f5 d7       	rcall	.+4074   	; 0x2282 <__TEXT_REGION_LENGTH__+0x282>
  ssp_read_byte();
    1298:	3f d9       	rcall	.-3458   	; 0x518 <ssp_read_byte>
  //setup directions for ssp pins
  ssp_setup();
    129a:	3e d8       	rcall	.-3972   	; 0x318 <ssp_setup>
  //cycle the TAMP_CLR to reset the relays and turn of LEDS
  //to save power. Keep WDOG signal in high state
  ssp_write(ssp_out|0x02);
    129c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <ssp_out>
    12a0:	82 60       	ori	r24, 0x02	; 2
    12a2:	ba d9       	rcall	.-3212   	; 0x618 <ssp_write>
  ssp_write(ssp_out);
    12a4:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <ssp_out>
    12a8:	b7 d9       	rcall	.-3218   	; 0x618 <ssp_write>
  //setup the tamper monitoring input
  //ssp_int_config();
 uint8_t check =  ssp_read_byte();
    12aa:	36 d9       	rcall	.-3476   	; 0x518 <ssp_read_byte>
  //init_int0();
  //mlx_sleep();
  // do not need to configure these for tamper switch only 
  adx_setup();
    12ac:	da d6       	rcall	.+3508   	; 0x2062 <__TEXT_REGION_LENGTH__+0x62>
  mlx_reset();
    12ae:	c1 d7       	rcall	.+3970   	; 0x2232 <__TEXT_REGION_LENGTH__+0x232>
 // mlx_setup();
  mlx_setup();
    12b0:	b4 d7       	rcall	.+3944   	; 0x221a <__TEXT_REGION_LENGTH__+0x21a>
// mlx_write_reg(13, 0x94);
  mlx_start_meas();
    12b2:	58 d7       	rcall	.+3760   	; 0x2164 <__TEXT_REGION_LENGTH__+0x164>
  mlx_start_meas();
    12b4:	57 d7       	rcall	.+3758   	; 0x2164 <__TEXT_REGION_LENGTH__+0x164>
  mlx_start_meas();
    12b6:	56 d7       	rcall	.+3756   	; 0x2164 <__TEXT_REGION_LENGTH__+0x164>
}

static inline void
mkm_release()
{
  MKM_CONTROL_AVR_PORT |= _BV(MKM_CONTROL_AVR_BIT);
    12b8:	16 9a       	sbi	0x02, 6	; 2
  MKM_CONTROL_FPGA_PORT &= ~_BV(MKM_CONTROL_FPGA_BIT);
    12ba:	17 98       	cbi	0x02, 7	; 2
  
  //initTimer1(TWD_INIT);
  
  mkm_release();
  /* Flash LED's at startup. */
  AVR_LED_PORT |= 0x0f;
    12bc:	82 b1       	in	r24, 0x02	; 2
    12be:	8f 60       	ori	r24, 0x0F	; 15
    12c0:	82 b9       	out	0x02, r24	; 2
  for (int i = 0; i < 16000; i++);
  AVR_LED_PORT &= ~0x0f;
    12c2:	82 b1       	in	r24, 0x02	; 2
    12c4:	80 7f       	andi	r24, 0xF0	; 240
    12c6:	82 b9       	out	0x02, r24	; 2
  // go to sleep, interrupt will wake us
  //sleep();
  temperature = 80;
    12c8:	80 e5       	ldi	r24, 0x50	; 80
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <temperature+0x1>
    12d0:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <temperature>
  light = 0xaa55;
    12d4:	85 e5       	ldi	r24, 0x55	; 85
    12d6:	9a ea       	ldi	r25, 0xAA	; 170
    12d8:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <light+0x1>
    12dc:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <light>
  //init_int0();
  rcv_valid = 0;
    12e0:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
  sei();
    12e4:	78 94       	sei
		}
	}
}

void send(uint8_t tx){
	tx_char = tx;
    12e6:	d5 e1       	ldi	r29, 0x15	; 21
			//if ((ssp_status && LOW_VOLT)|(ssp_status && BATT_ON)) {
				//mkm_wipe();
			//}
			//read accelerometer 
			if ((adx_read_status() & ADX_ACT) && (vibe_enable)){
				fault_code = VIBE;
    12e8:	84 e0       	ldi	r24, 0x04	; 4
    12ea:	f8 2e       	mov	r15, r24
			mlx_start_meas();
			mlx_get_meas();
			//if temp is out side normal storage or sensor is exposed to bright light
			//actual values 1TBD 
			if ((((temperature > temp_hi_thresh) | (temperature < temp_lo_thresh)) && temp_enable) ){
				fault_code = TEMP;
    12ec:	02 e0       	ldi	r16, 0x02	; 2
				fault_value1 = ((uint8_t) temperature>>8);
				fault_value2 = ((uint8_t) temperature&0xFF);
				mkm_wipe();
			}
			if((light > light_thresh) && light_enable ) {
				fault_code = LIGHT;
    12ee:	11 e0       	ldi	r17, 0x01	; 1
    12f0:	04 c0       	rjmp	.+8      	; 0x12fa <main+0x102>
			start_bit = 1;
			process_message();
			send(0x15);
		}
		
		if (configured == 0x55) {
    12f2:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <configured>
    12f6:	85 35       	cpi	r24, 0x55	; 85
    12f8:	f9 f0       	breq	.+62     	; 0x1338 <main+0x140>
  sei();
  while (1)
    {
		//n25_read(0x00, 0x00, 0x00, 8);
		//read in character and echo back
		if (rcv_valid == 1){
    12fa:	c0 91 24 01 	lds	r28, 0x0124	; 0x800124 <rcv_valid>
    12fe:	c1 30       	cpi	r28, 0x01	; 1
    1300:	c1 f7       	brne	.-16     	; 0x12f2 <main+0xfa>
			rcv_valid = 0;
    1302:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rcv_valid>
			start_bit = 1;
    1306:	c0 93 18 01 	sts	0x0118, r28	; 0x800118 <start_bit>
			process_message();
    130a:	47 db       	rcall	.-2418   	; 0x99a <process_message>
		}
	}
}

void send(uint8_t tx){
	tx_char = tx;
    130c:	d0 93 34 01 	sts	0x0134, r29	; 0x800134 <tx_char>
	tx_bit_count = 0;
    1310:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tx_bit_count>
	start_bit = 1;
    1314:	c0 93 18 01 	sts	0x0118, r28	; 0x800118 <start_bit>
	sending = 1;
    1318:	c0 93 17 01 	sts	0x0117, r28	; 0x800117 <sending>
	TCNT0 = 0x00;						//reset counter to avoid glitch on next rcv char.
    131c:	16 bc       	out	0x26, r1	; 38
	TIMSK0 |= (1<<OCIE0A);
    131e:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
    1322:	82 60       	ori	r24, 0x02	; 2
    1324:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
	while(sending);
    1328:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
    132c:	81 11       	cpse	r24, r1
    132e:	fc cf       	rjmp	.-8      	; 0x1328 <main+0x130>
			start_bit = 1;
			process_message();
			send(0x15);
		}
		
		if (configured == 0x55) {
    1330:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <configured>
    1334:	85 35       	cpi	r24, 0x55	; 85
    1336:	09 f7       	brne	.-62     	; 0x12fa <main+0x102>
			check_usart_faults();
    1338:	ff de       	rcall	.-514    	; 0x1138 <check_usart_faults>
			//ssp_status = ssp_read_byte();
			//if ((ssp_status && LOW_VOLT)|(ssp_status && BATT_ON)) {
				//mkm_wipe();
			//}
			//read accelerometer 
			if ((adx_read_status() & ADX_ACT) && (vibe_enable)){
    133a:	fc d6       	rcall	.+3576   	; 0x2134 <__TEXT_REGION_LENGTH__+0x134>
    133c:	84 ff       	sbrs	r24, 4
    133e:	04 c0       	rjmp	.+8      	; 0x1348 <main+0x150>
    1340:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <vibe_enable>
    1344:	81 11       	cpse	r24, r1
    1346:	56 c0       	rjmp	.+172    	; 0x13f4 <main+0x1fc>
				fault_code = VIBE;
				mkm_wipe();
			}
			//}
			//read light and temp
			mlx_start_meas();
    1348:	0d d7       	rcall	.+3610   	; 0x2164 <__TEXT_REGION_LENGTH__+0x164>
			mlx_get_meas();
    134a:	15 d7       	rcall	.+3626   	; 0x2176 <__TEXT_REGION_LENGTH__+0x176>
			//if temp is out side normal storage or sensor is exposed to bright light
			//actual values 1TBD 
			if ((((temperature > temp_hi_thresh) | (temperature < temp_lo_thresh)) && temp_enable) ){
    134c:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <temperature>
    1350:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <temperature+0x1>
    1354:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <temp_hi_thresh>
    1358:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <temp_hi_thresh+0x1>
    135c:	60 91 19 01 	lds	r22, 0x0119	; 0x800119 <temperature>
    1360:	70 91 1a 01 	lds	r23, 0x011A	; 0x80011a <temperature+0x1>
    1364:	40 91 39 01 	lds	r20, 0x0139	; 0x800139 <temp_lo_thresh>
    1368:	50 91 3a 01 	lds	r21, 0x013A	; 0x80013a <temp_lo_thresh+0x1>
    136c:	82 17       	cp	r24, r18
    136e:	93 07       	cpc	r25, r19
    1370:	54 f5       	brge	.+84     	; 0x13c6 <main+0x1ce>
    1372:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <temp_enable>
    1376:	81 11       	cpse	r24, r1
    1378:	2d c0       	rjmp	.+90     	; 0x13d4 <main+0x1dc>
				fault_code = TEMP;
				fault_value1 = ((uint8_t) temperature>>8);
				fault_value2 = ((uint8_t) temperature&0xFF);
				mkm_wipe();
			}
			if((light > light_thresh) && light_enable ) {
    137a:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <light>
    137e:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <light+0x1>
    1382:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <light_thresh>
    1386:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <light_thresh+0x1>
    138a:	82 17       	cp	r24, r18
    138c:	93 07       	cpc	r25, r19
    138e:	08 f0       	brcs	.+2      	; 0x1392 <main+0x19a>
    1390:	b4 cf       	rjmp	.-152    	; 0x12fa <main+0x102>
    1392:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <light_enable>
    1396:	88 23       	and	r24, r24
    1398:	09 f4       	brne	.+2      	; 0x139c <main+0x1a4>
    139a:	af cf       	rjmp	.-162    	; 0x12fa <main+0x102>
				fault_code = LIGHT;
    139c:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <fault_code>
				fault_value1 = ((uint8_t) light>8);
    13a0:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <light>
    13a4:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <light+0x1>
    13a8:	99 27       	eor	r25, r25
    13aa:	21 e0       	ldi	r18, 0x01	; 1
    13ac:	09 97       	sbiw	r24, 0x09	; 9
    13ae:	0c f4       	brge	.+2      	; 0x13b2 <main+0x1ba>
    13b0:	20 e0       	ldi	r18, 0x00	; 0
    13b2:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <fault_value1>
				fault_value2 = ((uint8_t) light&0xFF);
    13b6:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <light>
    13ba:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <light+0x1>
    13be:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <fault_value2>
				mkm_wipe();
    13c2:	67 da       	rcall	.-2866   	; 0x892 <mkm_wipe>
    13c4:	9a cf       	rjmp	.-204    	; 0x12fa <main+0x102>
			//read light and temp
			mlx_start_meas();
			mlx_get_meas();
			//if temp is out side normal storage or sensor is exposed to bright light
			//actual values 1TBD 
			if ((((temperature > temp_hi_thresh) | (temperature < temp_lo_thresh)) && temp_enable) ){
    13c6:	64 17       	cp	r22, r20
    13c8:	75 07       	cpc	r23, r21
    13ca:	bc f6       	brge	.-82     	; 0x137a <main+0x182>
    13cc:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <temp_enable>
    13d0:	88 23       	and	r24, r24
    13d2:	99 f2       	breq	.-90     	; 0x137a <main+0x182>
				fault_code = TEMP;
    13d4:	00 93 07 01 	sts	0x0107, r16	; 0x800107 <fault_code>
				fault_value1 = ((uint8_t) temperature>>8);
    13d8:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <temperature>
    13dc:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <temperature+0x1>
    13e0:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <fault_value1>
				fault_value2 = ((uint8_t) temperature&0xFF);
    13e4:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <temperature>
    13e8:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <temperature+0x1>
    13ec:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <fault_value2>
				mkm_wipe();
    13f0:	50 da       	rcall	.-2912   	; 0x892 <mkm_wipe>
    13f2:	c3 cf       	rjmp	.-122    	; 0x137a <main+0x182>
			//if ((ssp_status && LOW_VOLT)|(ssp_status && BATT_ON)) {
				//mkm_wipe();
			//}
			//read accelerometer 
			if ((adx_read_status() & ADX_ACT) && (vibe_enable)){
				fault_code = VIBE;
    13f4:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <fault_code>
				mkm_wipe();
    13f8:	4c da       	rcall	.-2920   	; 0x892 <mkm_wipe>
    13fa:	a6 cf       	rjmp	.-180    	; 0x1348 <main+0x150>

000013fc <__vector_12>:
}


//soft-uart timer
ISR (TIMER0_COMPA_vect)
{
    13fc:	1f 92       	push	r1
    13fe:	0f 92       	push	r0
    1400:	0f b6       	in	r0, 0x3f	; 63
    1402:	0f 92       	push	r0
    1404:	11 24       	eor	r1, r1
    1406:	2f 93       	push	r18
    1408:	3f 93       	push	r19
    140a:	4f 93       	push	r20
    140c:	5f 93       	push	r21
    140e:	8f 93       	push	r24
    1410:	9f 93       	push	r25
	/*disable interrupts, should we or allow NMI of tamper switch detect? */
	//cli();
	//sei();
	TCNT0 = 0x00;
    1412:	16 bc       	out	0x26, r1	; 38
	int i;
	PORTC ^= _BV(PORTC6);		//toggle gp6 to check on progress
    1414:	9a b1       	in	r25, 0x0a	; 10
    1416:	80 e4       	ldi	r24, 0x40	; 64
    1418:	89 27       	eor	r24, r25
    141a:	8a b9       	out	0x0a, r24	; 10
	if (receiving) {
    141c:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <receiving>
    1420:	88 23       	and	r24, r24
    1422:	49 f0       	breq	.+18     	; 0x1436 <__vector_12+0x3a>
		if (start_bit)	{
    1424:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <start_bit>
    1428:	88 23       	and	r24, r24
    142a:	79 f1       	breq	.+94     	; 0x148a <__vector_12+0x8e>
			start_bit--;
    142c:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <start_bit>
    1430:	81 50       	subi	r24, 0x01	; 1
    1432:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <start_bit>
				//return;
			}
			rcv_bit_count--;
		}
	}
	if (sending){
    1436:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sending>
    143a:	88 23       	and	r24, r24
    143c:	d9 f0       	breq	.+54     	; 0x1474 <__vector_12+0x78>
		if (start_bit == 1)	{
    143e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <start_bit>
    1442:	81 30       	cpi	r24, 0x01	; 1
    1444:	09 f4       	brne	.+2      	; 0x1448 <__vector_12+0x4c>
    1446:	54 c0       	rjmp	.+168    	; 0x14f0 <__vector_12+0xf4>
			start_bit = 0;
			PORTB &= ~_BV(PORTB2);  //PORTB3 to PORTB2
		}
		else {
			if (tx_bit_count<8){
    1448:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <tx_bit_count>
    144c:	88 30       	cpi	r24, 0x08	; 8
    144e:	d8 f5       	brcc	.+118    	; 0x14c6 <__vector_12+0xca>
				if (tx_char & (1<<tx_bit_count)){  //check the bit sending LSB first
    1450:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <tx_char>
    1454:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <tx_bit_count>
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <__vector_12+0x64>
    145c:	95 95       	asr	r25
    145e:	87 95       	ror	r24
    1460:	2a 95       	dec	r18
    1462:	e2 f7       	brpl	.-8      	; 0x145c <__vector_12+0x60>
    1464:	80 ff       	sbrs	r24, 0
    1466:	3d c0       	rjmp	.+122    	; 0x14e2 <__vector_12+0xe6>
					PORTB |= _BV(PORTB2);
    1468:	32 9a       	sbi	0x06, 2	; 6
				PORTB |= _BV(PORTB2);        //send stop bit
				TIMSK0 &= ~(1<<OCIE0A);		//stop the bit timer
				sending = 0;
				PORTC |= _BV(PORTC6);
			}
			tx_bit_count++;
    146a:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <tx_bit_count>
    146e:	8f 5f       	subi	r24, 0xFF	; 255
    1470:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <tx_bit_count>
		
	}
	//
	//sei();
	
}
    1474:	9f 91       	pop	r25
    1476:	8f 91       	pop	r24
    1478:	5f 91       	pop	r21
    147a:	4f 91       	pop	r20
    147c:	3f 91       	pop	r19
    147e:	2f 91       	pop	r18
    1480:	0f 90       	pop	r0
    1482:	0f be       	out	0x3f, r0	; 63
    1484:	0f 90       	pop	r0
    1486:	1f 90       	pop	r1
    1488:	18 95       	reti
		if (start_bit)	{
			start_bit--;
			//skip first bit
		}
		else {	
			if (rcv_bit_count-1 > 0) {     //looking for data) 
    148a:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <rcv_bit_count>
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	02 97       	sbiw	r24, 0x02	; 2
    1492:	94 f1       	brlt	.+100    	; 0x14f8 <__vector_12+0xfc>
				rcv_char |= ((PINB & (1<<3))>>3)<<(9-rcv_bit_count);  //from (1<<2) to (1<<3)
    1494:	84 b1       	in	r24, 0x04	; 4
    1496:	50 91 27 01 	lds	r21, 0x0127	; 0x800127 <rcv_bit_count>
    149a:	40 91 20 01 	lds	r20, 0x0120	; 0x800120 <rcv_char>
    149e:	83 fb       	bst	r24, 3
    14a0:	22 27       	eor	r18, r18
    14a2:	20 f9       	bld	r18, 0
    14a4:	89 e0       	ldi	r24, 0x09	; 9
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	85 1b       	sub	r24, r21
    14aa:	91 09       	sbc	r25, r1
    14ac:	01 c0       	rjmp	.+2      	; 0x14b0 <__vector_12+0xb4>
    14ae:	22 0f       	add	r18, r18
    14b0:	8a 95       	dec	r24
    14b2:	ea f7       	brpl	.-6      	; 0x14ae <__vector_12+0xb2>
    14b4:	24 2b       	or	r18, r20
    14b6:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <rcv_char>
				//PCICR |= _BV(PCIE1);
				PORTC |= _BV(PORTC6);
				receiving = 0;
				//return;
			}
			rcv_bit_count--;
    14ba:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <rcv_bit_count>
    14be:	81 50       	subi	r24, 0x01	; 1
    14c0:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <rcv_bit_count>
    14c4:	b8 cf       	rjmp	.-144    	; 0x1436 <__vector_12+0x3a>
				}
				else{
					PORTB &= ~_BV(PORTB2);
				}
			}
			else if (tx_bit_count == 8){
    14c6:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <tx_bit_count>
    14ca:	88 30       	cpi	r24, 0x08	; 8
    14cc:	71 f6       	brne	.-100    	; 0x146a <__vector_12+0x6e>
				PORTB |= _BV(PORTB2);        //send stop bit
    14ce:	32 9a       	sbi	0x06, 2	; 6
				TIMSK0 &= ~(1<<OCIE0A);		//stop the bit timer
    14d0:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
    14d4:	8d 7f       	andi	r24, 0xFD	; 253
    14d6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
				sending = 0;
    14da:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <sending>
				PORTC |= _BV(PORTC6);
    14de:	56 9a       	sbi	0x0a, 6	; 10
    14e0:	c4 cf       	rjmp	.-120    	; 0x146a <__vector_12+0x6e>
			if (tx_bit_count<8){
				if (tx_char & (1<<tx_bit_count)){  //check the bit sending LSB first
					PORTB |= _BV(PORTB2);
				}
				else{
					PORTB &= ~_BV(PORTB2);
    14e2:	32 98       	cbi	0x06, 2	; 6
				PORTB |= _BV(PORTB2);        //send stop bit
				TIMSK0 &= ~(1<<OCIE0A);		//stop the bit timer
				sending = 0;
				PORTC |= _BV(PORTC6);
			}
			tx_bit_count++;
    14e4:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <tx_bit_count>
    14e8:	8f 5f       	subi	r24, 0xFF	; 255
    14ea:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <tx_bit_count>
    14ee:	c2 cf       	rjmp	.-124    	; 0x1474 <__vector_12+0x78>
			rcv_bit_count--;
		}
	}
	if (sending){
		if (start_bit == 1)	{
			start_bit = 0;
    14f0:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <start_bit>
			PORTB &= ~_BV(PORTB2);  //PORTB3 to PORTB2
    14f4:	32 98       	cbi	0x06, 2	; 6
    14f6:	be cf       	rjmp	.-132    	; 0x1474 <__vector_12+0x78>
		else {	
			if (rcv_bit_count-1 > 0) {     //looking for data) 
				rcv_char |= ((PINB & (1<<3))>>3)<<(9-rcv_bit_count);  //from (1<<2) to (1<<3)
				//rcv[9-rcv_bit_count] = (PINB & (1<<3))>>3;
			}
			else if (rcv_bit_count == 0) {  //looking for stop bit
    14f8:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <rcv_bit_count>
    14fc:	81 11       	cpse	r24, r1
    14fe:	dd cf       	rjmp	.-70     	; 0x14ba <__vector_12+0xbe>
				if (PINB & (1<<PINB3)) {    //PINB2 to PINB3
					rcv_valid = 1;
    1500:	81 e0       	ldi	r24, 0x01	; 1
			if (rcv_bit_count-1 > 0) {     //looking for data) 
				rcv_char |= ((PINB & (1<<3))>>3)<<(9-rcv_bit_count);  //from (1<<2) to (1<<3)
				//rcv[9-rcv_bit_count] = (PINB & (1<<3))>>3;
			}
			else if (rcv_bit_count == 0) {  //looking for stop bit
				if (PINB & (1<<PINB3)) {    //PINB2 to PINB3
    1502:	23 9b       	sbis	0x04, 3	; 4
    1504:	14 c0       	rjmp	.+40     	; 0x152e <__vector_12+0x132>
					rcv_valid = 1;
    1506:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <rcv_valid>
					AVR_LED_PORT ^= _BV(AVR_LED_RED_BIT);
    150a:	92 b1       	in	r25, 0x02	; 2
    150c:	88 e0       	ldi	r24, 0x08	; 8
    150e:	89 27       	eor	r24, r25
    1510:	82 b9       	out	0x02, r24	; 2
				}
				else {
					rcv_error_stop = 1;
				}
				TIMSK0 &= ~(1<<OCIE0A);		//stop the bit timer
    1512:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
    1516:	8d 7f       	andi	r24, 0xFD	; 253
    1518:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
				PCMSK1 |= _BV(PCINT11);		//enable start bit detect INT10 to INT11
    151c:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__EEPROM_REGION_LENGTH__+0x7f006c>
    1520:	88 60       	ori	r24, 0x08	; 8
    1522:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__EEPROM_REGION_LENGTH__+0x7f006c>
				//PCICR |= _BV(PCIE1);
				PORTC |= _BV(PORTC6);
    1526:	56 9a       	sbi	0x0a, 6	; 10
				receiving = 0;
    1528:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <receiving>
    152c:	c6 cf       	rjmp	.-116    	; 0x14ba <__vector_12+0xbe>
				if (PINB & (1<<PINB3)) {    //PINB2 to PINB3
					rcv_valid = 1;
					AVR_LED_PORT ^= _BV(AVR_LED_RED_BIT);
				}
				else {
					rcv_error_stop = 1;
    152e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <rcv_error_stop>
    1532:	ef cf       	rjmp	.-34     	; 0x1512 <__vector_12+0x116>

00001534 <__vector_9>:
	//sei();
	
}

ISR (TIMER1_COMPA_vect)
{
    1534:	1f 92       	push	r1
    1536:	0f 92       	push	r0
    1538:	0f b6       	in	r0, 0x3f	; 63
    153a:	0f 92       	push	r0
    153c:	11 24       	eor	r1, r1
    153e:	8f 93       	push	r24
    1540:	ef 93       	push	r30
    1542:	ff 93       	push	r31
	/*disable interrupts, should we or allow NMI of tamper switch detect? */
	//cli();
	//sei();
	TCNT1 = 0x00;
    1544:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
    1548:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	int i;
	//PORTC ^= _BV(PORTC6);		//toggle gp6 to check on progress
	TIMSK1 &= ~(1<<OCIE1A);		//stop the  timer
    154c:	ef e6       	ldi	r30, 0x6F	; 111
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	8d 7f       	andi	r24, 0xFD	; 253
    1554:	80 83       	st	Z, r24
	usart_to = 0;
    1556:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <usart_to>
	
    155a:	ff 91       	pop	r31
    155c:	ef 91       	pop	r30
    155e:	8f 91       	pop	r24
    1560:	0f 90       	pop	r0
    1562:	0f be       	out	0x3f, r0	; 63
    1564:	0f 90       	pop	r0
    1566:	1f 90       	pop	r1
    1568:	18 95       	reti

0000156a <__divmodhi4>:
    156a:	97 fb       	bst	r25, 7
    156c:	07 2e       	mov	r0, r23
    156e:	16 f4       	brtc	.+4      	; 0x1574 <__divmodhi4+0xa>
    1570:	00 94       	com	r0
    1572:	06 d0       	rcall	.+12     	; 0x1580 <__divmodhi4_neg1>
    1574:	77 fd       	sbrc	r23, 7
    1576:	08 d0       	rcall	.+16     	; 0x1588 <__divmodhi4_neg2>
    1578:	0b d0       	rcall	.+22     	; 0x1590 <__udivmodhi4>
    157a:	07 fc       	sbrc	r0, 7
    157c:	05 d0       	rcall	.+10     	; 0x1588 <__divmodhi4_neg2>
    157e:	3e f4       	brtc	.+14     	; 0x158e <__divmodhi4_exit>

00001580 <__divmodhi4_neg1>:
    1580:	90 95       	com	r25
    1582:	81 95       	neg	r24
    1584:	9f 4f       	sbci	r25, 0xFF	; 255
    1586:	08 95       	ret

00001588 <__divmodhi4_neg2>:
    1588:	70 95       	com	r23
    158a:	61 95       	neg	r22
    158c:	7f 4f       	sbci	r23, 0xFF	; 255

0000158e <__divmodhi4_exit>:
    158e:	08 95       	ret

00001590 <__udivmodhi4>:
    1590:	aa 1b       	sub	r26, r26
    1592:	bb 1b       	sub	r27, r27
    1594:	51 e1       	ldi	r21, 0x11	; 17
    1596:	07 c0       	rjmp	.+14     	; 0x15a6 <__udivmodhi4_ep>

00001598 <__udivmodhi4_loop>:
    1598:	aa 1f       	adc	r26, r26
    159a:	bb 1f       	adc	r27, r27
    159c:	a6 17       	cp	r26, r22
    159e:	b7 07       	cpc	r27, r23
    15a0:	10 f0       	brcs	.+4      	; 0x15a6 <__udivmodhi4_ep>
    15a2:	a6 1b       	sub	r26, r22
    15a4:	b7 0b       	sbc	r27, r23

000015a6 <__udivmodhi4_ep>:
    15a6:	88 1f       	adc	r24, r24
    15a8:	99 1f       	adc	r25, r25
    15aa:	5a 95       	dec	r21
    15ac:	a9 f7       	brne	.-22     	; 0x1598 <__udivmodhi4_loop>
    15ae:	80 95       	com	r24
    15b0:	90 95       	com	r25
    15b2:	bc 01       	movw	r22, r24
    15b4:	cd 01       	movw	r24, r26
    15b6:	08 95       	ret

000015b8 <_exit>:
    15b8:	f8 94       	cli

000015ba <__stop_program>:
    15ba:	ff cf       	rjmp	.-2      	; 0x15ba <__stop_program>
