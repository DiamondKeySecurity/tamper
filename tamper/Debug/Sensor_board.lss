
Sensor_board.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000195c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000096  00800100  00800100  0000195c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000195c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000198c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  000019c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006113  00000000  00000000  00001c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011cb  00000000  00000000  00007d33  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001da5  00000000  00000000  00008efe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005dc  00000000  00000000  0000aca4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b19  00000000  00000000  0000b280  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001313  00000000  00000000  0000bd99  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000228  00000000  00000000  0000d0ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
       2:	ae c4       	rjmp	.+2396   	; 0x960 <__vector_1>
       4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
       6:	29 c4       	rjmp	.+2130   	; 0x85a <__vector_3>
       8:	3d c4       	rjmp	.+2170   	; 0x884 <__vector_4>
       a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
       c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
       e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
      10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
      12:	6c ca       	rjmp	.-2856   	; 0xfffff4ec <__eeprom_end+0xff7ef4ec>
      14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
      16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
      18:	02 cb       	rjmp	.-2556   	; 0xfffff61e <__eeprom_end+0xff7ef61e>
      1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
      1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
      1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
      20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
      22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
      24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
      26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
      28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
      2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
      2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
      2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
      30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
      32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
      34:	11 24       	eor	r1, r1
      36:	1f be       	out	0x3f, r1	; 63
      38:	cf ef       	ldi	r28, 0xFF	; 255
      3a:	d2 e0       	ldi	r29, 0x02	; 2
      3c:	de bf       	out	0x3e, r29	; 62
      3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
      40:	21 e0       	ldi	r18, 0x01	; 1
      42:	a0 e0       	ldi	r26, 0x00	; 0
      44:	b1 e0       	ldi	r27, 0x01	; 1
      46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
      48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
      4a:	a6 39       	cpi	r26, 0x96	; 150
      4c:	b2 07       	cpc	r27, r18
      4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
      50:	eb d7       	rcall	.+4054   	; 0x1028 <main>
      52:	48 cc       	rjmp	.-1904   	; 0xfffff8e4 <__eeprom_end+0xff7ef8e4>

00000054 <__bad_interrupt>:
      54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <adx_chip_select.part.0>:
	USART_Receive(ADX_RD, VIBE);
	USART_Receive(reg, VIBE);  //device id address 0x00
	temp = USART_Receive(0x00, VIBE);
	adx_chip_select(0);
	return temp;
}
      56:	54 98       	cbi	0x0a, 4	; 10
      58:	08 95       	ret

0000005a <adx_chip_select>:
      5a:	89 2b       	or	r24, r25
      5c:	09 f0       	breq	.+2      	; 0x60 <adx_chip_select+0x6>
      5e:	fb cf       	rjmp	.-10     	; 0x56 <adx_chip_select.part.0>
      60:	54 9a       	sbi	0x0a, 4	; 10
      62:	08 95       	ret

00000064 <adx_soft_r>:
      64:	f8 df       	rcall	.-16     	; 0x56 <adx_chip_select.part.0>
      66:	64 e0       	ldi	r22, 0x04	; 4
      68:	8a e0       	ldi	r24, 0x0A	; 10
      6a:	b2 d2       	rcall	.+1380   	; 0x5d0 <USART_Receive>
      6c:	64 e0       	ldi	r22, 0x04	; 4
      6e:	8f e1       	ldi	r24, 0x1F	; 31
      70:	af d2       	rcall	.+1374   	; 0x5d0 <USART_Receive>
      72:	64 e0       	ldi	r22, 0x04	; 4
      74:	82 e5       	ldi	r24, 0x52	; 82
      76:	ac d2       	rcall	.+1368   	; 0x5d0 <USART_Receive>
      78:	80 e0       	ldi	r24, 0x00	; 0
      7a:	90 e0       	ldi	r25, 0x00	; 0
      7c:	ee cf       	rjmp	.-36     	; 0x5a <adx_chip_select>

0000007e <adx_setup>:
      7e:	eb df       	rcall	.-42     	; 0x56 <adx_chip_select.part.0>
      80:	64 e0       	ldi	r22, 0x04	; 4
      82:	8a e0       	ldi	r24, 0x0A	; 10
      84:	a5 d2       	rcall	.+1354   	; 0x5d0 <USART_Receive>
      86:	64 e0       	ldi	r22, 0x04	; 4
      88:	8f e1       	ldi	r24, 0x1F	; 31
      8a:	a2 d2       	rcall	.+1348   	; 0x5d0 <USART_Receive>
      8c:	64 e0       	ldi	r22, 0x04	; 4
      8e:	82 e5       	ldi	r24, 0x52	; 82
      90:	9f d2       	rcall	.+1342   	; 0x5d0 <USART_Receive>
      92:	80 e0       	ldi	r24, 0x00	; 0
      94:	90 e0       	ldi	r25, 0x00	; 0
      96:	e1 df       	rcall	.-62     	; 0x5a <adx_chip_select>
      98:	de df       	rcall	.-68     	; 0x56 <adx_chip_select.part.0>
      9a:	64 e0       	ldi	r22, 0x04	; 4
      9c:	8a e0       	ldi	r24, 0x0A	; 10
      9e:	98 d2       	rcall	.+1328   	; 0x5d0 <USART_Receive>
      a0:	64 e0       	ldi	r22, 0x04	; 4
      a2:	80 e2       	ldi	r24, 0x20	; 32
      a4:	95 d2       	rcall	.+1322   	; 0x5d0 <USART_Receive>
      a6:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <vibe_lo_thresh>
      aa:	64 e0       	ldi	r22, 0x04	; 4
      ac:	91 d2       	rcall	.+1314   	; 0x5d0 <USART_Receive>
      ae:	80 e0       	ldi	r24, 0x00	; 0
      b0:	90 e0       	ldi	r25, 0x00	; 0
      b2:	d3 df       	rcall	.-90     	; 0x5a <adx_chip_select>
      b4:	d0 df       	rcall	.-96     	; 0x56 <adx_chip_select.part.0>
      b6:	64 e0       	ldi	r22, 0x04	; 4
      b8:	8a e0       	ldi	r24, 0x0A	; 10
      ba:	8a d2       	rcall	.+1300   	; 0x5d0 <USART_Receive>
      bc:	64 e0       	ldi	r22, 0x04	; 4
      be:	81 e2       	ldi	r24, 0x21	; 33
      c0:	87 d2       	rcall	.+1294   	; 0x5d0 <USART_Receive>
      c2:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <vibe_hi_thresh>
      c6:	64 e0       	ldi	r22, 0x04	; 4
      c8:	83 d2       	rcall	.+1286   	; 0x5d0 <USART_Receive>
      ca:	80 e0       	ldi	r24, 0x00	; 0
      cc:	90 e0       	ldi	r25, 0x00	; 0
      ce:	c5 df       	rcall	.-118    	; 0x5a <adx_chip_select>
      d0:	c2 df       	rcall	.-124    	; 0x56 <adx_chip_select.part.0>
      d2:	64 e0       	ldi	r22, 0x04	; 4
      d4:	8a e0       	ldi	r24, 0x0A	; 10
      d6:	7c d2       	rcall	.+1272   	; 0x5d0 <USART_Receive>
      d8:	64 e0       	ldi	r22, 0x04	; 4
      da:	82 e2       	ldi	r24, 0x22	; 34
      dc:	79 d2       	rcall	.+1266   	; 0x5d0 <USART_Receive>
      de:	64 e0       	ldi	r22, 0x04	; 4
      e0:	80 e0       	ldi	r24, 0x00	; 0
      e2:	76 d2       	rcall	.+1260   	; 0x5d0 <USART_Receive>
      e4:	80 e0       	ldi	r24, 0x00	; 0
      e6:	90 e0       	ldi	r25, 0x00	; 0
      e8:	b8 df       	rcall	.-144    	; 0x5a <adx_chip_select>
      ea:	b5 df       	rcall	.-150    	; 0x56 <adx_chip_select.part.0>
      ec:	64 e0       	ldi	r22, 0x04	; 4
      ee:	8a e0       	ldi	r24, 0x0A	; 10
      f0:	6f d2       	rcall	.+1246   	; 0x5d0 <USART_Receive>
      f2:	64 e0       	ldi	r22, 0x04	; 4
      f4:	87 e2       	ldi	r24, 0x27	; 39
      f6:	6c d2       	rcall	.+1240   	; 0x5d0 <USART_Receive>
      f8:	64 e0       	ldi	r22, 0x04	; 4
      fa:	80 e0       	ldi	r24, 0x00	; 0
      fc:	69 d2       	rcall	.+1234   	; 0x5d0 <USART_Receive>
      fe:	80 e0       	ldi	r24, 0x00	; 0
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	ab df       	rcall	.-170    	; 0x5a <adx_chip_select>
     104:	a8 df       	rcall	.-176    	; 0x56 <adx_chip_select.part.0>
     106:	64 e0       	ldi	r22, 0x04	; 4
     108:	8a e0       	ldi	r24, 0x0A	; 10
     10a:	62 d2       	rcall	.+1220   	; 0x5d0 <USART_Receive>
     10c:	64 e0       	ldi	r22, 0x04	; 4
     10e:	88 e2       	ldi	r24, 0x28	; 40
     110:	5f d2       	rcall	.+1214   	; 0x5d0 <USART_Receive>
     112:	64 e0       	ldi	r22, 0x04	; 4
     114:	80 e0       	ldi	r24, 0x00	; 0
     116:	5c d2       	rcall	.+1208   	; 0x5d0 <USART_Receive>
     118:	80 e0       	ldi	r24, 0x00	; 0
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	9e df       	rcall	.-196    	; 0x5a <adx_chip_select>
     11e:	9b df       	rcall	.-202    	; 0x56 <adx_chip_select.part.0>
     120:	64 e0       	ldi	r22, 0x04	; 4
     122:	8a e0       	ldi	r24, 0x0A	; 10
     124:	55 d2       	rcall	.+1194   	; 0x5d0 <USART_Receive>
     126:	64 e0       	ldi	r22, 0x04	; 4
     128:	89 e2       	ldi	r24, 0x29	; 41
     12a:	52 d2       	rcall	.+1188   	; 0x5d0 <USART_Receive>
     12c:	64 e0       	ldi	r22, 0x04	; 4
     12e:	88 ec       	ldi	r24, 0xC8	; 200
     130:	4f d2       	rcall	.+1182   	; 0x5d0 <USART_Receive>
     132:	80 e0       	ldi	r24, 0x00	; 0
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	91 df       	rcall	.-222    	; 0x5a <adx_chip_select>
     138:	8e df       	rcall	.-228    	; 0x56 <adx_chip_select.part.0>
     13a:	64 e0       	ldi	r22, 0x04	; 4
     13c:	8a e0       	ldi	r24, 0x0A	; 10
     13e:	48 d2       	rcall	.+1168   	; 0x5d0 <USART_Receive>
     140:	64 e0       	ldi	r22, 0x04	; 4
     142:	8a e2       	ldi	r24, 0x2A	; 42
     144:	45 d2       	rcall	.+1162   	; 0x5d0 <USART_Receive>
     146:	64 e0       	ldi	r22, 0x04	; 4
     148:	80 e1       	ldi	r24, 0x10	; 16
     14a:	42 d2       	rcall	.+1156   	; 0x5d0 <USART_Receive>
     14c:	80 e0       	ldi	r24, 0x00	; 0
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	84 df       	rcall	.-248    	; 0x5a <adx_chip_select>
     152:	81 df       	rcall	.-254    	; 0x56 <adx_chip_select.part.0>
     154:	64 e0       	ldi	r22, 0x04	; 4
     156:	8a e0       	ldi	r24, 0x0A	; 10
     158:	3b d2       	rcall	.+1142   	; 0x5d0 <USART_Receive>
     15a:	64 e0       	ldi	r22, 0x04	; 4
     15c:	8b e2       	ldi	r24, 0x2B	; 43
     15e:	38 d2       	rcall	.+1136   	; 0x5d0 <USART_Receive>
     160:	64 e0       	ldi	r22, 0x04	; 4
     162:	80 e1       	ldi	r24, 0x10	; 16
     164:	35 d2       	rcall	.+1130   	; 0x5d0 <USART_Receive>
     166:	80 e0       	ldi	r24, 0x00	; 0
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	77 df       	rcall	.-274    	; 0x5a <adx_chip_select>
     16c:	74 df       	rcall	.-280    	; 0x56 <adx_chip_select.part.0>
     16e:	64 e0       	ldi	r22, 0x04	; 4
     170:	8a e0       	ldi	r24, 0x0A	; 10
     172:	2e d2       	rcall	.+1116   	; 0x5d0 <USART_Receive>
     174:	64 e0       	ldi	r22, 0x04	; 4
     176:	8c e2       	ldi	r24, 0x2C	; 44
     178:	2b d2       	rcall	.+1110   	; 0x5d0 <USART_Receive>
     17a:	64 e0       	ldi	r22, 0x04	; 4
     17c:	83 e0       	ldi	r24, 0x03	; 3
     17e:	28 d2       	rcall	.+1104   	; 0x5d0 <USART_Receive>
     180:	80 e0       	ldi	r24, 0x00	; 0
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	6a df       	rcall	.-300    	; 0x5a <adx_chip_select>
     186:	67 df       	rcall	.-306    	; 0x56 <adx_chip_select.part.0>
     188:	64 e0       	ldi	r22, 0x04	; 4
     18a:	8a e0       	ldi	r24, 0x0A	; 10
     18c:	21 d2       	rcall	.+1090   	; 0x5d0 <USART_Receive>
     18e:	64 e0       	ldi	r22, 0x04	; 4
     190:	8d e2       	ldi	r24, 0x2D	; 45
     192:	1e d2       	rcall	.+1084   	; 0x5d0 <USART_Receive>
     194:	64 e0       	ldi	r22, 0x04	; 4
     196:	8a e0       	ldi	r24, 0x0A	; 10
     198:	1b d2       	rcall	.+1078   	; 0x5d0 <USART_Receive>
     19a:	80 e0       	ldi	r24, 0x00	; 0
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	5d cf       	rjmp	.-326    	; 0x5a <adx_chip_select>

000001a0 <adx_temp>:
     1a0:	cf 93       	push	r28
     1a2:	df 93       	push	r29
     1a4:	58 df       	rcall	.-336    	; 0x56 <adx_chip_select.part.0>
     1a6:	64 e0       	ldi	r22, 0x04	; 4
     1a8:	8b e0       	ldi	r24, 0x0B	; 11
     1aa:	12 d2       	rcall	.+1060   	; 0x5d0 <USART_Receive>
     1ac:	64 e0       	ldi	r22, 0x04	; 4
     1ae:	84 e1       	ldi	r24, 0x14	; 20
     1b0:	0f d2       	rcall	.+1054   	; 0x5d0 <USART_Receive>
     1b2:	64 e0       	ldi	r22, 0x04	; 4
     1b4:	80 e0       	ldi	r24, 0x00	; 0
     1b6:	0c d2       	rcall	.+1048   	; 0x5d0 <USART_Receive>
     1b8:	c8 2f       	mov	r28, r24
     1ba:	64 e0       	ldi	r22, 0x04	; 4
     1bc:	80 e0       	ldi	r24, 0x00	; 0
     1be:	08 d2       	rcall	.+1040   	; 0x5d0 <USART_Receive>
     1c0:	d8 2f       	mov	r29, r24
     1c2:	80 e0       	ldi	r24, 0x00	; 0
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	49 df       	rcall	.-366    	; 0x5a <adx_chip_select>
     1c8:	6c 2f       	mov	r22, r28
     1ca:	70 e0       	ldi	r23, 0x00	; 0
     1cc:	7d 2b       	or	r23, r29
     1ce:	07 2e       	mov	r0, r23
     1d0:	00 0c       	add	r0, r0
     1d2:	88 0b       	sbc	r24, r24
     1d4:	99 0b       	sbc	r25, r25
     1d6:	8f da       	rcall	.-2786   	; 0xfffff6f6 <__eeprom_end+0xff7ef6f6>
     1d8:	28 eb       	ldi	r18, 0xB8	; 184
     1da:	3e e1       	ldi	r19, 0x1E	; 30
     1dc:	45 e8       	ldi	r20, 0x85	; 133
     1de:	5d e3       	ldi	r21, 0x3D	; 61
     1e0:	ee da       	rcall	.-2596   	; 0xfffff7be <__eeprom_end+0xff7ef7be>
     1e2:	56 da       	rcall	.-2900   	; 0xfffff690 <__eeprom_end+0xff7ef690>
     1e4:	60 93 5c 01 	sts	0x015C, r22	; 0x80015c <temperature>
     1e8:	70 93 5d 01 	sts	0x015D, r23	; 0x80015d <temperature+0x1>
     1ec:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <temperature+0x2>
     1f0:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <temperature+0x3>
     1f4:	df 91       	pop	r29
     1f6:	cf 91       	pop	r28
     1f8:	08 95       	ret

000001fa <adx_read_status>:

uint8_t adx_read_status(){
     1fa:	0f 93       	push	r16
     1fc:	1f 93       	push	r17
     1fe:	cf 93       	push	r28
     200:	2a df       	rcall	.-428    	; 0x56 <adx_chip_select.part.0>
	/* ADX status */
	uint8_t temp;
	adx_chip_select(1);
	USART_Receive(ADX_RD, VIBE);
     202:	64 e0       	ldi	r22, 0x04	; 4
     204:	8b e0       	ldi	r24, 0x0B	; 11
     206:	e4 d1       	rcall	.+968    	; 0x5d0 <USART_Receive>
	USART_Receive(ADX_STATUS, VIBE);  //device id address 0x00
     208:	64 e0       	ldi	r22, 0x04	; 4
     20a:	8b e0       	ldi	r24, 0x0B	; 11
     20c:	e1 d1       	rcall	.+962    	; 0x5d0 <USART_Receive>
	temp = USART_Receive(0x00, VIBE);
     20e:	64 e0       	ldi	r22, 0x04	; 4
     210:	80 e0       	ldi	r24, 0x00	; 0
     212:	de d1       	rcall	.+956    	; 0x5d0 <USART_Receive>
     214:	c8 2f       	mov	r28, r24
	//temp = USART_Receive(0x00, VIBE);
    adx_chip_select(0);
     216:	80 e0       	ldi	r24, 0x00	; 0
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	1f df       	rcall	.-450    	; 0x5a <adx_chip_select>
     21c:	1c df       	rcall	.-456    	; 0x56 <adx_chip_select.part.0>
	adx_chip_select(1);
	USART_Receive(ADX_RD, VIBE);
     21e:	64 e0       	ldi	r22, 0x04	; 4
     220:	8b e0       	ldi	r24, 0x0B	; 11
     222:	d6 d1       	rcall	.+940    	; 0x5d0 <USART_Receive>
	USART_Receive(0x0E, VIBE);  //register 0x27
     224:	64 e0       	ldi	r22, 0x04	; 4
     226:	8e e0       	ldi	r24, 0x0E	; 14
     228:	d3 d1       	rcall	.+934    	; 0x5d0 <USART_Receive>
	xlo = USART_Receive(0x00, VIBE);		// x-axis LSB
     22a:	64 e0       	ldi	r22, 0x04	; 4
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	d0 d1       	rcall	.+928    	; 0x5d0 <USART_Receive>
     230:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <xlo>
	xhi = USART_Receive(0x00, VIBE);	// x-axis MSB
     234:	64 e0       	ldi	r22, 0x04	; 4
     236:	80 e0       	ldi	r24, 0x00	; 0
     238:	cb d1       	rcall	.+918    	; 0x5d0 <USART_Receive>
     23a:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <xhi>
	ylo = USART_Receive(0x00, VIBE);		// y-axis LSB
     23e:	64 e0       	ldi	r22, 0x04	; 4
     240:	80 e0       	ldi	r24, 0x00	; 0
     242:	c6 d1       	rcall	.+908    	; 0x5d0 <USART_Receive>
     244:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <ylo>
	yhi = USART_Receive(0x00, VIBE);		// y-axis MSB
     248:	64 e0       	ldi	r22, 0x04	; 4
     24a:	80 e0       	ldi	r24, 0x00	; 0
     24c:	c1 d1       	rcall	.+898    	; 0x5d0 <USART_Receive>
     24e:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <yhi>
	zlo = USART_Receive(0x00, VIBE);			// z-axis LSB
     252:	64 e0       	ldi	r22, 0x04	; 4
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	bc d1       	rcall	.+888    	; 0x5d0 <USART_Receive>
     258:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <zlo>
	zhi = USART_Receive(0x00, VIBE);	// z-axis MSB
     25c:	64 e0       	ldi	r22, 0x04	; 4
     25e:	80 e0       	ldi	r24, 0x00	; 0
     260:	b7 d1       	rcall	.+878    	; 0x5d0 <USART_Receive>
     262:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <zhi>
	adx_chip_select(0);
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	f7 de       	rcall	.-530    	; 0x5a <adx_chip_select>
	x = (uint16_t)xhi<<8 | (uint16_t)xlo;
     26c:	20 91 75 01 	lds	r18, 0x0175	; 0x800175 <xhi>
     270:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <xlo>
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	92 2b       	or	r25, r18
     278:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <x+0x1>
     27c:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <x>
	y = (uint16_t)yhi<<8 | (uint16_t)ylo;
     280:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <yhi>
     284:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <ylo>
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	92 2b       	or	r25, r18
     28c:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <y+0x1>
     290:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <y>
	z = (uint16_t)zhi<<8 | (uint16_t)zlo;
     294:	20 91 61 01 	lds	r18, 0x0161	; 0x800161 <zhi>
     298:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <zlo>
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	92 2b       	or	r25, r18
     2a0:	90 93 68 01 	sts	0x0168, r25	; 0x800168 <z+0x1>
     2a4:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <z>
	//x and y values are static at rest , while z has a constant 1G, at least on earth
	if (abs(x)>vibe_thresh | abs(y) > vibe_thresh | abs(z) > vibe_thresh + 1000)
     2a8:	40 91 4e 01 	lds	r20, 0x014E	; 0x80014e <x>
     2ac:	50 91 4f 01 	lds	r21, 0x014F	; 0x80014f <x+0x1>
     2b0:	00 91 94 01 	lds	r16, 0x0194	; 0x800194 <vibe_thresh>
     2b4:	10 91 95 01 	lds	r17, 0x0195	; 0x800195 <vibe_thresh+0x1>
     2b8:	20 91 73 01 	lds	r18, 0x0173	; 0x800173 <y>
     2bc:	30 91 74 01 	lds	r19, 0x0174	; 0x800174 <y+0x1>
     2c0:	a0 91 94 01 	lds	r26, 0x0194	; 0x800194 <vibe_thresh>
     2c4:	b0 91 95 01 	lds	r27, 0x0195	; 0x800195 <vibe_thresh+0x1>
     2c8:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <z>
     2cc:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <z+0x1>
     2d0:	60 91 94 01 	lds	r22, 0x0194	; 0x800194 <vibe_thresh>
     2d4:	70 91 95 01 	lds	r23, 0x0195	; 0x800195 <vibe_thresh+0x1>
     2d8:	57 ff       	sbrs	r21, 7
     2da:	03 c0       	rjmp	.+6      	; 0x2e2 <adx_read_status+0xe8>
     2dc:	51 95       	neg	r21
     2de:	41 95       	neg	r20
     2e0:	51 09       	sbc	r21, r1
     2e2:	e1 e0       	ldi	r30, 0x01	; 1
     2e4:	04 17       	cp	r16, r20
     2e6:	15 07       	cpc	r17, r21
     2e8:	08 f0       	brcs	.+2      	; 0x2ec <adx_read_status+0xf2>
     2ea:	e0 e0       	ldi	r30, 0x00	; 0
     2ec:	37 ff       	sbrs	r19, 7
     2ee:	03 c0       	rjmp	.+6      	; 0x2f6 <adx_read_status+0xfc>
     2f0:	31 95       	neg	r19
     2f2:	21 95       	neg	r18
     2f4:	31 09       	sbc	r19, r1
     2f6:	41 e0       	ldi	r20, 0x01	; 1
     2f8:	a2 17       	cp	r26, r18
     2fa:	b3 07       	cpc	r27, r19
     2fc:	08 f0       	brcs	.+2      	; 0x300 <__stack+0x1>
     2fe:	40 e0       	ldi	r20, 0x00	; 0
     300:	4e 2b       	or	r20, r30
     302:	59 f4       	brne	.+22     	; 0x31a <__stack+0x1b>
     304:	97 ff       	sbrs	r25, 7
     306:	03 c0       	rjmp	.+6      	; 0x30e <__stack+0xf>
     308:	91 95       	neg	r25
     30a:	81 95       	neg	r24
     30c:	91 09       	sbc	r25, r1
     30e:	9b 01       	movw	r18, r22
     310:	28 51       	subi	r18, 0x18	; 24
     312:	3c 4f       	sbci	r19, 0xFC	; 252
     314:	28 17       	cp	r18, r24
     316:	39 07       	cpc	r19, r25
     318:	08 f4       	brcc	.+2      	; 0x31c <__stack+0x1d>
	{
		temp |= 0x10;
     31a:	c0 61       	ori	r28, 0x10	; 16
		
	}
	return temp;
}
     31c:	8c 2f       	mov	r24, r28
     31e:	cf 91       	pop	r28
     320:	1f 91       	pop	r17
     322:	0f 91       	pop	r16
     324:	08 95       	ret

00000326 <adx_set_threshold>:

void adx_set_threshold(){
     326:	97 de       	rcall	.-722    	; 0x56 <adx_chip_select.part.0>
	//adx_wr_reg(ADX_THRESH_ACT_L, vibe_lo_thresh);
	adx_chip_select(1);
	USART_Receive(ADX_WR, VIBE);
     328:	64 e0       	ldi	r22, 0x04	; 4
     32a:	8a e0       	ldi	r24, 0x0A	; 10
     32c:	51 d1       	rcall	.+674    	; 0x5d0 <USART_Receive>
	USART_Receive(ADX_THRESH_ACT_L, VIBE);		//0x20
     32e:	64 e0       	ldi	r22, 0x04	; 4
     330:	80 e2       	ldi	r24, 0x20	; 32
     332:	4e d1       	rcall	.+668    	; 0x5d0 <USART_Receive>
	USART_Receive(vibe_lo_thresh, VIBE);		//register
     334:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <vibe_lo_thresh>
     338:	64 e0       	ldi	r22, 0x04	; 4
     33a:	4a d1       	rcall	.+660    	; 0x5d0 <USART_Receive>
	adx_chip_select(0);
     33c:	80 e0       	ldi	r24, 0x00	; 0
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	8c de       	rcall	.-744    	; 0x5a <adx_chip_select>
     342:	89 de       	rcall	.-750    	; 0x56 <adx_chip_select.part.0>
	//adx_wr_reg(ADX_THRESH_ACT_H, vibe_hi_thresh);
	adx_chip_select(1);
	USART_Receive(ADX_WR, VIBE);
     344:	64 e0       	ldi	r22, 0x04	; 4
     346:	8a e0       	ldi	r24, 0x0A	; 10
     348:	43 d1       	rcall	.+646    	; 0x5d0 <USART_Receive>
	USART_Receive(ADX_THRESH_ACT_H, VIBE);		//0x21
     34a:	64 e0       	ldi	r22, 0x04	; 4
     34c:	81 e2       	ldi	r24, 0x21	; 33
     34e:	40 d1       	rcall	.+640    	; 0x5d0 <USART_Receive>
	USART_Receive(vibe_hi_thresh, VIBE);		//register
     350:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <vibe_hi_thresh>
     354:	64 e0       	ldi	r22, 0x04	; 4
     356:	3c d1       	rcall	.+632    	; 0x5d0 <USART_Receive>
	adx_chip_select(0);
     358:	80 e0       	ldi	r24, 0x00	; 0
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	7e ce       	rjmp	.-772    	; 0x5a <adx_chip_select>

0000035e <adx_read_fifo_count>:
}

uint16_t adx_read_fifo_count(){
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
     362:	79 de       	rcall	.-782    	; 0x56 <adx_chip_select.part.0>
	/* get number of samples in fifo */
	uint8_t temp;
	uint16_t samples, sample;
	adx_chip_select(1);
	USART_Receive(ADX_RD, VIBE);
     364:	64 e0       	ldi	r22, 0x04	; 4
     366:	8b e0       	ldi	r24, 0x0B	; 11
     368:	33 d1       	rcall	.+614    	; 0x5d0 <USART_Receive>
	USART_Receive(ADX_FIFO_ENTRIES, VIBE);  //device id address 0x00
     36a:	64 e0       	ldi	r22, 0x04	; 4
     36c:	8c e0       	ldi	r24, 0x0C	; 12
     36e:	30 d1       	rcall	.+608    	; 0x5d0 <USART_Receive>
	temp = USART_Receive(0x00, VIBE);
     370:	64 e0       	ldi	r22, 0x04	; 4
     372:	80 e0       	ldi	r24, 0x00	; 0
     374:	2d d1       	rcall	.+602    	; 0x5d0 <USART_Receive>
     376:	c8 2f       	mov	r28, r24
	samples = (uint16_t)  USART_Receive(0x00, VIBE)<<8 |(uint16_t) temp;
     378:	64 e0       	ldi	r22, 0x04	; 4
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	29 d1       	rcall	.+594    	; 0x5d0 <USART_Receive>
     37e:	d0 e0       	ldi	r29, 0x00	; 0
     380:	d8 2b       	or	r29, r24
    adx_chip_select(0);
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	69 de       	rcall	.-814    	; 0x5a <adx_chip_select>
	return samples;
}
     388:	ce 01       	movw	r24, r28
     38a:	df 91       	pop	r29
     38c:	cf 91       	pop	r28
     38e:	08 95       	ret

00000390 <n25_chip_select>:
#include "tamper.h"
#include "ssp.h"


void n25_chip_select(int select_flag)
{
     390:	08 95       	ret

00000392 <mlx_chip_select.part.0>:
}
void mlx_nop(){
	mlx_chip_select(1);
	USART_Receive(0, LIGHT);
	USART_Receive(0, LIGHT);
	mlx_chip_select(0);
     392:	55 98       	cbi	0x0a, 5	; 10
     394:	08 95       	ret

00000396 <mlx_chip_select>:
     396:	89 2b       	or	r24, r25
     398:	09 f0       	breq	.+2      	; 0x39c <mlx_chip_select+0x6>
     39a:	fb cf       	rjmp	.-10     	; 0x392 <mlx_chip_select.part.0>
     39c:	55 9a       	sbi	0x0a, 5	; 10
     39e:	08 95       	ret

000003a0 <mlx_start_meas>:
     3a0:	f8 df       	rcall	.-16     	; 0x392 <mlx_chip_select.part.0>
     3a2:	61 e0       	ldi	r22, 0x01	; 1
     3a4:	80 ed       	ldi	r24, 0xD0	; 208
     3a6:	14 d1       	rcall	.+552    	; 0x5d0 <USART_Receive>
     3a8:	61 e0       	ldi	r22, 0x01	; 1
     3aa:	80 ec       	ldi	r24, 0xC0	; 192
     3ac:	11 d1       	rcall	.+546    	; 0x5d0 <USART_Receive>
     3ae:	80 e0       	ldi	r24, 0x00	; 0
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	f1 cf       	rjmp	.-30     	; 0x396 <mlx_chip_select>

000003b4 <mlx_get_meas>:
     3b4:	cf 93       	push	r28
     3b6:	df 93       	push	r29
     3b8:	00 d0       	rcall	.+0      	; 0x3ba <mlx_get_meas+0x6>
     3ba:	cd b7       	in	r28, 0x3d	; 61
     3bc:	de b7       	in	r29, 0x3e	; 62
     3be:	e9 df       	rcall	.-46     	; 0x392 <mlx_chip_select.part.0>
     3c0:	61 e0       	ldi	r22, 0x01	; 1
     3c2:	83 ec       	ldi	r24, 0xC3	; 195
     3c4:	05 d1       	rcall	.+522    	; 0x5d0 <USART_Receive>
     3c6:	61 e0       	ldi	r22, 0x01	; 1
     3c8:	80 e0       	ldi	r24, 0x00	; 0
     3ca:	02 d1       	rcall	.+516    	; 0x5d0 <USART_Receive>
     3cc:	61 e0       	ldi	r22, 0x01	; 1
     3ce:	80 e0       	ldi	r24, 0x00	; 0
     3d0:	ff d0       	rcall	.+510    	; 0x5d0 <USART_Receive>
     3d2:	8a 83       	std	Y+2, r24	; 0x02
     3d4:	61 e0       	ldi	r22, 0x01	; 1
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	fb d0       	rcall	.+502    	; 0x5d0 <USART_Receive>
     3da:	89 83       	std	Y+1, r24	; 0x01
     3dc:	8a 81       	ldd	r24, Y+2	; 0x02
     3de:	89 81       	ldd	r24, Y+1	; 0x01
     3e0:	61 e0       	ldi	r22, 0x01	; 1
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	f5 d0       	rcall	.+490    	; 0x5d0 <USART_Receive>
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	98 2f       	mov	r25, r24
     3ea:	88 27       	eor	r24, r24
     3ec:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <light+0x1>
     3f0:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <light>
     3f4:	61 e0       	ldi	r22, 0x01	; 1
     3f6:	80 e0       	ldi	r24, 0x00	; 0
     3f8:	eb d0       	rcall	.+470    	; 0x5d0 <USART_Receive>
     3fa:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <light>
     3fe:	30 91 63 01 	lds	r19, 0x0163	; 0x800163 <light+0x1>
     402:	28 2b       	or	r18, r24
     404:	30 93 63 01 	sts	0x0163, r19	; 0x800163 <light+0x1>
     408:	20 93 62 01 	sts	0x0162, r18	; 0x800162 <light>
     40c:	80 e0       	ldi	r24, 0x00	; 0
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	c2 df       	rcall	.-124    	; 0x396 <mlx_chip_select>
     412:	0f 90       	pop	r0
     414:	0f 90       	pop	r0
     416:	df 91       	pop	r29
     418:	cf 91       	pop	r28
     41a:	08 95       	ret

0000041c <mlx_write_reg>:
     41c:	1f 93       	push	r17
     41e:	cf 93       	push	r28
     420:	df 93       	push	r29
     422:	16 2f       	mov	r17, r22
     424:	c8 2f       	mov	r28, r24
     426:	d0 e0       	ldi	r29, 0x00	; 0
     428:	86 2f       	mov	r24, r22
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	f4 e0       	ldi	r31, 0x04	; 4
     42e:	88 0f       	add	r24, r24
     430:	99 1f       	adc	r25, r25
     432:	fa 95       	dec	r31
     434:	e1 f7       	brne	.-8      	; 0x42e <mlx_write_reg+0x12>
     436:	8c 0f       	add	r24, r28
     438:	9d 1f       	adc	r25, r29
     43a:	4c e0       	ldi	r20, 0x0C	; 12
     43c:	50 e0       	ldi	r21, 0x00	; 0
     43e:	20 e0       	ldi	r18, 0x00	; 0
     440:	30 e0       	ldi	r19, 0x00	; 0
     442:	61 e0       	ldi	r22, 0x01	; 1
     444:	70 e0       	ldi	r23, 0x00	; 0
     446:	fc 01       	movw	r30, r24
     448:	e6 23       	and	r30, r22
     44a:	f7 23       	and	r31, r23
     44c:	ef 2b       	or	r30, r31
     44e:	11 f0       	breq	.+4      	; 0x454 <mlx_write_reg+0x38>
     450:	2f 5f       	subi	r18, 0xFF	; 255
     452:	3f 4f       	sbci	r19, 0xFF	; 255
     454:	66 0f       	add	r22, r22
     456:	77 1f       	adc	r23, r23
     458:	41 50       	subi	r20, 0x01	; 1
     45a:	51 09       	sbc	r21, r1
     45c:	a1 f7       	brne	.-24     	; 0x446 <mlx_write_reg+0x2a>
     45e:	84 e0       	ldi	r24, 0x04	; 4
     460:	cc 0f       	add	r28, r28
     462:	dd 1f       	adc	r29, r29
     464:	8a 95       	dec	r24
     466:	e1 f7       	brne	.-8      	; 0x460 <mlx_write_reg+0x44>
     468:	dd 27       	eor	r29, r29
     46a:	20 fd       	sbrc	r18, 0
     46c:	02 c0       	rjmp	.+4      	; 0x472 <mlx_write_reg+0x56>
     46e:	28 96       	adiw	r28, 0x08	; 8
     470:	01 c0       	rjmp	.+2      	; 0x474 <mlx_write_reg+0x58>
     472:	24 96       	adiw	r28, 0x04	; 4
     474:	8e df       	rcall	.-228    	; 0x392 <mlx_chip_select.part.0>
     476:	61 e0       	ldi	r22, 0x01	; 1
     478:	87 e8       	ldi	r24, 0x87	; 135
     47a:	aa d0       	rcall	.+340    	; 0x5d0 <USART_Receive>
     47c:	61 e0       	ldi	r22, 0x01	; 1
     47e:	81 2f       	mov	r24, r17
     480:	a7 d0       	rcall	.+334    	; 0x5d0 <USART_Receive>
     482:	61 e0       	ldi	r22, 0x01	; 1
     484:	8c 2f       	mov	r24, r28
     486:	a4 d0       	rcall	.+328    	; 0x5d0 <USART_Receive>
     488:	80 e0       	ldi	r24, 0x00	; 0
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	df 91       	pop	r29
     48e:	cf 91       	pop	r28
     490:	1f 91       	pop	r17
     492:	81 cf       	rjmp	.-254    	; 0x396 <mlx_chip_select>

00000494 <mlx_get_calib>:
     494:	7e df       	rcall	.-260    	; 0x392 <mlx_chip_select.part.0>
     496:	61 e0       	ldi	r22, 0x01	; 1
     498:	8e e8       	ldi	r24, 0x8E	; 142
     49a:	9a d0       	rcall	.+308    	; 0x5d0 <USART_Receive>
     49c:	61 e0       	ldi	r22, 0x01	; 1
     49e:	80 eb       	ldi	r24, 0xB0	; 176
     4a0:	97 d0       	rcall	.+302    	; 0x5d0 <USART_Receive>
     4a2:	61 e0       	ldi	r22, 0x01	; 1
     4a4:	80 e0       	ldi	r24, 0x00	; 0
     4a6:	94 d0       	rcall	.+296    	; 0x5d0 <USART_Receive>
     4a8:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <calib1>
     4ac:	80 e0       	ldi	r24, 0x00	; 0
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	72 df       	rcall	.-284    	; 0x396 <mlx_chip_select>
     4b2:	6f df       	rcall	.-290    	; 0x392 <mlx_chip_select.part.0>
     4b4:	61 e0       	ldi	r22, 0x01	; 1
     4b6:	8e e8       	ldi	r24, 0x8E	; 142
     4b8:	8b d0       	rcall	.+278    	; 0x5d0 <USART_Receive>
     4ba:	61 e0       	ldi	r22, 0x01	; 1
     4bc:	80 ec       	ldi	r24, 0xC0	; 192
     4be:	88 d0       	rcall	.+272    	; 0x5d0 <USART_Receive>
     4c0:	61 e0       	ldi	r22, 0x01	; 1
     4c2:	80 e0       	ldi	r24, 0x00	; 0
     4c4:	85 d0       	rcall	.+266    	; 0x5d0 <USART_Receive>
     4c6:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <calib2>
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	63 cf       	rjmp	.-314    	; 0x396 <mlx_chip_select>

000004d0 <mlx_reset>:
}
void mlx_reset(){
     4d0:	60 df       	rcall	.-320    	; 0x392 <mlx_chip_select.part.0>
	mlx_chip_select(1);
	USART_Receive(MLX_RS, LIGHT);
     4d2:	61 e0       	ldi	r22, 0x01	; 1
     4d4:	80 ef       	ldi	r24, 0xF0	; 240
     4d6:	7c d0       	rcall	.+248    	; 0x5d0 <USART_Receive>
	USART_Receive(0, LIGHT);
     4d8:	61 e0       	ldi	r22, 0x01	; 1
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	79 d0       	rcall	.+242    	; 0x5d0 <USART_Receive>
	mlx_chip_select(0);
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	59 cf       	rjmp	.-334    	; 0x396 <mlx_chip_select>

000004e4 <ssp_chip_select.part.0>:

void
ssp_chip_select(int select_flag)
{
	if (select_flag)
	AVR_GPIO_PORT &= ~_BV(DB_SSP_SS); /* CS low. */
     4e4:	57 98       	cbi	0x0a, 7	; 10
     4e6:	08 95       	ret

000004e8 <ssp_chip_select>:


void
ssp_chip_select(int select_flag)
{
	if (select_flag)
     4e8:	89 2b       	or	r24, r25
     4ea:	09 f0       	breq	.+2      	; 0x4ee <ssp_chip_select+0x6>
     4ec:	fb cf       	rjmp	.-10     	; 0x4e4 <ssp_chip_select.part.0>
	AVR_GPIO_PORT &= ~_BV(DB_SSP_SS); /* CS low. */
	else
	AVR_GPIO_PORT |= _BV(DB_SSP_SS); /* CS high. */
     4ee:	57 9a       	sbi	0x0a, 7	; 10
     4f0:	08 95       	ret

000004f2 <spi_usart_setup>:
}

void
spi_usart_setup(int on_flag){
	if (on_flag)
     4f2:	89 2b       	or	r24, r25
     4f4:	f1 f0       	breq	.+60     	; 0x532 <spi_usart_setup+0x40>
	{
		UBRR = 0;
     4f6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__EEPROM_REGION_LENGTH__+0x7f00c5>
     4fa:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__EEPROM_REGION_LENGTH__+0x7f00c4>
		/* set xck as output */
		DDRC = (1<<DDRC0) | (1<<DDRC4) | (1<<DDRC5) | (1<<DDRC6) | (1<<DDRC7);
     4fe:	81 ef       	ldi	r24, 0xF1	; 241
     500:	89 b9       	out	0x09, r24	; 9
		
		/*set USART to Master, SPI mode 0*/
		UCSRC = (1<<UMSEL1)|(1<<UMSEL0)|(1<<UCSZ0)|(1<<UCPOL);
     502:	83 ec       	ldi	r24, 0xC3	; 195
     504:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__EEPROM_REGION_LENGTH__+0x7f00c2>
		//UCSRC = (1<<UMSEL1)|(1<<UMSEL0); //|(1<<UCSZ0)|(1<<UCPOL);
		//UCSRC &= ~(1<<UCSZ0);
		/*Enable receiver and transmitter */
		UCSRB = (1<<RXEN)|(1<<TXEN);
     508:	88 e1       	ldi	r24, 0x18	; 24
     50a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__EEPROM_REGION_LENGTH__+0x7f00c1>
		/*set baud rate */
		UBRR = 0x0008;  //was 0x0008
     50e:	88 e0       	ldi	r24, 0x08	; 8
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__EEPROM_REGION_LENGTH__+0x7f00c5>
     516:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__EEPROM_REGION_LENGTH__+0x7f00c4>
		ssp_chip_select(0);
     51a:	80 e0       	ldi	r24, 0x00	; 0
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	e4 df       	rcall	.-56     	; 0x4e8 <ssp_chip_select>
		mlx_chip_select(0);
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	38 df       	rcall	.-400    	; 0x396 <mlx_chip_select>
		adx_chip_select(0);
     526:	80 e0       	ldi	r24, 0x00	; 0
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	97 dd       	rcall	.-1234   	; 0x5a <adx_chip_select>
		n25_chip_select(0);
     52c:	80 e0       	ldi	r24, 0x00	; 0
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	2f cf       	rjmp	.-418    	; 0x390 <n25_chip_select>
     532:	08 95       	ret

00000534 <ssp_boot>:
	}
}

void
ssp_boot()
{
     534:	d7 df       	rcall	.-82     	; 0x4e4 <ssp_chip_select.part.0>
	/* on power up ssp chip needs it's chip select toggled once */
	ssp_chip_select(1);
	for (int k = 0; k < 1500;k++);
	ssp_chip_select(0);
     536:	80 e0       	ldi	r24, 0x00	; 0
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	d6 cf       	rjmp	.-84     	; 0x4e8 <ssp_chip_select>

0000053c <reset_fault>:
	
}

volatile void
reset_fault(uint8_t source){
	switch(source){
     53c:	84 30       	cpi	r24, 0x04	; 4
     53e:	39 f0       	breq	.+14     	; 0x54e <reset_fault+0x12>
     540:	80 31       	cpi	r24, 0x10	; 16
     542:	41 f0       	breq	.+16     	; 0x554 <reset_fault+0x18>
     544:	81 30       	cpi	r24, 0x01	; 1
     546:	b1 f4       	brne	.+44     	; 0x574 <reset_fault+0x38>
		case LIGHT:
		light_fault = 0;
     548:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <light_fault>
		break;
     54c:	08 95       	ret
		case VIBE:
		vibe_fault = 0;
     54e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <vibe_fault>
		break;
     552:	08 95       	ret
		case SSP:
		if(ssp_fault>0){
     554:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <ssp_fault>
     558:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <ssp_fault+0x1>
     55c:	89 2b       	or	r24, r25
     55e:	61 f0       	breq	.+24     	; 0x578 <reset_fault+0x3c>
			ssp_fault--;
     560:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <ssp_fault>
     564:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <ssp_fault+0x1>
     568:	01 97       	sbiw	r24, 0x01	; 1
     56a:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <ssp_fault+0x1>
     56e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <ssp_fault>
     572:	08 95       	ret
		}
		break;
		default:
		unk_fault = 0;
     574:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
     578:	08 95       	ret

0000057a <log_fault>:
	return UDR;
}

void
log_fault(uint8_t source){
	switch(source){
     57a:	84 30       	cpi	r24, 0x04	; 4
     57c:	51 f0       	breq	.+20     	; 0x592 <log_fault+0x18>
     57e:	80 31       	cpi	r24, 0x10	; 16
     580:	71 f0       	breq	.+28     	; 0x59e <log_fault+0x24>
     582:	81 30       	cpi	r24, 0x01	; 1
     584:	f9 f4       	brne	.+62     	; 0x5c4 <log_fault+0x4a>
		case LIGHT:
			light_fault++;
     586:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <light_fault>
     58a:	8f 5f       	subi	r24, 0xFF	; 255
     58c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <light_fault>
			break;
     590:	08 95       	ret
		case VIBE:
			vibe_fault++;
     592:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <vibe_fault>
     596:	8f 5f       	subi	r24, 0xFF	; 255
     598:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <vibe_fault>
			break;
     59c:	08 95       	ret
		case SSP:
			ssp_fault++;
     59e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <ssp_fault>
     5a2:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <ssp_fault+0x1>
     5a6:	01 96       	adiw	r24, 0x01	; 1
     5a8:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <ssp_fault+0x1>
     5ac:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <ssp_fault>
			ssp_fault_max++;
     5b0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <ssp_fault_max>
     5b4:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <ssp_fault_max+0x1>
     5b8:	01 96       	adiw	r24, 0x01	; 1
     5ba:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <ssp_fault_max+0x1>
     5be:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <ssp_fault_max>
     5c2:	08 95       	ret
			break;
		default:
			unk_fault++;
     5c4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     5c8:	8f 5f       	subi	r24, 0xFF	; 255
     5ca:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
     5ce:	08 95       	ret

000005d0 <USART_Receive>:
}


uint8_t
USART_Receive (uint8_t data, uint8_t source)
{
     5d0:	cf 93       	push	r28
     5d2:	df 93       	push	r29
	if(!spi_disable){
     5d4:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <spi_disable>
     5d8:	91 11       	cpse	r25, r1
     5da:	43 c0       	rjmp	.+134    	; 0x662 <USART_Receive+0x92>
     5dc:	c6 2f       	mov	r28, r22
     5de:	d8 2f       	mov	r29, r24
		else {
			UCSRC = (1<<UMSEL1)|(1<<UMSEL0)|(1<<UCSZ0)|(1<<UCPOL);
		}*/
		//start timer to exit us out
		//PORTC ^= _BV(PORTC6);
		spi_to_flag = 1;
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <spi_to_flag>
		spi_to = 1;
     5e6:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <spi_to>
		TCNT0 = 0x00;
     5ea:	16 bc       	out	0x26, r1	; 38
		TIMSK0 |= (1<<OCIE0A);
     5ec:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     5f0:	82 60       	ori	r24, 0x02	; 2
     5f2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
		/* wait for empty transmit buffer */
		while (!(UCSRA & (1<<UDRE))){
     5f6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     5fa:	85 fd       	sbrc	r24, 5
     5fc:	07 c0       	rjmp	.+14     	; 0x60c <USART_Receive+0x3c>
			if (!spi_to_flag){
     5fe:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <spi_to_flag>
     602:	81 11       	cpse	r24, r1
     604:	f8 cf       	rjmp	.-16     	; 0x5f6 <USART_Receive+0x26>
				log_fault(source);
     606:	8c 2f       	mov	r24, r28
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	b7 df       	rcall	.-146    	; 0x57a <log_fault>
				break;
			}
		}
		TIMSK0 &= ~(1<<OCIE0A);		//stop the  timer
     60c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     610:	8d 7f       	andi	r24, 0xFD	; 253
     612:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
		TIFR0 |= (1<<OCF0A);
     616:	a9 9a       	sbi	0x15, 1	; 21
		/*put data into buffer, sends data */
		UDR = data;
     618:	d0 93 c6 00 	sts	0x00C6, r29	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
		//start timer to exit us out
		spi_to_flag = 1;
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <spi_to_flag>
		spi_to = 1;
     622:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <spi_to>
		TCNT0 = 0x00;
     626:	16 bc       	out	0x26, r1	; 38
		TIMSK0 |= (1<<OCIE0A);
     628:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     62c:	82 60       	ori	r24, 0x02	; 2
     62e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
		/*wait for the data to be received */
		while (!(UCSRA & (1<<RXC))){
     632:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     636:	87 fd       	sbrc	r24, 7
     638:	07 c0       	rjmp	.+14     	; 0x648 <USART_Receive+0x78>
			if (!spi_to_flag){
     63a:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <spi_to_flag>
     63e:	81 11       	cpse	r24, r1
     640:	f8 cf       	rjmp	.-16     	; 0x632 <USART_Receive+0x62>
				log_fault(source);
     642:	8c 2f       	mov	r24, r28
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	99 df       	rcall	.-206    	; 0x57a <log_fault>
				break;
			}
		}
		TIMSK0 &= ~(1<<OCIE0A);		//stop the  timer
     648:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     64c:	8d 7f       	andi	r24, 0xFD	; 253
     64e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
		TIFR0 |= (1<<OCF0A);
     652:	a9 9a       	sbi	0x15, 1	; 21
		if(spi_to_flag){		//spi comm successful, reset count
     654:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <spi_to_flag>
     658:	88 23       	and	r24, r24
     65a:	31 f0       	breq	.+12     	; 0x668 <USART_Receive+0x98>
			reset_fault(source);
     65c:	8c 2f       	mov	r24, r28
     65e:	6e df       	rcall	.-292    	; 0x53c <reset_fault>
     660:	03 c0       	rjmp	.+6      	; 0x668 <USART_Receive+0x98>
		}
	}
	else{
		spi_disabled = 1;
     662:	81 e0       	ldi	r24, 0x01	; 1
     664:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <spi_disabled>
	}
	return UDR;
     668:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
}
     66c:	df 91       	pop	r29
     66e:	cf 91       	pop	r28
     670:	08 95       	ret

00000672 <ssp_setup>:
}


void
ssp_setup()
{
     672:	38 df       	rcall	.-400    	; 0x4e4 <ssp_chip_select.part.0>
	/* set for write and set I/O dir. register per board design */
	ssp_chip_select(1);
	USART_Receive(SSP_WRITE, SSP);
     674:	60 e1       	ldi	r22, 0x10	; 16
     676:	80 e4       	ldi	r24, 0x40	; 64
     678:	ab df       	rcall	.-170    	; 0x5d0 <USART_Receive>
	USART_Receive(IODIRA, SSP);
     67a:	60 e1       	ldi	r22, 0x10	; 16
     67c:	80 e0       	ldi	r24, 0x00	; 0
     67e:	a8 df       	rcall	.-176    	; 0x5d0 <USART_Receive>
	USART_Receive(SSP_IO, SSP);
     680:	60 e1       	ldi	r22, 0x10	; 16
     682:	81 e6       	ldi	r24, 0x61	; 97
     684:	a5 df       	rcall	.-182    	; 0x5d0 <USART_Receive>
	ssp_chip_select(0);
     686:	80 e0       	ldi	r24, 0x00	; 0
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	2e df       	rcall	.-420    	; 0x4e8 <ssp_chip_select>
     68c:	2b df       	rcall	.-426    	; 0x4e4 <ssp_chip_select.part.0>
	
	ssp_chip_select(1);
	USART_Receive(SSP_WRITE, SSP);
     68e:	60 e1       	ldi	r22, 0x10	; 16
     690:	80 e4       	ldi	r24, 0x40	; 64
     692:	9e df       	rcall	.-196    	; 0x5d0 <USART_Receive>
	USART_Receive(GPPUA, SSP);
     694:	60 e1       	ldi	r22, 0x10	; 16
     696:	8c e0       	ldi	r24, 0x0C	; 12
     698:	9b df       	rcall	.-202    	; 0x5d0 <USART_Receive>
	USART_Receive(0x21, SSP);
     69a:	60 e1       	ldi	r22, 0x10	; 16
     69c:	81 e2       	ldi	r24, 0x21	; 33
     69e:	98 df       	rcall	.-208    	; 0x5d0 <USART_Receive>
	ssp_chip_select(0);
     6a0:	80 e0       	ldi	r24, 0x00	; 0
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	21 cf       	rjmp	.-446    	; 0x4e8 <ssp_chip_select>

000006a6 <ssp_int_config>:
	
}

void
ssp_int_config()
{
     6a6:	1e df       	rcall	.-452    	; 0x4e4 <ssp_chip_select.part.0>
	
	/* set tamper gpio for interrupt on change */
	ssp_chip_select(1);
	USART_Receive(SSP_WRITE, SSP);
     6a8:	60 e1       	ldi	r22, 0x10	; 16
     6aa:	80 e4       	ldi	r24, 0x40	; 64
     6ac:	91 df       	rcall	.-222    	; 0x5d0 <USART_Receive>
	USART_Receive(INTCONA, SSP);
     6ae:	60 e1       	ldi	r22, 0x10	; 16
     6b0:	88 e0       	ldi	r24, 0x08	; 8
     6b2:	8e df       	rcall	.-228    	; 0x5d0 <USART_Receive>
	USART_Receive(TAMP_MON, SSP);
     6b4:	60 e1       	ldi	r22, 0x10	; 16
     6b6:	80 e4       	ldi	r24, 0x40	; 64
     6b8:	8b df       	rcall	.-234    	; 0x5d0 <USART_Receive>
	ssp_chip_select(0);
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	14 df       	rcall	.-472    	; 0x4e8 <ssp_chip_select>
     6c0:	11 df       	rcall	.-478    	; 0x4e4 <ssp_chip_select.part.0>
	/* set tamper gpio for default value '1' at TAMP_MON */
	ssp_chip_select(1);
	USART_Receive(SSP_WRITE, SSP);
     6c2:	60 e1       	ldi	r22, 0x10	; 16
     6c4:	80 e4       	ldi	r24, 0x40	; 64
     6c6:	84 df       	rcall	.-248    	; 0x5d0 <USART_Receive>
	USART_Receive(DEFVALA, SSP);
     6c8:	60 e1       	ldi	r22, 0x10	; 16
     6ca:	86 e0       	ldi	r24, 0x06	; 6
     6cc:	81 df       	rcall	.-254    	; 0x5d0 <USART_Receive>
	USART_Receive(TAMP_MON, SSP);
     6ce:	60 e1       	ldi	r22, 0x10	; 16
     6d0:	80 e4       	ldi	r24, 0x40	; 64
     6d2:	7e df       	rcall	.-260    	; 0x5d0 <USART_Receive>
	ssp_chip_select(0);
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	07 df       	rcall	.-498    	; 0x4e8 <ssp_chip_select>
     6da:	04 df       	rcall	.-504    	; 0x4e4 <ssp_chip_select.part.0>
	//set IOCON INTPOL to 1?
	ssp_chip_select(1);
	USART_Receive(SSP_WRITE, SSP);
     6dc:	60 e1       	ldi	r22, 0x10	; 16
     6de:	80 e4       	ldi	r24, 0x40	; 64
     6e0:	77 df       	rcall	.-274    	; 0x5d0 <USART_Receive>
	USART_Receive(IOCON, SSP);
     6e2:	60 e1       	ldi	r22, 0x10	; 16
     6e4:	8a e0       	ldi	r24, 0x0A	; 10
     6e6:	74 df       	rcall	.-280    	; 0x5d0 <USART_Receive>
	USART_Receive(0x00, SSP);
     6e8:	60 e1       	ldi	r22, 0x10	; 16
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	71 df       	rcall	.-286    	; 0x5d0 <USART_Receive>
	ssp_chip_select(0);
     6ee:	80 e0       	ldi	r24, 0x00	; 0
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	fa de       	rcall	.-524    	; 0x4e8 <ssp_chip_select>
     6f4:	f7 de       	rcall	.-530    	; 0x4e4 <ssp_chip_select.part.0>
	/* read A to clear */
	ssp_chip_select(1);
	USART_Receive(SSP_READ, SSP);
     6f6:	60 e1       	ldi	r22, 0x10	; 16
     6f8:	81 e4       	ldi	r24, 0x41	; 65
     6fa:	6a df       	rcall	.-300    	; 0x5d0 <USART_Receive>
	USART_Receive(GPIOA, SSP);
     6fc:	60 e1       	ldi	r22, 0x10	; 16
     6fe:	82 e1       	ldi	r24, 0x12	; 18
     700:	67 df       	rcall	.-306    	; 0x5d0 <USART_Receive>
	USART_Receive(0x00, SSP);
     702:	60 e1       	ldi	r22, 0x10	; 16
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	64 df       	rcall	.-312    	; 0x5d0 <USART_Receive>
	ssp_chip_select(0);
     708:	80 e0       	ldi	r24, 0x00	; 0
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	ed de       	rcall	.-550    	; 0x4e8 <ssp_chip_select>
     70e:	ea de       	rcall	.-556    	; 0x4e4 <ssp_chip_select.part.0>
	/* read incapA to clear */
	ssp_chip_select(1);
	USART_Receive(SSP_READ, SSP);
     710:	60 e1       	ldi	r22, 0x10	; 16
     712:	81 e4       	ldi	r24, 0x41	; 65
     714:	5d df       	rcall	.-326    	; 0x5d0 <USART_Receive>
	USART_Receive(INTCAPA, SSP);
     716:	60 e1       	ldi	r22, 0x10	; 16
     718:	80 e1       	ldi	r24, 0x10	; 16
     71a:	5a df       	rcall	.-332    	; 0x5d0 <USART_Receive>
	USART_Receive(0x00, SSP);
     71c:	60 e1       	ldi	r22, 0x10	; 16
     71e:	80 e0       	ldi	r24, 0x00	; 0
     720:	57 df       	rcall	.-338    	; 0x5d0 <USART_Receive>
	ssp_chip_select(0);
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	e0 de       	rcall	.-576    	; 0x4e8 <ssp_chip_select>
     728:	dd de       	rcall	.-582    	; 0x4e4 <ssp_chip_select.part.0>
	/* setup tamper gpio interrupt pin */
	ssp_chip_select(1);
	USART_Receive(SSP_WRITE, SSP);
     72a:	60 e1       	ldi	r22, 0x10	; 16
     72c:	80 e4       	ldi	r24, 0x40	; 64
     72e:	50 df       	rcall	.-352    	; 0x5d0 <USART_Receive>
	USART_Receive(GPINTENA, SSP);
     730:	60 e1       	ldi	r22, 0x10	; 16
     732:	84 e0       	ldi	r24, 0x04	; 4
     734:	4d df       	rcall	.-358    	; 0x5d0 <USART_Receive>
	USART_Receive(TAMP_MON, SSP);
     736:	60 e1       	ldi	r22, 0x10	; 16
     738:	80 e4       	ldi	r24, 0x40	; 64
     73a:	4a df       	rcall	.-364    	; 0x5d0 <USART_Receive>
	ssp_chip_select(0);
     73c:	80 e0       	ldi	r24, 0x00	; 0
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	d3 ce       	rjmp	.-602    	; 0x4e8 <ssp_chip_select>

00000742 <ssp_int_reset>:
}

void ssp_int_reset()
{
     742:	d0 de       	rcall	.-608    	; 0x4e4 <ssp_chip_select.part.0>
	/* read incapA to clear */
	ssp_chip_select(1);
	USART_Receive(SSP_READ, SSP);
     744:	60 e1       	ldi	r22, 0x10	; 16
     746:	81 e4       	ldi	r24, 0x41	; 65
     748:	43 df       	rcall	.-378    	; 0x5d0 <USART_Receive>
	USART_Receive(INTCAPA, SSP);
     74a:	60 e1       	ldi	r22, 0x10	; 16
     74c:	80 e1       	ldi	r24, 0x10	; 16
     74e:	40 df       	rcall	.-384    	; 0x5d0 <USART_Receive>
	USART_Receive(0x00, SSP);
     750:	60 e1       	ldi	r22, 0x10	; 16
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	3d df       	rcall	.-390    	; 0x5d0 <USART_Receive>
	ssp_chip_select(0);
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	c6 ce       	rjmp	.-628    	; 0x4e8 <ssp_chip_select>

0000075c <ssp_read_byte>:
}
	
                   
uint8_t
ssp_read_byte()
{
     75c:	cf 93       	push	r28
     75e:	c2 de       	rcall	.-636    	; 0x4e4 <ssp_chip_select.part.0>
	/* read port A */
	uint8_t temp;
	ssp_chip_select(1);
	USART_Receive(SSP_READ, SSP);
     760:	60 e1       	ldi	r22, 0x10	; 16
     762:	81 e4       	ldi	r24, 0x41	; 65
     764:	35 df       	rcall	.-406    	; 0x5d0 <USART_Receive>
	USART_Receive(GPIOA, SSP);
     766:	60 e1       	ldi	r22, 0x10	; 16
     768:	82 e1       	ldi	r24, 0x12	; 18
     76a:	32 df       	rcall	.-412    	; 0x5d0 <USART_Receive>
	temp = USART_Receive(0x00, SSP);
     76c:	60 e1       	ldi	r22, 0x10	; 16
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	2f df       	rcall	.-418    	; 0x5d0 <USART_Receive>
     772:	c8 2f       	mov	r28, r24
	ssp_chip_select(0);
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	b7 de       	rcall	.-658    	; 0x4e8 <ssp_chip_select>
	return temp;
}
     77a:	8c 2f       	mov	r24, r28
     77c:	cf 91       	pop	r28
     77e:	08 95       	ret

00000780 <ssp_write>:

void
ssp_write(uint8_t value)
{
     780:	cf 93       	push	r28
     782:	c8 2f       	mov	r28, r24
     784:	af de       	rcall	.-674    	; 0x4e4 <ssp_chip_select.part.0>
	/* set for write and set I/O dir. register per board design */
	//ssp_out |= value;
	ssp_chip_select(1);
	USART_Receive(SSP_WRITE, SSP);
     786:	60 e1       	ldi	r22, 0x10	; 16
     788:	80 e4       	ldi	r24, 0x40	; 64
     78a:	22 df       	rcall	.-444    	; 0x5d0 <USART_Receive>
	USART_Receive(GPIOA, SSP);
     78c:	60 e1       	ldi	r22, 0x10	; 16
     78e:	82 e1       	ldi	r24, 0x12	; 18
     790:	1f df       	rcall	.-450    	; 0x5d0 <USART_Receive>
	USART_Receive(value, SSP);
     792:	60 e1       	ldi	r22, 0x10	; 16
     794:	8c 2f       	mov	r24, r28
     796:	1c df       	rcall	.-456    	; 0x5d0 <USART_Receive>
	ssp_chip_select(0);
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	a5 de       	rcall	.-694    	; 0x4e8 <ssp_chip_select>
     79e:	a2 de       	rcall	.-700    	; 0x4e4 <ssp_chip_select.part.0>
	ssp_chip_select(1);
	USART_Receive(SSP_WRITE, SSP);
     7a0:	60 e1       	ldi	r22, 0x10	; 16
     7a2:	80 e4       	ldi	r24, 0x40	; 64
     7a4:	15 df       	rcall	.-470    	; 0x5d0 <USART_Receive>
	USART_Receive(OLATA, SSP);
     7a6:	60 e1       	ldi	r22, 0x10	; 16
     7a8:	84 e1       	ldi	r24, 0x14	; 20
     7aa:	12 df       	rcall	.-476    	; 0x5d0 <USART_Receive>
	USART_Receive(value, SSP);
     7ac:	60 e1       	ldi	r22, 0x10	; 16
     7ae:	8c 2f       	mov	r24, r28
     7b0:	0f df       	rcall	.-482    	; 0x5d0 <USART_Receive>
	ssp_chip_select(0);
     7b2:	80 e0       	ldi	r24, 0x00	; 0
     7b4:	90 e0       	ldi	r25, 0x00	; 0
}
     7b6:	cf 91       	pop	r28
	ssp_chip_select(0);
	ssp_chip_select(1);
	USART_Receive(SSP_WRITE, SSP);
	USART_Receive(OLATA, SSP);
	USART_Receive(value, SSP);
	ssp_chip_select(0);
     7b8:	97 ce       	rjmp	.-722    	; 0x4e8 <ssp_chip_select>

000007ba <mkm_grab>:
}

static inline void
mkm_grab()
{
  MKM_CONTROL_FPGA_PORT |= _BV(MKM_CONTROL_FPGA_BIT);
     7ba:	17 9a       	sbi	0x02, 7	; 2
  MKM_CONTROL_AVR_PORT &= ~_BV(MKM_CONTROL_AVR_BIT);
     7bc:	16 98       	cbi	0x02, 6	; 2
     7be:	08 95       	ret

000007c0 <mkm_release>:
}

static inline void
mkm_release()
{
  MKM_CONTROL_AVR_PORT |= _BV(MKM_CONTROL_AVR_BIT);
     7c0:	16 9a       	sbi	0x02, 6	; 2
  MKM_CONTROL_FPGA_PORT &= ~_BV(MKM_CONTROL_FPGA_BIT);
     7c2:	17 98       	cbi	0x02, 7	; 2
     7c4:	08 95       	ret

000007c6 <spi_write>:
static inline void
spi_write(uint8_t val)
{
  /* Move the value to be sent to the SPI slave into the SPI
     register. This starts the SPI clock. */
  SPDR = val;
     7c6:	8e bd       	out	0x2e, r24	; 46

  /* Wait for the byte to be shifted into the slave. */
  loop_until_bit_is_set(SPSR, SPIF);
     7c8:	0d b4       	in	r0, 0x2d	; 45
     7ca:	07 fe       	sbrs	r0, 7
     7cc:	fd cf       	rjmp	.-6      	; 0x7c8 <spi_write+0x2>
  //while (!_BV(SPIF));
}
     7ce:	08 95       	ret

000007d0 <init_tamper_values.isra.2>:
	
	//if (source == 1) {
		//flags = eeprom_read_byte ((uint8_t *)TAMP_FLAGS);
	//}
	//else {
		flags = flags_set;
     7d0:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <flags>
	//}
	if (flags & LIGHT) {
     7d4:	80 ff       	sbrs	r24, 0
     7d6:	04 c0       	rjmp	.+8      	; 0x7e0 <init_tamper_values.isra.2+0x10>
		light_enable = 1;
     7d8:	91 e0       	ldi	r25, 0x01	; 1
     7da:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <light_enable>
     7de:	02 c0       	rjmp	.+4      	; 0x7e4 <init_tamper_values.isra.2+0x14>
	}
	else {
		light_enable = 0;
     7e0:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <light_enable>
	}
	if (flags & TEMP) {
     7e4:	81 ff       	sbrs	r24, 1
     7e6:	04 c0       	rjmp	.+8      	; 0x7f0 <init_tamper_values.isra.2+0x20>
		temp_enable = 1;
     7e8:	91 e0       	ldi	r25, 0x01	; 1
     7ea:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <temp_enable>
     7ee:	02 c0       	rjmp	.+4      	; 0x7f4 <init_tamper_values.isra.2+0x24>
	}
	else {
		temp_enable = 0;
     7f0:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <temp_enable>
	}
	if (flags & VIBE) {
     7f4:	82 ff       	sbrs	r24, 2
     7f6:	04 c0       	rjmp	.+8      	; 0x800 <init_tamper_values.isra.2+0x30>
		vibe_enable = 1;
     7f8:	91 e0       	ldi	r25, 0x01	; 1
     7fa:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <vibe_enable>
     7fe:	02 c0       	rjmp	.+4      	; 0x804 <init_tamper_values.isra.2+0x34>
	}
	else{
		vibe_enable = 0;
     800:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <vibe_enable>
	}
	if (flags & CASE) {
     804:	83 ff       	sbrs	r24, 3
     806:	04 c0       	rjmp	.+8      	; 0x810 <init_tamper_values.isra.2+0x40>
		case_enable = 1;
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <case_enable>
     80e:	03 c0       	rjmp	.+6      	; 0x816 <init_tamper_values.isra.2+0x46>
		
	}
	
	else{
		case_enable = 0;
     810:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <case_enable>
		EIMSK = 0x00;		/*dis-able INT0 */
     814:	1d ba       	out	0x1d, r1	; 29
	}
	if (flags & LL) {
     816:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <flags>
     81a:	85 ff       	sbrs	r24, 5
     81c:	04 c0       	rjmp	.+8      	; 0x826 <init_tamper_values.isra.2+0x56>
		ll_enable = 1;
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <ll_enable>
     824:	02 c0       	rjmp	.+4      	; 0x82a <init_tamper_values.isra.2+0x5a>
	}
	else {
		ll_enable = 0;
     826:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <ll_enable>
	}
	tamper_detected = 0;
     82a:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <tamper_detected>
	AVR_LED_PORT &= ~_BV(AVR_LED_GREEN_BIT);
     82e:	11 98       	cbi	0x02, 1	; 2
	AVR_LED_PORT &= ~_BV(AVR_LED_YELLOW_BIT);
     830:	12 98       	cbi	0x02, 2	; 2
	mkm_release();
     832:	c6 df       	rcall	.-116    	; 0x7c0 <mkm_release>
	for(int i = 0; i<5; i++){
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	90 e0       	ldi	r25, 0x00	; 0
		fault_code[i] = 0;
     838:	fc 01       	movw	r30, r24
     83a:	e6 5c       	subi	r30, 0xC6	; 198
     83c:	fe 4f       	sbci	r31, 0xFE	; 254
     83e:	10 82       	st	Z, r1
		fault_value1[i] = 0;
     840:	fc 01       	movw	r30, r24
     842:	ec 5c       	subi	r30, 0xCC	; 204
     844:	fe 4f       	sbci	r31, 0xFE	; 254
     846:	10 82       	st	Z, r1
		fault_value2[i] = 0;
     848:	fc 01       	movw	r30, r24
     84a:	e2 5d       	subi	r30, 0xD2	; 210
     84c:	fe 4f       	sbci	r31, 0xFE	; 254
     84e:	10 82       	st	Z, r1
	}
	tamper_detected = 0;
	AVR_LED_PORT &= ~_BV(AVR_LED_GREEN_BIT);
	AVR_LED_PORT &= ~_BV(AVR_LED_YELLOW_BIT);
	mkm_release();
	for(int i = 0; i<5; i++){
     850:	01 96       	adiw	r24, 0x01	; 1
     852:	85 30       	cpi	r24, 0x05	; 5
     854:	91 05       	cpc	r25, r1
     856:	81 f7       	brne	.-32     	; 0x838 <init_tamper_values.isra.2+0x68>
	temp_hi_thresh = eeprom_read_word((uint16_t *)TEMP_PRE_HI);
	temp_lo_thresh = eeprom_read_word((uint16_t *)TEMP_PRE_LO);
	vibe_hi_thresh = eeprom_read_byte ((uint8_t *) VIBE_PRE_HI);
	vibe_lo_thresh = eeprom_read_byte((uint8_t *) VIBE_PRE_HI);*/
	
}
     858:	08 95       	ret

0000085a <__vector_3>:
/* Interrupts         */
/* Tamper protection. */
#if 1
/* Interrupt handler for panic switch. */
ISR (PCINT0_vect)
{
     85a:	1f 92       	push	r1
     85c:	0f 92       	push	r0
     85e:	0f b6       	in	r0, 0x3f	; 63
     860:	0f 92       	push	r0
     862:	11 24       	eor	r1, r1
     864:	cf 93       	push	r28
     866:	df 93       	push	r29
     868:	00 d0       	rcall	.+0      	; 0x86a <__vector_3+0x10>
     86a:	cd b7       	in	r28, 0x3d	; 61
     86c:	de b7       	in	r29, 0x3e	; 62
volatile int i =0;
     86e:	1a 82       	std	Y+2, r1	; 0x02
     870:	19 82       	std	Y+1, r1	; 0x01
}
     872:	0f 90       	pop	r0
     874:	0f 90       	pop	r0
     876:	df 91       	pop	r29
     878:	cf 91       	pop	r28
     87a:	0f 90       	pop	r0
     87c:	0f be       	out	0x3f, r0	; 63
     87e:	0f 90       	pop	r0
     880:	1f 90       	pop	r1
     882:	18 95       	reti

00000884 <__vector_4>:

/* soft-UART RX */
#if 1
/* Detection of start bit */
ISR (PCINT1_vect)
{
     884:	1f 92       	push	r1
     886:	0f 92       	push	r0
     888:	0f b6       	in	r0, 0x3f	; 63
     88a:	0f 92       	push	r0
     88c:	11 24       	eor	r1, r1
     88e:	8f 93       	push	r24
     890:	9f 93       	push	r25
     892:	ef 93       	push	r30
     894:	ff 93       	push	r31
	1. stop reacting to PINB2 changes until either;
		a.) 10 bit character is received or
		b.) we have a 10 bit timeout
	2. reload bit counter
	3. set timer A1 for a half-bit timer*/
	spi_disable = 1;
     896:	81 e0       	ldi	r24, 0x01	; 1
     898:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <spi_disable>
	TIMSK0 &= ~(1<<OCIE0A);		//stop the  timer
     89c:	ee e6       	ldi	r30, 0x6E	; 110
     89e:	f0 e0       	ldi	r31, 0x00	; 0
     8a0:	90 81       	ld	r25, Z
     8a2:	9d 7f       	andi	r25, 0xFD	; 253
     8a4:	90 83       	st	Z, r25
	spi_to_flag = 0;
     8a6:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <spi_to_flag>
	fifo_delay_flag = 0;
     8aa:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <fifo_delay_flag>
	TCNT1 = 0x00;
     8ae:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     8b2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	PCMSK1 &= ~_BV(PCINT11);
     8b6:	ec e6       	ldi	r30, 0x6C	; 108
     8b8:	f0 e0       	ldi	r31, 0x00	; 0
     8ba:	90 81       	ld	r25, Z
     8bc:	97 7f       	andi	r25, 0xF7	; 247
     8be:	90 83       	st	Z, r25
	rcv_error_stop = 0;
     8c0:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <rcv_error_stop>
	start_bit = 1;
     8c4:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <start_bit>
	rcv_bit_count = 9;   // TBD 7 or 8? look for the stop bit?
     8c8:	99 e0       	ldi	r25, 0x09	; 9
     8ca:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <rcv_bit_count>
	rcv_char = 0x00; //flush receive buffer
     8ce:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <rcv_char>
	receiving = 1;
     8d2:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <receiving>
	TIMSK1 |= (1<<OCIE1A);
     8d6:	ef e6       	ldi	r30, 0x6F	; 111
     8d8:	f0 e0       	ldi	r31, 0x00	; 0
     8da:	80 81       	ld	r24, Z
     8dc:	82 60       	ori	r24, 0x02	; 2
     8de:	80 83       	st	Z, r24
	//PORTC ^= _BV(PORTC6);
}
     8e0:	ff 91       	pop	r31
     8e2:	ef 91       	pop	r30
     8e4:	9f 91       	pop	r25
     8e6:	8f 91       	pop	r24
     8e8:	0f 90       	pop	r0
     8ea:	0f be       	out	0x3f, r0	; 63
     8ec:	0f 90       	pop	r0
     8ee:	1f 90       	pop	r1
     8f0:	18 95       	reti

000008f2 <init_int0>:
init_int0()
{
	//this has to be done after the SPI expander has been set up for the proper levels
	//
	/*lets use the INT0 pin as triggered form the SPI expander low level */
	EICRA = 0x00;   /* insure that we are interrupting on low-level */
     8f2:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__EEPROM_REGION_LENGTH__+0x7f0069>
	EIMSK = 0x01;		/*enable INT0 */
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	8d bb       	out	0x1d, r24	; 29
	sei();
     8fa:	78 94       	sei
     8fc:	08 95       	ret

000008fe <mkm_wipe>:
  //MAD not sure what the original developer meant by this.
}

/*static inline*/ void
mkm_wipe()
{
     8fe:	cf 93       	push	r28
     900:	df 93       	push	r29
  AVR_LED_PORT |= _BV(AVR_LED_GREEN_BIT);
     902:	11 9a       	sbi	0x02, 1	; 2
  tamper_detected = 1;
     904:	81 e0       	ldi	r24, 0x01	; 1
     906:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <tamper_detected>
spi_setup(int on_flag)
{
  if (on_flag)
    {
      /* Disable SPI power reduction. */
      PRR &= ~_BV(PRSPI);
     90a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__EEPROM_REGION_LENGTH__+0x7f0064>
     90e:	8b 7f       	andi	r24, 0xFB	; 251
     910:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__EEPROM_REGION_LENGTH__+0x7f0064>

      /* Configure MOSI and SCK pins as output. */
      DDRD = _BV(MKM_AVR_MOSI_BIT) | _BV(MKM_AVR_SCK_BIT);
     914:	89 e0       	ldi	r24, 0x09	; 9
     916:	8d b9       	out	0x0d, r24	; 13

      /* Make sure SPI slave select (SS) is configured as output
         before enabling SPI master mode! */
      DDRC |= _BV(SPI_SS);  //MAD WTF? this is not the GPIO port......
     918:	48 9a       	sbi	0x09, 0	; 9

      /* Enable SPI in master mode, clock rate f/16. */
      SPCR = _BV(SPE) | _BV(MSTR) | _BV(SPR0);
     91a:	81 e5       	ldi	r24, 0x51	; 81
     91c:	8c bd       	out	0x2c, r24	; 44
	  
	  MKM_CS_PORT |= _BV(MKM_CS_BIT); /* CS high. */
     91e:	15 9a       	sbi	0x02, 5	; 2
mkm_wipe()
{
  AVR_LED_PORT |= _BV(AVR_LED_GREEN_BIT);
  tamper_detected = 1;
  spi_setup(1);
  mkm_grab();		   /*prevents FPGA from accessing MKM */
     920:	4c df       	rcall	.-360    	; 0x7ba <mkm_grab>
/* MKM */
static inline void
mkm_chip_select(int select_flag)
{
  if (select_flag)
    MKM_CS_PORT &= ~_BV(MKM_CS_BIT); /* CS low. */
     922:	15 98       	cbi	0x02, 5	; 2
#define SPI_OPERATION_PAGE 0x80

static inline void
spi_set_operation(uint8_t mode)
{
  spi_write(SPI_WRSR);
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	4f df       	rcall	.-354    	; 0x7c6 <spi_write>
  spi_write(mode);
     928:	80 e4       	ldi	r24, 0x40	; 64
     92a:	4d df       	rcall	.-358    	; 0x7c6 <spi_write>
mkm_chip_select(int select_flag)
{
  if (select_flag)
    MKM_CS_PORT &= ~_BV(MKM_CS_BIT); /* CS low. */
  else
    MKM_CS_PORT |= _BV(MKM_CS_BIT); /* CS high. */
     92c:	15 9a       	sbi	0x02, 5	; 2
/* MKM */
static inline void
mkm_chip_select(int select_flag)
{
  if (select_flag)
    MKM_CS_PORT &= ~_BV(MKM_CS_BIT); /* CS low. */
     92e:	15 98       	cbi	0x02, 5	; 2
  mkm_chip_select(1);
  spi_set_operation(SPI_OPERATION_SEQUENCE);
  mkm_chip_select(0);

  mkm_chip_select(1);
  spi_write(SPI_WRITE);
     930:	82 e0       	ldi	r24, 0x02	; 2
     932:	49 df       	rcall	.-366    	; 0x7c6 <spi_write>
  spi_write(0);                    /* Address, high byte. */
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	47 df       	rcall	.-370    	; 0x7c6 <spi_write>
  spi_write(0);                    /* Address, low byte. */
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	45 df       	rcall	.-374    	; 0x7c6 <spi_write>
     93c:	cf ef       	ldi	r28, 0xFF	; 255
     93e:	df e1       	ldi	r29, 0x1F	; 31
  for (int i = 0; i < 0x1fff; i++) /* 8192 bytes (64Kbit). */
    spi_write(0);
     940:	80 e0       	ldi	r24, 0x00	; 0
     942:	41 df       	rcall	.-382    	; 0x7c6 <spi_write>
     944:	21 97       	sbiw	r28, 0x01	; 1

  mkm_chip_select(1);
  spi_write(SPI_WRITE);
  spi_write(0);                    /* Address, high byte. */
  spi_write(0);                    /* Address, low byte. */
  for (int i = 0; i < 0x1fff; i++) /* 8192 bytes (64Kbit). */
     946:	e1 f7       	brne	.-8      	; 0x940 <mkm_wipe+0x42>
mkm_chip_select(int select_flag)
{
  if (select_flag)
    MKM_CS_PORT &= ~_BV(MKM_CS_BIT); /* CS low. */
  else
    MKM_CS_PORT |= _BV(MKM_CS_BIT); /* CS high. */
     948:	15 9a       	sbi	0x02, 5	; 2
	  
	  MKM_CS_PORT |= _BV(MKM_CS_BIT); /* CS high. */
    }
  else
    {
      SPCR &= ~_BV(SPE);        /* Disable SPI. */
     94a:	8c b5       	in	r24, 0x2c	; 44
     94c:	8f 7b       	andi	r24, 0xBF	; 191
     94e:	8c bd       	out	0x2c, r24	; 44
      PRR |= _BV(PRSPI);        /* Enable SPI power reduction. */
     950:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__EEPROM_REGION_LENGTH__+0x7f0064>
     954:	84 60       	ori	r24, 0x04	; 4
     956:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__EEPROM_REGION_LENGTH__+0x7f0064>
  /* Flash blue LED three times to indicate wipe is done */
  /*for (volatile int x = 0; x < 6; x++) {
    AVR_LED_PORT ^= _BV(AVR_LED_BLUE_BIT);
    for (volatile int i = 0; i < 3200; i++);
  }*/
}
     95a:	df 91       	pop	r29
     95c:	cf 91       	pop	r28
     95e:	08 95       	ret

00000960 <__vector_1>:
#endif

#if 1
/* Interrupt handler for case tamper switches. */
ISR (INT0_vect)
{
     960:	1f 92       	push	r1
     962:	0f 92       	push	r0
     964:	0f b6       	in	r0, 0x3f	; 63
     966:	0f 92       	push	r0
     968:	11 24       	eor	r1, r1
     96a:	2f 93       	push	r18
     96c:	3f 93       	push	r19
     96e:	4f 93       	push	r20
     970:	5f 93       	push	r21
     972:	6f 93       	push	r22
     974:	7f 93       	push	r23
     976:	8f 93       	push	r24
     978:	9f 93       	push	r25
     97a:	af 93       	push	r26
     97c:	bf 93       	push	r27
     97e:	cf 93       	push	r28
     980:	ef 93       	push	r30
     982:	ff 93       	push	r31
	spi_disable = 1;
     984:	c1 e0       	ldi	r28, 0x01	; 1
     986:	c0 93 89 01 	sts	0x0189, r28	; 0x800189 <spi_disable>
	TIMSK0 &= ~(1<<OCIE0A);		//stop the  timer
     98a:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     98e:	8d 7f       	andi	r24, 0xFD	; 253
     990:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
	spi_to_flag = 0;
     994:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <spi_to_flag>
	fifo_delay_flag = 0;
     998:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <fifo_delay_flag>
	if(case_enable && configured == 0x55){
     99c:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <case_enable>
     9a0:	88 23       	and	r24, r24
     9a2:	f1 f0       	breq	.+60     	; 0x9e0 <__vector_1+0x80>
     9a4:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <configured>
     9a8:	85 35       	cpi	r24, 0x55	; 85
     9aa:	d1 f4       	brne	.+52     	; 0x9e0 <__vector_1+0x80>
		//case_flt_cnt++;
		/* we are doing a "three-strikes" filtering on the triggering of this interrupt, if the tamper ring
		is truly broken, we will swiftly re-trigger this before the main loop has a chance to clear the count */
		//if(case_flt_cnt>3&&!case_flt_set){ 
		if(!case_flt_set){ 			
     9ac:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <case_flt_set>
     9b0:	81 11       	cpse	r24, r1
     9b2:	16 c0       	rjmp	.+44     	; 0x9e0 <__vector_1+0x80>
			cli();			/*disable interrupts until memory is cleared */
     9b4:	f8 94       	cli
			mkm_wipe();
     9b6:	a3 df       	rcall	.-186    	; 0x8fe <mkm_wipe>
			//To do: now disable case tamper (INT0_vect) interrupt until system is reset
			EIMSK = 0x00;
     9b8:	1d ba       	out	0x1d, r1	; 29
			sei();				/* re-enabling interrupts allows additional tamper trigger or tamper reset */
     9ba:	78 94       	sei
			//also having interrupts disabled while trying ssp commands below was problematic
			/*TAMP_ON turns on LED and provides falling edge signal to Pi to indicate tamper event */
			ssp_write(TAMP_ON);
     9bc:	88 e0       	ldi	r24, 0x08	; 8
     9be:	e0 de       	rcall	.-576    	; 0x780 <ssp_write>
			ssp_int_reset();   /*read INTFA reg to reset flag*/
     9c0:	c0 de       	rcall	.-640    	; 0x742 <ssp_int_reset>
			tamper_detected = 1;
     9c2:	c0 93 6c 01 	sts	0x016C, r28	; 0x80016c <tamper_detected>
			case_flt_set = 1;
     9c6:	c0 93 15 01 	sts	0x0115, r28	; 0x800115 <case_flt_set>
			fault_code[fault_index++] = CASE;
     9ca:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <fault_index>
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	8e 0f       	add	r24, r30
     9d2:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <fault_index>
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	e6 5c       	subi	r30, 0xC6	; 198
     9da:	fe 4f       	sbci	r31, 0xFE	; 254
     9dc:	88 e0       	ldi	r24, 0x08	; 8
     9de:	80 83       	st	Z, r24
			
		}
	}
	
	//sleep_disable();
}
     9e0:	ff 91       	pop	r31
     9e2:	ef 91       	pop	r30
     9e4:	cf 91       	pop	r28
     9e6:	bf 91       	pop	r27
     9e8:	af 91       	pop	r26
     9ea:	9f 91       	pop	r25
     9ec:	8f 91       	pop	r24
     9ee:	7f 91       	pop	r23
     9f0:	6f 91       	pop	r22
     9f2:	5f 91       	pop	r21
     9f4:	4f 91       	pop	r20
     9f6:	3f 91       	pop	r19
     9f8:	2f 91       	pop	r18
     9fa:	0f 90       	pop	r0
     9fc:	0f be       	out	0x3f, r0	; 63
     9fe:	0f 90       	pop	r0
     a00:	1f 90       	pop	r1
     a02:	18 95       	reti

00000a04 <send>:
	}
	spi_disable = 0;
}

void send(uint8_t tx){
	tx_char = tx;
     a04:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <tx_char>
	tx_bit_count = 0;
     a08:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <tx_bit_count>
	start_bit = 1;
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <start_bit>
	sending = 1;
     a12:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <sending>
	TCNT1 = 0x00;			//reset counter to avoid glitch on next rcv char.
     a16:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     a1a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	spi_disable = 1;
     a1e:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <spi_disable>
	TIMSK1 |= (1<<OCIE1A);
     a22:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     a26:	82 60       	ori	r24, 0x02	; 2
     a28:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	while(sending);
     a2c:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <sending>
     a30:	81 11       	cpse	r24, r1
     a32:	fc cf       	rjmp	.-8      	; 0xa2c <send+0x28>
}
     a34:	08 95       	ret

00000a36 <process_message>:
    }//end while

  return 0;
}

void process_message(){
     a36:	0f 93       	push	r16
     a38:	1f 93       	push	r17
     a3a:	cf 93       	push	r28
     a3c:	df 93       	push	r29
     a3e:	00 d0       	rcall	.+0      	; 0xa40 <process_message+0xa>
     a40:	cd b7       	in	r28, 0x3d	; 61
     a42:	de b7       	in	r29, 0x3e	; 62
	if (rcv_char == SET_LIGHT) {
     a44:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <rcv_char>
     a48:	81 34       	cpi	r24, 0x41	; 65
     a4a:	c9 f5       	brne	.+114    	; 0xabe <process_message+0x88>
		int light_temp = 0;
		rcv_valid = 0;
     a4c:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <rcv_valid>
		//light_status = 1;
		while (!rcv_valid & !rcv_error_stop){ }
     a50:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <rcv_valid>
     a54:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <rcv_error_stop>
     a58:	91 11       	cpse	r25, r1
     a5a:	02 c0       	rjmp	.+4      	; 0xa60 <process_message+0x2a>
     a5c:	88 23       	and	r24, r24
     a5e:	c1 f3       	breq	.-16     	; 0xa50 <process_message+0x1a>
			
		light_temp = (uint16_t)rcv_char <<8;
     a60:	00 91 66 01 	lds	r16, 0x0166	; 0x800166 <rcv_char>
		rcv_valid = 0;
     a64:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <rcv_valid>
		if (rcv_error_stop ==1) {
     a68:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <rcv_error_stop>
     a6c:	81 30       	cpi	r24, 0x01	; 1
     a6e:	41 f4       	brne	.+16     	; 0xa80 <process_message+0x4a>
		int light_temp = 0;
		rcv_valid = 0;
		//light_status = 1;
		while (!rcv_valid & !rcv_error_stop){ }
			
		light_temp = (uint16_t)rcv_char <<8;
     a70:	10 e0       	ldi	r17, 0x00	; 0
     a72:	10 2f       	mov	r17, r16
     a74:	00 27       	eor	r16, r16
		rcv_valid = 0;
		if (rcv_error_stop ==1) {
			rcv_error_stop = 0;
     a76:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <rcv_error_stop>
			//light_status = 0;
			send(0x15);
     a7a:	85 e1       	ldi	r24, 0x15	; 21
     a7c:	c3 df       	rcall	.-122    	; 0xa04 <send>
     a7e:	05 c0       	rjmp	.+10     	; 0xa8a <process_message+0x54>
		}
		else {
			light_temp = (uint16_t)rcv_char <<8;
     a80:	00 91 66 01 	lds	r16, 0x0166	; 0x800166 <rcv_char>
     a84:	10 e0       	ldi	r17, 0x00	; 0
     a86:	10 2f       	mov	r17, r16
     a88:	00 27       	eor	r16, r16
		}
		
		while (!rcv_valid & !rcv_error_stop){ }
     a8a:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <rcv_valid>
     a8e:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <rcv_error_stop>
     a92:	91 11       	cpse	r25, r1
     a94:	02 c0       	rjmp	.+4      	; 0xa9a <process_message+0x64>
     a96:	88 23       	and	r24, r24
     a98:	c1 f3       	breq	.-16     	; 0xa8a <process_message+0x54>
		rcv_valid = 0;
     a9a:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <rcv_valid>
		if (rcv_error_stop) {
     a9e:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <rcv_error_stop>
     aa2:	88 23       	and	r24, r24
     aa4:	19 f0       	breq	.+6      	; 0xaac <process_message+0x76>
			//light_status = 0;
			send(0x15);
     aa6:	85 e1       	ldi	r24, 0x15	; 21
     aa8:	ad df       	rcall	.-166    	; 0xa04 <send>
     aaa:	03 c0       	rjmp	.+6      	; 0xab2 <process_message+0x7c>
		} 
		else{
			light_temp |= (uint16_t)rcv_char;
     aac:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <rcv_char>
     ab0:	08 2b       	or	r16, r24
		}
		//if (light_status){
			light_thresh = light_temp;
     ab2:	10 93 82 01 	sts	0x0182, r17	; 0x800182 <light_thresh+0x1>
     ab6:	00 93 81 01 	sts	0x0181, r16	; 0x800181 <light_thresh>
			//eeprom_write_word((uint16_t *)LIGHT_PRE, light_thresh);
			//light_status = 0;
			send(0x14);
     aba:	84 e1       	ldi	r24, 0x14	; 20
     abc:	a3 df       	rcall	.-186    	; 0xa04 <send>
		//}
	}
	if (rcv_char == SET_TEMP_HI) {
     abe:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <rcv_char>
     ac2:	82 34       	cpi	r24, 0x42	; 66
     ac4:	f1 f4       	brne	.+60     	; 0xb02 <process_message+0xcc>
		rcv_valid = 0;
     ac6:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <rcv_valid>
		//fix for 16 bit word
		while (!rcv_valid & !rcv_error_stop){ }
     aca:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <rcv_valid>
     ace:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <rcv_error_stop>
     ad2:	91 11       	cpse	r25, r1
     ad4:	02 c0       	rjmp	.+4      	; 0xada <process_message+0xa4>
     ad6:	88 23       	and	r24, r24
     ad8:	c1 f3       	breq	.-16     	; 0xaca <process_message+0x94>
		rcv_valid = 0;
     ada:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <rcv_valid>
		if (rcv_error_stop ==1) {
     ade:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <rcv_error_stop>
     ae2:	81 30       	cpi	r24, 0x01	; 1
     ae4:	29 f4       	brne	.+10     	; 0xaf0 <process_message+0xba>
			rcv_error_stop = 0;
     ae6:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <rcv_error_stop>
			//light_status = 0;
			send(0x15);
     aea:	85 e1       	ldi	r24, 0x15	; 21
     aec:	8b df       	rcall	.-234    	; 0xa04 <send>
     aee:	09 c0       	rjmp	.+18     	; 0xb02 <process_message+0xcc>
		}
		else {
			send(0x14);
     af0:	84 e1       	ldi	r24, 0x14	; 20
     af2:	88 df       	rcall	.-240    	; 0xa04 <send>
			temp_hi_thresh = rcv_char;
     af4:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <rcv_char>
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <temp_hi_thresh+0x1>
     afe:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <temp_hi_thresh>
			//eeprom_write_word((uint16_t *)TEMP_PRE_HI, temp_hi_thresh);
		}
	}
	if (rcv_char == SET_TEMP_LO) {
     b02:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <rcv_char>
     b06:	83 34       	cpi	r24, 0x43	; 67
     b08:	f1 f4       	brne	.+60     	; 0xb46 <process_message+0x110>
		rcv_valid = 0;
     b0a:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <rcv_valid>
		//fix for 16 bit word
		while (!rcv_valid & !rcv_error_stop){ }
     b0e:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <rcv_valid>
     b12:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <rcv_error_stop>
     b16:	91 11       	cpse	r25, r1
     b18:	02 c0       	rjmp	.+4      	; 0xb1e <process_message+0xe8>
     b1a:	88 23       	and	r24, r24
     b1c:	c1 f3       	breq	.-16     	; 0xb0e <process_message+0xd8>
		rcv_valid = 0;
     b1e:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <rcv_valid>
		if (rcv_error_stop ==1) {
     b22:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <rcv_error_stop>
     b26:	81 30       	cpi	r24, 0x01	; 1
     b28:	29 f4       	brne	.+10     	; 0xb34 <process_message+0xfe>
			rcv_error_stop = 0;
     b2a:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <rcv_error_stop>
			//light_status = 0;
			send(0x15);
     b2e:	85 e1       	ldi	r24, 0x15	; 21
     b30:	69 df       	rcall	.-302    	; 0xa04 <send>
     b32:	09 c0       	rjmp	.+18     	; 0xb46 <process_message+0x110>
		}
		else {
			send(0x14);
     b34:	84 e1       	ldi	r24, 0x14	; 20
     b36:	66 df       	rcall	.-308    	; 0xa04 <send>
			temp_lo_thresh = rcv_char;
     b38:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <rcv_char>
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <temp_lo_thresh+0x1>
     b42:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <temp_lo_thresh>
			//eeprom_write_word((uint16_t *)TEMP_PRE_LO, temp_lo_thresh);
		}
	}
	if (rcv_char == SET_VIBE) {
     b46:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <rcv_char>
     b4a:	84 34       	cpi	r24, 0x44	; 68
     b4c:	09 f0       	breq	.+2      	; 0xb50 <process_message+0x11a>
     b4e:	5b c0       	rjmp	.+182    	; 0xc06 <process_message+0x1d0>
		volatile uint8_t vibe_temp_lo = 0;
     b50:	1a 82       	std	Y+2, r1	; 0x02
		volatile uint8_t vibe_temp_hi = 0;
     b52:	19 82       	std	Y+1, r1	; 0x01
		rcv_valid = 0;
     b54:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <rcv_valid>
		vibe_status = 1;
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <vibe_status>
		while (!rcv_valid & !rcv_error_stop){ }
     b5e:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <rcv_valid>
     b62:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <rcv_error_stop>
     b66:	91 11       	cpse	r25, r1
     b68:	02 c0       	rjmp	.+4      	; 0xb6e <process_message+0x138>
     b6a:	88 23       	and	r24, r24
     b6c:	c1 f3       	breq	.-16     	; 0xb5e <process_message+0x128>
		
		vibe_temp_lo = rcv_char;
     b6e:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <rcv_char>
     b72:	8a 83       	std	Y+2, r24	; 0x02
		rcv_valid = 0;
     b74:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <rcv_valid>
		if (rcv_error_stop ==1) {
     b78:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <rcv_error_stop>
     b7c:	81 30       	cpi	r24, 0x01	; 1
     b7e:	39 f4       	brne	.+14     	; 0xb8e <process_message+0x158>
			rcv_error_stop = 0;
     b80:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <rcv_error_stop>
			vibe_status = 0;
     b84:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <vibe_status>
			send(0x15);
     b88:	85 e1       	ldi	r24, 0x15	; 21
     b8a:	3c df       	rcall	.-392    	; 0xa04 <send>
     b8c:	03 c0       	rjmp	.+6      	; 0xb94 <process_message+0x15e>
		}
		else {
			vibe_temp_lo = rcv_char;
     b8e:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <rcv_char>
     b92:	8a 83       	std	Y+2, r24	; 0x02
		}
		
		while (!rcv_valid & !rcv_error_stop){ }
     b94:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <rcv_valid>
     b98:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <rcv_error_stop>
     b9c:	91 11       	cpse	r25, r1
     b9e:	02 c0       	rjmp	.+4      	; 0xba4 <process_message+0x16e>
     ba0:	88 23       	and	r24, r24
     ba2:	c1 f3       	breq	.-16     	; 0xb94 <process_message+0x15e>
		rcv_valid = 0;
     ba4:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <rcv_valid>
		if (rcv_error_stop) {
     ba8:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <rcv_error_stop>
     bac:	88 23       	and	r24, r24
     bae:	29 f0       	breq	.+10     	; 0xbba <process_message+0x184>
			vibe_status = 0;
     bb0:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <vibe_status>
			send(0x15);
     bb4:	85 e1       	ldi	r24, 0x15	; 21
     bb6:	26 df       	rcall	.-436    	; 0xa04 <send>
     bb8:	03 c0       	rjmp	.+6      	; 0xbc0 <process_message+0x18a>
		}
		else{
			vibe_temp_hi = rcv_char;
     bba:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <rcv_char>
     bbe:	89 83       	std	Y+1, r24	; 0x01
		}
		if (vibe_status){
     bc0:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <vibe_status>
     bc4:	88 23       	and	r24, r24
     bc6:	f9 f0       	breq	.+62     	; 0xc06 <process_message+0x1d0>
			vibe_lo_thresh = vibe_temp_lo;
     bc8:	8a 81       	ldd	r24, Y+2	; 0x02
     bca:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <vibe_lo_thresh>
			vibe_hi_thresh = vibe_temp_hi;
     bce:	89 81       	ldd	r24, Y+1	; 0x01
     bd0:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <vibe_hi_thresh>
			//eeprom_write_byte((uint8_t *)VIBE_PRE_HI, vibe_hi_thresh);
			//eeprom_write_byte((uint8_t *)VIBE_PRE_LO, vibe_lo_thresh);
			vibe_status = 0;
     bd4:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <vibe_status>
			
			send(0x14);
     bd8:	84 e1       	ldi	r24, 0x14	; 20
     bda:	14 df       	rcall	.-472    	; 0xa04 <send>
			spi_disable = 0;
     bdc:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <spi_disable>
			vibe_thresh = (uint16_t)vibe_hi_thresh<<8 | (uint16_t)vibe_lo_thresh;
     be0:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <vibe_hi_thresh>
     be4:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <vibe_lo_thresh>
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	92 2b       	or	r25, r18
     bec:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <vibe_thresh+0x1>
     bf0:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <vibe_thresh>
			 UCSRC = (1<<UMSEL1)|(1<<UMSEL0);  //change SPI clock phase/polarity first!
     bf4:	80 ec       	ldi	r24, 0xC0	; 192
     bf6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__EEPROM_REGION_LENGTH__+0x7f00c2>
			 UCSRC &= ~(1<<UCSZ0);				//before chip selects!!!!
     bfa:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__EEPROM_REGION_LENGTH__+0x7f00c2>
     bfe:	8d 7f       	andi	r24, 0xFD	; 253
     c00:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__EEPROM_REGION_LENGTH__+0x7f00c2>
			adx_set_threshold();
     c04:	90 db       	rcall	.-2272   	; 0x326 <adx_set_threshold>
		}
	}
	if (rcv_char == ENA_TAMP) {
     c06:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <rcv_char>
     c0a:	85 34       	cpi	r24, 0x45	; 69
     c0c:	01 f5       	brne	.+64     	; 0xc4e <process_message+0x218>
		rcv_valid = 0;
     c0e:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <rcv_valid>
		//fix for 16 bit word
		while (!rcv_valid & !rcv_error_stop){ }
     c12:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <rcv_valid>
     c16:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <rcv_error_stop>
     c1a:	91 11       	cpse	r25, r1
     c1c:	02 c0       	rjmp	.+4      	; 0xc22 <process_message+0x1ec>
     c1e:	88 23       	and	r24, r24
     c20:	c1 f3       	breq	.-16     	; 0xc12 <process_message+0x1dc>
		rcv_valid = 0;
     c22:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <rcv_valid>
		if (rcv_error_stop ==1) {
     c26:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <rcv_error_stop>
     c2a:	81 30       	cpi	r24, 0x01	; 1
     c2c:	29 f4       	brne	.+10     	; 0xc38 <process_message+0x202>
			rcv_error_stop = 0;
     c2e:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <rcv_error_stop>
			//light_status = 0;
			send(0x15);
     c32:	85 e1       	ldi	r24, 0x15	; 21
     c34:	e7 de       	rcall	.-562    	; 0xa04 <send>
     c36:	0b c0       	rjmp	.+22     	; 0xc4e <process_message+0x218>
		}
		else {
			//uint8_t flags = eeprom_read_byte((uint8_t *)TAMP_FLAGS);
			flags |= rcv_char;
     c38:	10 91 66 01 	lds	r17, 0x0166	; 0x800166 <rcv_char>
     c3c:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <flags>
     c40:	18 2b       	or	r17, r24
     c42:	10 93 4a 01 	sts	0x014A, r17	; 0x80014a <flags>
			send(0x14);
     c46:	84 e1       	ldi	r24, 0x14	; 20
     c48:	dd de       	rcall	.-582    	; 0xa04 <send>
			init_tamper_values(flags, 0);
     c4a:	81 2f       	mov	r24, r17
     c4c:	c1 dd       	rcall	.-1150   	; 0x7d0 <init_tamper_values.isra.2>
			//tamper_detected = 0;
			//AVR_LED_PORT &= ~_BV(AVR_LED_GREEN_BIT);
			//mkm_release();
		}
	}
	if (rcv_char == DIS_TAMP) {
     c4e:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <rcv_char>
     c52:	86 34       	cpi	r24, 0x46	; 70
     c54:	09 f5       	brne	.+66     	; 0xc98 <process_message+0x262>
		rcv_valid = 0;
     c56:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <rcv_valid>
		//fix for 16 bit word
		while (!rcv_valid & !rcv_error_stop){ }
     c5a:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <rcv_valid>
     c5e:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <rcv_error_stop>
     c62:	91 11       	cpse	r25, r1
     c64:	02 c0       	rjmp	.+4      	; 0xc6a <process_message+0x234>
     c66:	88 23       	and	r24, r24
     c68:	c1 f3       	breq	.-16     	; 0xc5a <process_message+0x224>
		rcv_valid = 0;
     c6a:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <rcv_valid>
		if (rcv_error_stop ==1) {
     c6e:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <rcv_error_stop>
     c72:	81 30       	cpi	r24, 0x01	; 1
     c74:	29 f4       	brne	.+10     	; 0xc80 <process_message+0x24a>
			rcv_error_stop = 0;
     c76:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <rcv_error_stop>
			//light_status = 0;
			send(0x15);
     c7a:	85 e1       	ldi	r24, 0x15	; 21
     c7c:	c3 de       	rcall	.-634    	; 0xa04 <send>
     c7e:	0c c0       	rjmp	.+24     	; 0xc98 <process_message+0x262>
		}
		else {
			//uint8_t flags = eeprom_read_byte((uint8_t *)TAMP_FLAGS);
			flags &= ~rcv_char;
     c80:	10 91 66 01 	lds	r17, 0x0166	; 0x800166 <rcv_char>
     c84:	10 95       	com	r17
     c86:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <flags>
     c8a:	18 23       	and	r17, r24
     c8c:	10 93 4a 01 	sts	0x014A, r17	; 0x80014a <flags>
			send(0x14);
     c90:	84 e1       	ldi	r24, 0x14	; 20
     c92:	b8 de       	rcall	.-656    	; 0xa04 <send>
			init_tamper_values(flags, 0);
     c94:	81 2f       	mov	r24, r17
     c96:	9c dd       	rcall	.-1224   	; 0x7d0 <init_tamper_values.isra.2>
			//tamper_detected = 0;
			//AVR_LED_PORT &= ~_BV(AVR_LED_GREEN_BIT);
			//mkm_release();
		}
	}
	if (rcv_char == BATT_EN) {
     c98:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <rcv_char>
     c9c:	8f 34       	cpi	r24, 0x4F	; 79
     c9e:	e9 f4       	brne	.+58     	; 0xcda <process_message+0x2a4>
		rcv_valid = 0;
     ca0:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <rcv_valid>
		//fix for 16 bit word
		while (!rcv_valid & !rcv_error_stop){ }
     ca4:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <rcv_valid>
     ca8:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <rcv_error_stop>
     cac:	91 11       	cpse	r25, r1
     cae:	02 c0       	rjmp	.+4      	; 0xcb4 <process_message+0x27e>
     cb0:	88 23       	and	r24, r24
     cb2:	c1 f3       	breq	.-16     	; 0xca4 <process_message+0x26e>
		rcv_valid = 0;
     cb4:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <rcv_valid>
		if (rcv_error_stop ==1) {
     cb8:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <rcv_error_stop>
     cbc:	81 30       	cpi	r24, 0x01	; 1
     cbe:	21 f4       	brne	.+8      	; 0xcc8 <process_message+0x292>
			rcv_error_stop = 0;
     cc0:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <rcv_error_stop>
			send(0x15);
     cc4:	85 e1       	ldi	r24, 0x15	; 21
     cc6:	08 c0       	rjmp	.+16     	; 0xcd8 <process_message+0x2a2>
		}
		else {
			//BATT_ON signal needs to be asserted for backup to work
			if(rcv_char){
     cc8:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <rcv_char>
     ccc:	88 23       	and	r24, r24
     cce:	11 f0       	breq	.+4      	; 0xcd4 <process_message+0x29e>
				PORTC |= _BV(PORTC6);
     cd0:	56 9a       	sbi	0x0a, 6	; 10
     cd2:	01 c0       	rjmp	.+2      	; 0xcd6 <process_message+0x2a0>
			}
			else {
				PORTC &= ~_BV(PORTC6);
     cd4:	56 98       	cbi	0x0a, 6	; 10
			}
			send(0x14);
     cd6:	84 e1       	ldi	r24, 0x14	; 20
     cd8:	95 de       	rcall	.-726    	; 0xa04 <send>
		}
	}
	if (rcv_char == CHK_LIGHT) {
     cda:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <rcv_char>
     cde:	87 34       	cpi	r24, 0x47	; 71
     ce0:	79 f4       	brne	.+30     	; 0xd00 <process_message+0x2ca>
		rcv_valid = 0;
     ce2:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <rcv_valid>
		//fix for 16 bit word
		send (light>>8);
     ce6:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <light>
     cea:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <light+0x1>
     cee:	89 2f       	mov	r24, r25
     cf0:	89 de       	rcall	.-750    	; 0xa04 <send>
		send ((uint8_t) light&0xFF);
     cf2:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <light>
     cf6:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <light+0x1>
     cfa:	84 de       	rcall	.-760    	; 0xa04 <send>
		send(0x14);
     cfc:	84 e1       	ldi	r24, 0x14	; 20
     cfe:	82 de       	rcall	.-764    	; 0xa04 <send>
	}
	if (rcv_char == CHK_TEMP) {
     d00:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <rcv_char>
     d04:	88 34       	cpi	r24, 0x48	; 72
     d06:	b9 f4       	brne	.+46     	; 0xd36 <process_message+0x300>
		rcv_valid = 0;
     d08:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <rcv_valid>
		//fix for 16 bit word
		send (temperature>>8);
     d0c:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <temperature>
     d10:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <temperature+0x1>
     d14:	a0 91 5e 01 	lds	r26, 0x015E	; 0x80015e <temperature+0x2>
     d18:	b0 91 5f 01 	lds	r27, 0x015F	; 0x80015f <temperature+0x3>
     d1c:	89 2f       	mov	r24, r25
     d1e:	72 de       	rcall	.-796    	; 0xa04 <send>
		send ((uint8_t)temperature&0xFF);
     d20:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <temperature>
     d24:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <temperature+0x1>
     d28:	a0 91 5e 01 	lds	r26, 0x015E	; 0x80015e <temperature+0x2>
     d2c:	b0 91 5f 01 	lds	r27, 0x015F	; 0x80015f <temperature+0x3>
     d30:	69 de       	rcall	.-814    	; 0xa04 <send>
		send(0x14);
     d32:	84 e1       	ldi	r24, 0x14	; 20
     d34:	67 de       	rcall	.-818    	; 0xa04 <send>
	}
	if (rcv_char == CHK_VIBE_S) {
     d36:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <rcv_char>
     d3a:	8d 34       	cpi	r24, 0x4D	; 77
     d3c:	81 f4       	brne	.+32     	; 0xd5e <process_message+0x328>
		rcv_valid = 0;
     d3e:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <rcv_valid>
		//fix for 16 bit word
		adx_read_fifo_count();
     d42:	0d db       	rcall	.-2534   	; 0x35e <adx_read_fifo_count>
		send (samples>>8);
     d44:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <samples>
     d48:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <samples+0x1>
     d4c:	89 2f       	mov	r24, r25
     d4e:	5a de       	rcall	.-844    	; 0xa04 <send>
		send ((uint8_t)samples&0xFF);
     d50:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <samples>
     d54:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <samples+0x1>
     d58:	55 de       	rcall	.-854    	; 0xa04 <send>
		send(0x14);
     d5a:	84 e1       	ldi	r24, 0x14	; 20
     d5c:	53 de       	rcall	.-858    	; 0xa04 <send>
	}
	if (rcv_char == GET_VIBE_S) {
     d5e:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <rcv_char>
     d62:	8e 34       	cpi	r24, 0x4E	; 78
     d64:	b1 f4       	brne	.+44     	; 0xd92 <process_message+0x35c>
		rcv_valid = 0;
     d66:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <rcv_valid>
		//fix for 16 bit word
		send(xhi);
     d6a:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <xhi>
     d6e:	4a de       	rcall	.-876    	; 0xa04 <send>
		send(xlo);
     d70:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <xlo>
     d74:	47 de       	rcall	.-882    	; 0xa04 <send>
		send(yhi);
     d76:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <yhi>
     d7a:	44 de       	rcall	.-888    	; 0xa04 <send>
		send(ylo);
     d7c:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <ylo>
     d80:	41 de       	rcall	.-894    	; 0xa04 <send>
		send(zhi);
     d82:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <zhi>
     d86:	3e de       	rcall	.-900    	; 0xa04 <send>
		send(zlo);
     d88:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <zlo>
     d8c:	3b de       	rcall	.-906    	; 0xa04 <send>
		send(0x14);
     d8e:	84 e1       	ldi	r24, 0x14	; 20
     d90:	39 de       	rcall	.-910    	; 0xa04 <send>
	}
	
	if (rcv_char == SET_CONFIG) {
     d92:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <rcv_char>
     d96:	8a 34       	cpi	r24, 0x4A	; 74
     d98:	79 f4       	brne	.+30     	; 0xdb8 <process_message+0x382>
		rcv_valid = 0;
     d9a:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <rcv_valid>
		mkm_release();
     d9e:	10 dd       	rcall	.-1504   	; 0x7c0 <mkm_release>
		configured = 0x55;
     da0:	85 e5       	ldi	r24, 0x55	; 85
     da2:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <configured>
		if(case_enable){
     da6:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <case_enable>
     daa:	88 23       	and	r24, r24
     dac:	19 f0       	breq	.+6      	; 0xdb4 <process_message+0x37e>
			case_flt_set = 0;   /* clear the flt set flag*/
     dae:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <case_flt_set>
			init_int0();		/*enable INT0 , moved from enable config to allow configured to be set before looking for int*/
     db2:	9f dd       	rcall	.-1218   	; 0x8f2 <init_int0>
		}
		send(0x14);
     db4:	84 e1       	ldi	r24, 0x14	; 20
     db6:	26 de       	rcall	.-948    	; 0xa04 <send>
	}
	
	if (rcv_char == CHK_FAULT_LONG) {
     db8:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <rcv_char>
     dbc:	81 35       	cpi	r24, 0x51	; 81
     dbe:	71 f5       	brne	.+92     	; 0xe1c <process_message+0x3e6>
		rcv_valid = 0;
     dc0:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <rcv_valid>
		for (int i=0; i<5; i++){
     dc4:	00 e0       	ldi	r16, 0x00	; 0
     dc6:	10 e0       	ldi	r17, 0x00	; 0
			send(fault_code[i]);
     dc8:	f8 01       	movw	r30, r16
     dca:	e6 5c       	subi	r30, 0xC6	; 198
     dcc:	fe 4f       	sbci	r31, 0xFE	; 254
     dce:	80 81       	ld	r24, Z
     dd0:	19 de       	rcall	.-974    	; 0xa04 <send>
			send(fault_value1[i]);
     dd2:	f8 01       	movw	r30, r16
     dd4:	ec 5c       	subi	r30, 0xCC	; 204
     dd6:	fe 4f       	sbci	r31, 0xFE	; 254
     dd8:	80 81       	ld	r24, Z
     dda:	14 de       	rcall	.-984    	; 0xa04 <send>
			send(fault_value2[i]);
     ddc:	f8 01       	movw	r30, r16
     dde:	e2 5d       	subi	r30, 0xD2	; 210
     de0:	fe 4f       	sbci	r31, 0xFE	; 254
     de2:	80 81       	ld	r24, Z
     de4:	0f de       	rcall	.-994    	; 0xa04 <send>
			send(fault_value3[i]);
     de6:	f8 01       	movw	r30, r16
     de8:	e8 5d       	subi	r30, 0xD8	; 216
     dea:	fe 4f       	sbci	r31, 0xFE	; 254
     dec:	80 81       	ld	r24, Z
     dee:	0a de       	rcall	.-1004   	; 0xa04 <send>
			send(fault_value4[i]);
     df0:	f8 01       	movw	r30, r16
     df2:	ee 5d       	subi	r30, 0xDE	; 222
     df4:	fe 4f       	sbci	r31, 0xFE	; 254
     df6:	80 81       	ld	r24, Z
     df8:	05 de       	rcall	.-1014   	; 0xa04 <send>
			send(fault_value5[i]);
     dfa:	f8 01       	movw	r30, r16
     dfc:	e4 5e       	subi	r30, 0xE4	; 228
     dfe:	fe 4f       	sbci	r31, 0xFE	; 254
     e00:	80 81       	ld	r24, Z
     e02:	00 de       	rcall	.-1024   	; 0xa04 <send>
			send(fault_value6[i]);
     e04:	f8 01       	movw	r30, r16
     e06:	ea 5e       	subi	r30, 0xEA	; 234
     e08:	fe 4f       	sbci	r31, 0xFE	; 254
     e0a:	80 81       	ld	r24, Z
     e0c:	fb dd       	rcall	.-1034   	; 0xa04 <send>
		send(0x14);
	}
	
	if (rcv_char == CHK_FAULT_LONG) {
		rcv_valid = 0;
		for (int i=0; i<5; i++){
     e0e:	0f 5f       	subi	r16, 0xFF	; 255
     e10:	1f 4f       	sbci	r17, 0xFF	; 255
     e12:	05 30       	cpi	r16, 0x05	; 5
     e14:	11 05       	cpc	r17, r1
     e16:	c1 f6       	brne	.-80     	; 0xdc8 <process_message+0x392>
			send(fault_value3[i]);
			send(fault_value4[i]);
			send(fault_value5[i]);
			send(fault_value6[i]);
		}
		send(0x14);
     e18:	84 e1       	ldi	r24, 0x14	; 20
     e1a:	f4 dd       	rcall	.-1048   	; 0xa04 <send>
	}
	
	if (rcv_char == CHK_FAULT) {
     e1c:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <rcv_char>
     e20:	8c 34       	cpi	r24, 0x4C	; 76
     e22:	d1 f4       	brne	.+52     	; 0xe58 <process_message+0x422>
		rcv_valid = 0;
     e24:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <rcv_valid>
		for (int i=0; i<5; i++){
     e28:	00 e0       	ldi	r16, 0x00	; 0
     e2a:	10 e0       	ldi	r17, 0x00	; 0
			send(fault_code[i]);
     e2c:	f8 01       	movw	r30, r16
     e2e:	e6 5c       	subi	r30, 0xC6	; 198
     e30:	fe 4f       	sbci	r31, 0xFE	; 254
     e32:	80 81       	ld	r24, Z
     e34:	e7 dd       	rcall	.-1074   	; 0xa04 <send>
			send(fault_value1[i]);
     e36:	f8 01       	movw	r30, r16
     e38:	ec 5c       	subi	r30, 0xCC	; 204
     e3a:	fe 4f       	sbci	r31, 0xFE	; 254
     e3c:	80 81       	ld	r24, Z
     e3e:	e2 dd       	rcall	.-1084   	; 0xa04 <send>
			send(fault_value2[i]);
     e40:	f8 01       	movw	r30, r16
     e42:	e2 5d       	subi	r30, 0xD2	; 210
     e44:	fe 4f       	sbci	r31, 0xFE	; 254
     e46:	80 81       	ld	r24, Z
     e48:	dd dd       	rcall	.-1094   	; 0xa04 <send>
		send(0x14);
	}
	
	if (rcv_char == CHK_FAULT) {
		rcv_valid = 0;
		for (int i=0; i<5; i++){
     e4a:	0f 5f       	subi	r16, 0xFF	; 255
     e4c:	1f 4f       	sbci	r17, 0xFF	; 255
     e4e:	05 30       	cpi	r16, 0x05	; 5
     e50:	11 05       	cpc	r17, r1
     e52:	61 f7       	brne	.-40     	; 0xe2c <process_message+0x3f6>
			send(fault_code[i]);
			send(fault_value1[i]);
			send(fault_value2[i]);
		}
		send(0x14);
     e54:	84 e1       	ldi	r24, 0x14	; 20
     e56:	d6 dd       	rcall	.-1108   	; 0xa04 <send>
	}
	
	if (rcv_char == CHK_TAMP) {
     e58:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <rcv_char>
     e5c:	8b 34       	cpi	r24, 0x4B	; 75
     e5e:	51 f4       	brne	.+20     	; 0xe74 <process_message+0x43e>
		rcv_valid = 0;
     e60:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <rcv_valid>
		if (tamper_detected == 1) {
     e64:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <tamper_detected>
     e68:	81 30       	cpi	r24, 0x01	; 1
     e6a:	11 f4       	brne	.+4      	; 0xe70 <process_message+0x43a>
			send(0x15);
     e6c:	85 e1       	ldi	r24, 0x15	; 21
     e6e:	01 c0       	rjmp	.+2      	; 0xe72 <process_message+0x43c>
		}
		else {
			send(0x14);
     e70:	84 e1       	ldi	r24, 0x14	; 20
     e72:	c8 dd       	rcall	.-1136   	; 0xa04 <send>
		}
	}
	if (rcv_char == CHK_CONF) {
     e74:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <rcv_char>
     e78:	80 35       	cpi	r24, 0x50	; 80
     e7a:	89 f4       	brne	.+34     	; 0xe9e <process_message+0x468>
		rcv_valid = 0;
     e7c:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <rcv_valid>
		send (configured);
     e80:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <configured>
     e84:	bf dd       	rcall	.-1154   	; 0xa04 <send>
		send (ssp_fault);
     e86:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <ssp_fault>
     e8a:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <ssp_fault+0x1>
     e8e:	ba dd       	rcall	.-1164   	; 0xa04 <send>
		send(ssp_fault_max);
     e90:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <ssp_fault_max>
     e94:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <ssp_fault_max+0x1>
     e98:	b5 dd       	rcall	.-1174   	; 0xa04 <send>
		send(0x14);
     e9a:	84 e1       	ldi	r24, 0x14	; 20
     e9c:	b3 dd       	rcall	.-1178   	; 0xa04 <send>
	}
	if (rcv_char == CHK_CONF_EXT) {
     e9e:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <rcv_char>
     ea2:	82 35       	cpi	r24, 0x52	; 82
     ea4:	71 f5       	brne	.+92     	; 0xf02 <process_message+0x4cc>
		rcv_valid = 0;
     ea6:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <rcv_valid>
		send (vibe_enable);
     eaa:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <vibe_enable>
     eae:	aa dd       	rcall	.-1196   	; 0xa04 <send>
		send (light_enable);
     eb0:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <light_enable>
     eb4:	a7 dd       	rcall	.-1202   	; 0xa04 <send>
		send(temp_enable);
     eb6:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <temp_enable>
     eba:	a4 dd       	rcall	.-1208   	; 0xa04 <send>
		send(case_enable);
     ebc:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <case_enable>
     ec0:	a1 dd       	rcall	.-1214   	; 0xa04 <send>
		send(ll_enable);
     ec2:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <ll_enable>
     ec6:	9e dd       	rcall	.-1220   	; 0xa04 <send>
		send(vibe_hi_thresh);
     ec8:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <vibe_hi_thresh>
     ecc:	9b dd       	rcall	.-1226   	; 0xa04 <send>
		send(vibe_lo_thresh);
     ece:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <vibe_lo_thresh>
     ed2:	98 dd       	rcall	.-1232   	; 0xa04 <send>
		send (light_thresh>>8);
     ed4:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <light_thresh>
     ed8:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <light_thresh+0x1>
     edc:	89 2f       	mov	r24, r25
     ede:	92 dd       	rcall	.-1244   	; 0xa04 <send>
		send ((uint8_t) light_thresh&0xFF);
     ee0:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <light_thresh>
     ee4:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <light_thresh+0x1>
     ee8:	8d dd       	rcall	.-1254   	; 0xa04 <send>
		send(temp_hi_thresh);
     eea:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <temp_hi_thresh>
     eee:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <temp_hi_thresh+0x1>
     ef2:	88 dd       	rcall	.-1264   	; 0xa04 <send>
		send(temp_lo_thresh);
     ef4:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <temp_lo_thresh>
     ef8:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <temp_lo_thresh+0x1>
     efc:	83 dd       	rcall	.-1274   	; 0xa04 <send>
		send(0x14);
     efe:	84 e1       	ldi	r24, 0x14	; 20
     f00:	81 dd       	rcall	.-1278   	; 0xa04 <send>
	}
	spi_disable = 0;
     f02:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <spi_disable>
}
     f06:	0f 90       	pop	r0
     f08:	0f 90       	pop	r0
     f0a:	df 91       	pop	r29
     f0c:	cf 91       	pop	r28
     f0e:	1f 91       	pop	r17
     f10:	0f 91       	pop	r16
     f12:	08 95       	ret

00000f14 <check_usart_faults>:
	TIMSK1 |= (1<<OCIE1A);
	while(sending);
}

void check_usart_faults(){
	if ((light_fault > 20)&& (light_enable)){  //light 
     f14:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <light_fault>
     f18:	85 31       	cpi	r24, 0x15	; 21
     f1a:	48 f0       	brcs	.+18     	; 0xf2e <check_usart_faults+0x1a>
     f1c:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <light_enable>
     f20:	88 23       	and	r24, r24
     f22:	29 f0       	breq	.+10     	; 0xf2e <check_usart_faults+0x1a>
		//fault_code = USART;
		fault_value1[0] = LIGHT;
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <fault_value1>
		//fault_value2[0] = 0x00;
		tamper_detected = 1;
     f2a:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <tamper_detected>
	}
	if ((vibe_fault > 20) && (vibe_enable||temp_enable)){  //vibe and temp same chip
     f2e:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <vibe_fault>
     f32:	85 31       	cpi	r24, 0x15	; 21
     f34:	70 f0       	brcs	.+28     	; 0xf52 <check_usart_faults+0x3e>
     f36:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <vibe_enable>
     f3a:	81 11       	cpse	r24, r1
     f3c:	04 c0       	rjmp	.+8      	; 0xf46 <check_usart_faults+0x32>
     f3e:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <temp_enable>
     f42:	88 23       	and	r24, r24
     f44:	31 f0       	breq	.+12     	; 0xf52 <check_usart_faults+0x3e>
		//fault_code = USART;
		fault_value1[0] = VIBE;
     f46:	84 e0       	ldi	r24, 0x04	; 4
     f48:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <fault_value1>
		//fault_value2 = 0x00;
		tamper_detected = 1;
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <tamper_detected>
	}
	if ((ssp_fault >200) && case_enable) {
     f52:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <ssp_fault>
     f56:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <ssp_fault+0x1>
     f5a:	89 3c       	cpi	r24, 0xC9	; 201
     f5c:	91 05       	cpc	r25, r1
     f5e:	50 f0       	brcs	.+20     	; 0xf74 <check_usart_faults+0x60>
     f60:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <case_enable>
     f64:	88 23       	and	r24, r24
     f66:	31 f0       	breq	.+12     	; 0xf74 <check_usart_faults+0x60>
		//fault_code = USART;
		fault_value1[0] = SSP;
     f68:	80 e1       	ldi	r24, 0x10	; 16
     f6a:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <fault_value1>
		//fault_value2 = 0x00;
		tamper_detected = 1;
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <tamper_detected>
	}
	if (unk_fault >20) {
     f74:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <unk_fault>
     f78:	85 31       	cpi	r24, 0x15	; 21
     f7a:	30 f0       	brcs	.+12     	; 0xf88 <check_usart_faults+0x74>
		//fault_code = USART;
		fault_value1[0] = UNK;
     f7c:	80 e8       	ldi	r24, 0x80	; 128
     f7e:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <fault_value1>
	//	fault_value2 = 0x00;
		tamper_detected = 1;
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <tamper_detected>
     f88:	08 95       	ret

00000f8a <ssp_reset>:
	}
	
}

void ssp_reset(){
     f8a:	ef 92       	push	r14
     f8c:	ff 92       	push	r15
     f8e:	0f 93       	push	r16
     f90:	1f 93       	push	r17
     f92:	cf 93       	push	r28
     f94:	df 93       	push	r29
     f96:	00 d0       	rcall	.+0      	; 0xf98 <ssp_reset+0xe>
     f98:	cd b7       	in	r28, 0x3d	; 61
     f9a:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t check = 0;
     f9c:	1a 82       	std	Y+2, r1	; 0x02
	volatile uint8_t ssp_check = 0;
     f9e:	19 82       	std	Y+1, r1	; 0x01
	UCSRC = (1<<UMSEL1)|(1<<UMSEL0)|(1<<UCSZ0)|(1<<UCPOL);
     fa0:	83 ec       	ldi	r24, 0xC3	; 195
     fa2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__EEPROM_REGION_LENGTH__+0x7f00c2>
		if(ssp_check > 21) {
			//ssp_fault++;
			ssp_fault_max++;
			break;
		}
		fifo_delay_flag = 1;
     fa6:	11 e0       	ldi	r17, 0x01	; 1
		OCR0A = 200;
     fa8:	08 ec       	ldi	r16, 0xC8	; 200
		fifo_delay = 20;
     faa:	84 e1       	ldi	r24, 0x14	; 20
     fac:	f8 2e       	mov	r15, r24
		TCNT0 = 0x00;
		TIMSK0 |= (1<<OCIE0A);
		while (fifo_delay_flag){TIMSK0 |= (1<<OCIE0A);}
		TIMSK0 &= ~(1<<OCIE0A);		//stop the  timer
		TIFR0 |= (1<<OCF0A);
		OCR0A = 185;
     fae:	99 eb       	ldi	r25, 0xB9	; 185
     fb0:	e9 2e       	mov	r14, r25

void ssp_reset(){
	volatile uint8_t check = 0;
	volatile uint8_t ssp_check = 0;
	UCSRC = (1<<UMSEL1)|(1<<UMSEL0)|(1<<UCSZ0)|(1<<UCPOL);
	while (!(check & 0x80)){
     fb2:	8a 81       	ldd	r24, Y+2	; 0x02
     fb4:	87 fd       	sbrc	r24, 7
     fb6:	2f c0       	rjmp	.+94     	; 0x1016 <ssp_reset+0x8c>
		
		//ssp_read_byte();
		//setup directions for ssp pins
		ssp_setup();
     fb8:	5c db       	rcall	.-2376   	; 0x672 <ssp_setup>
		//cycle the TAMP_CLR to reset the relays and turn of LEDS
		//to save power. Keep WDOG signal in high state
		ssp_write(ssp_out|0x80);
     fba:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <ssp_out>
     fbe:	80 68       	ori	r24, 0x80	; 128
     fc0:	df db       	rcall	.-2114   	; 0x780 <ssp_write>
		//ssp_write(ssp_out);
		//setup the tamper monitoring input
		ssp_int_config();
     fc2:	71 db       	rcall	.-2334   	; 0x6a6 <ssp_int_config>
		check =  ssp_read_byte();
     fc4:	cb db       	rcall	.-2154   	; 0x75c <ssp_read_byte>
     fc6:	8a 83       	std	Y+2, r24	; 0x02
		ssp_check++;
     fc8:	89 81       	ldd	r24, Y+1	; 0x01
     fca:	8f 5f       	subi	r24, 0xFF	; 255
     fcc:	89 83       	std	Y+1, r24	; 0x01
		if(ssp_check > 21) {
     fce:	89 81       	ldd	r24, Y+1	; 0x01
     fd0:	86 31       	cpi	r24, 0x16	; 22
     fd2:	50 f0       	brcs	.+20     	; 0xfe8 <ssp_reset+0x5e>
			//ssp_fault++;
			ssp_fault_max++;
     fd4:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <ssp_fault_max>
     fd8:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <ssp_fault_max+0x1>
     fdc:	01 96       	adiw	r24, 0x01	; 1
     fde:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <ssp_fault_max+0x1>
     fe2:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <ssp_fault_max>
			break;
     fe6:	17 c0       	rjmp	.+46     	; 0x1016 <ssp_reset+0x8c>
		}
		fifo_delay_flag = 1;
     fe8:	10 93 71 01 	sts	0x0171, r17	; 0x800171 <fifo_delay_flag>
		OCR0A = 200;
     fec:	07 bd       	out	0x27, r16	; 39
		fifo_delay = 20;
     fee:	f0 92 84 01 	sts	0x0184, r15	; 0x800184 <fifo_delay>
		TCNT0 = 0x00;
     ff2:	16 bc       	out	0x26, r1	; 38
		TIMSK0 |= (1<<OCIE0A);
		while (fifo_delay_flag){TIMSK0 |= (1<<OCIE0A);}
     ff4:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     ff8:	82 60       	ori	r24, 0x02	; 2
     ffa:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     ffe:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <fifo_delay_flag>
    1002:	81 11       	cpse	r24, r1
    1004:	f7 cf       	rjmp	.-18     	; 0xff4 <ssp_reset+0x6a>
		TIMSK0 &= ~(1<<OCIE0A);		//stop the  timer
    1006:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
    100a:	8d 7f       	andi	r24, 0xFD	; 253
    100c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
		TIFR0 |= (1<<OCF0A);
    1010:	a9 9a       	sbi	0x15, 1	; 21
		OCR0A = 185;
    1012:	e7 bc       	out	0x27, r14	; 39
    1014:	ce cf       	rjmp	.-100    	; 0xfb2 <ssp_reset+0x28>
	/*if (check & 0x80){
		if (ssp_fault>0){
			ssp_fault--;
		}
	}*/
    1016:	0f 90       	pop	r0
    1018:	0f 90       	pop	r0
    101a:	df 91       	pop	r29
    101c:	cf 91       	pop	r28
    101e:	1f 91       	pop	r17
    1020:	0f 91       	pop	r16
    1022:	ff 90       	pop	r15
    1024:	ef 90       	pop	r14
    1026:	08 95       	ret

00001028 <main>:
  ////sleep_cpu();			  /*MAD also redundant? ok, enough redundnacy already*/
// //SMCR &= ~0x1;               /* Disable sleep. Nah, let's not and say we did. */
//}
int
main()
{
    1028:	cf 93       	push	r28
    102a:	df 93       	push	r29
    102c:	1f 92       	push	r1
    102e:	cd b7       	in	r28, 0x3d	; 61
    1030:	de b7       	in	r29, 0x3e	; 62
  mkm_grab();
    1032:	c3 db       	rcall	.-2170   	; 0x7ba <mkm_grab>
static inline void
init_ports()
{
  /* Configure all PORTA pins except the tamper detection pin as
     outputs. */
  DDRA = 0xff & ~_BV(AVR_PANIC_BIT);
    1034:	8f ee       	ldi	r24, 0xEF	; 239
    1036:	81 b9       	out	0x01, r24	; 1
  DDRB = 0xf7; //was fb
    1038:	87 ef       	ldi	r24, 0xF7	; 247
    103a:	85 b9       	out	0x05, r24	; 5

static void
init_interrupts()
{
  //PCICR |= _BV(PCIE0|PCIE2);    /* Enable pin change interrupt on PCMSK0 & PCMSK2*/
  PCICR = (1<<PCIE0)|(1<<PCIE1)|(1<<PCIE2);
    103c:	87 e0       	ldi	r24, 0x07	; 7
    103e:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__EEPROM_REGION_LENGTH__+0x7f0068>
  PCMSK0 |= _BV(PCINT4);        /* Set mask bit for PCINT4 (panic) */
    1042:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__EEPROM_REGION_LENGTH__+0x7f006b>
    1046:	80 61       	ori	r24, 0x10	; 16
    1048:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__EEPROM_REGION_LENGTH__+0x7f006b>
  /*setup PC6 as tamper disable */
  //PUEC = (1<<PUEC6);			/*enable internal pull-up to avoid false triggers */ 
  //PORTC |= (1<<PORTC6);
  //PCMSK2 |= _BV(PCINT22);
  /*setup PB2 as soft-UART RX*/
  PUEB = (1<<PUEB3);						/*enable internal pull-up to detect start bit */
    104c:	88 e0       	ldi	r24, 0x08	; 8
    104e:	87 b9       	out	0x07, r24	; 7
  //PUEB |= (1<<PUEB2);
  PCMSK1 |= _BV(PCINT11);
    1050:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__EEPROM_REGION_LENGTH__+0x7f006c>
    1054:	88 60       	ori	r24, 0x08	; 8
    1056:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__EEPROM_REGION_LENGTH__+0x7f006c>
 // PCMSK1 |= _BV(PCINT10);
  sei();
    105a:	78 94       	sei
  mkm_grab();
  init_ports();

  init_interrupts();
  	
  flags = 0x00;
    105c:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <flags>
  configured = 0;
    1060:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <configured>
  tamper_detected = 0;
    1064:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <tamper_detected>
  volatile uint8_t ssp_status = 0;
    1068:	19 82       	std	Y+1, r1	; 0x01
  sending = 0;
    106a:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <sending>
  receiving = 0;
    106e:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <receiving>
  tx_char = 0;
    1072:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <tx_char>
  tx_bit_count = 0;
    1076:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <tx_bit_count>
  light_fault = 0;
    107a:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <light_fault>
  vibe_fault = 0;
    107e:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <vibe_fault>
  ssp_fault = 0;
    1082:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <ssp_fault+0x1>
    1086:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <ssp_fault>
  ssp_fault_max = 0;
    108a:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <ssp_fault_max+0x1>
    108e:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <ssp_fault_max>
  n25_fault = 0;
    1092:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <n25_fault>
  unk_fault = 0;
    1096:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <unk_fault>
  spi_disable = 0;
    109a:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <spi_disable>
  spi_disabled = 0;
    109e:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <spi_disabled>
  light_retrieve = 0;
    10a2:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <light_retrieve>
  batt_on = 0;
    10a6:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <batt_on>
  batt_on_cnt = 0;
    10aa:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <batt_on_cnt>
  temp_flt_cnt = 0;
    10ae:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <temp_flt_cnt>
  light_flt_cnt = 0;
    10b2:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <light_flt_cnt>
  vibe_flt_cnt = 0;
    10b6:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <vibe_flt_cnt>
  ll_flt_cnt = 0;
    10ba:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <ll_flt_cnt>
  case_flt_cnt = 0;
    10be:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <case_flt_cnt>
  case_flt_set = 0;
    10c2:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <case_flt_set>
  vibe_flt_set = 0;
    10c6:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <vibe_flt_set>
  temp_flt_set = 0;
    10ca:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <temp_flt_set>
  light_flt_set = 0;
    10ce:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <light_flt_set>
  ssp_fault_set = 0;
    10d2:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <ssp_fault_set>
  ll_fault_set = 0;
    10d6:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <ll_fault_set>
  fault_index = 1;
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <fault_index>
  light_get = 0;
    10e0:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <light_get>
  PORTB |= _BV(PORTB3);   //set RX idle high
    10e4:	33 9a       	sbi	0x06, 3	; 6
  PORTB |= _BV(PORTB2);   //set TX idle high
    10e6:	32 9a       	sbi	0x06, 2	; 6
  wd_init = 0x01;
    10e8:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <wd_init>
  //ssp_out = WDOG_RS;
  
  TCNT0 = 0x00;
    10ec:	16 bc       	out	0x26, r1	; 38
  TCCR0A = (1<<COM0A1) | (1 << WGM01);             //CTC mode
    10ee:	92 e8       	ldi	r25, 0x82	; 130
    10f0:	94 bd       	out	0x24, r25	; 36
  TCCR0B = (1 << CS00);              //div1
    10f2:	85 bd       	out	0x25, r24	; 37
  OCR0A = 185;                       //spi timeout
    10f4:	29 eb       	ldi	r18, 0xB9	; 185
    10f6:	27 bd       	out	0x27, r18	; 39
 
    
   TCNT1 = 0x00;
    10f8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
    10fc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
   TCCR1A = (1<<COM1A1) | (1 << WGM01);             //CTC mode
    1100:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__EEPROM_REGION_LENGTH__+0x7f0080>
   TCCR1B = (1 << CS00);              //div1
    1104:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__EEPROM_REGION_LENGTH__+0x7f0081>
   //OCR1A = 180;
   OCR1A = 171;						// 208us compare value for release 4800 baud was 180
    1108:	8b ea       	ldi	r24, 0xAB	; 171
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__EEPROM_REGION_LENGTH__+0x7f0089>
    1110:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__EEPROM_REGION_LENGTH__+0x7f0088>
   spi_usart_setup(1);
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	ec d9       	rcall	.-3112   	; 0x4f2 <spi_usart_setup>
  mlx_nop 
  //ensure that adx is also at low power mode

  adx_wr_reg(ADX_POWER_CTL, 0x00);
  adx_rd_reg(ADX_STATUS);*/
  AVR_LED_PORT |= _BV(AVR_LED_BLUE_BIT);
    111a:	10 9a       	sbi	0x02, 0	; 2
  ssp_boot();
    111c:	0b da       	rcall	.-3050   	; 0x534 <ssp_boot>
  ssp_reset();
    111e:	35 df       	rcall	.-406    	; 0xf8a <ssp_reset>
  //init_int0();
 
  mlx_reset();
    1120:	d7 d9       	rcall	.-3154   	; 0x4d0 <mlx_reset>
  mlx_write_reg(13, 0x84); //enable temperature and Channel C
    1122:	64 e8       	ldi	r22, 0x84	; 132
    1124:	70 e0       	ldi	r23, 0x00	; 0
    1126:	8d e0       	ldi	r24, 0x0D	; 13
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	78 d9       	rcall	.-3344   	; 0x41c <mlx_write_reg>
  mlx_get_calib();
    112c:	b3 d9       	rcall	.-3226   	; 0x494 <mlx_get_calib>
  mlx_start_meas();
  mlx_get_meas();
  mlx_start_meas();
  mlx_get_meas(); */
  // do not need to configure these for tamper switch  
  UCSRC = (1<<UMSEL1)|(1<<UMSEL0);  //change polarity first! 
    112e:	80 ec       	ldi	r24, 0xC0	; 192
    1130:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__EEPROM_REGION_LENGTH__+0x7f00c2>
  UCSRC &= ~(1<<UCSZ0);				//before chip selects!!!!
    1134:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__EEPROM_REGION_LENGTH__+0x7f00c2>
    1138:	8d 7f       	andi	r24, 0xFD	; 253
    113a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__EEPROM_REGION_LENGTH__+0x7f00c2>
   
 // adx_read_id();  
  adx_soft_r();
    113e:	92 d7       	rcall	.+3876   	; 0x2064 <__TEXT_REGION_LENGTH__+0x64>
  adx_setup();
    1140:	9e d7       	rcall	.+3900   	; 0x207e <__TEXT_REGION_LENGTH__+0x7e>
 
 			
  
  mkm_release();
    1142:	3e db       	rcall	.-2436   	; 0x7c0 <mkm_release>
  //sleep();
  //temperature = 80;
  //light = 0x2000;
  //light_thresh = 0x4000;
  //init_int0();
  rcv_valid = 0;
    1144:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <rcv_valid>
  sei();
    1148:	78 94       	sei
		//send(0x15);
		if (configured == 0x55 && !spi_disable) {
			AVR_LED_PORT &= ~_BV(AVR_LED_BLUE_BIT);
			check_usart_faults();
			/*read the ssp lines for events */
			UCSRC = (1<<UMSEL1)|(1<<UMSEL0)|(1<<UCSZ0)|(1<<UCPOL);
    114a:	03 ec       	ldi	r16, 0xC3	; 195
					light_retrieve = 0;
				}
				else {
				    light_retrieve = 1;
				}*/
				light_retrieve ^= 1UL << 0;
    114c:	11 e0       	ldi	r17, 0x01	; 1
					spi_disabled = 0;
					vibe_flt_cnt = 0;
				}
			}
			if (temp_enable && !spi_disable){
				UCSRC = (1<<UMSEL1)|(1<<UMSEL0); //!!!change SPI polarity here first before chip selects
    114e:	80 ec       	ldi	r24, 0xC0	; 192
    1150:	f8 2e       	mov	r15, r24
				UCSRC &= ~(1<<UCSZ0);			//!!!
				adx_temp();
				if ((((temperature > temp_hi_thresh) | (temperature < temp_lo_thresh)))  && !spi_disabled){
					temp_flt_cnt++;
					if (temp_flt_cnt>25 && !temp_flt_set){
						fault_code[fault_index] = TEMP;
    1152:	92 e0       	ldi	r25, 0x02	; 2
    1154:	e9 2e       	mov	r14, r25
				UCSRC &= ~(1<<UCSZ0);			//!!!
				uint8_t adx = adx_read_status();
				if ((adx & ADX_ACT || adx & ADX_ERR ) && !spi_disabled){
					vibe_flt_cnt++;
					if (vibe_flt_cnt>6&& !vibe_flt_set){
						fault_code [fault_index]= VIBE;
    1156:	24 e0       	ldi	r18, 0x04	; 4
    1158:	d2 2e       	mov	r13, r18
					//detect when low line (VBat <= 2.6VDC)
					if (!(ssp_status & 0x01)) {
						ll_flt_cnt++;
						if(ll_flt_cnt >100 && !ll_fault_set && ll_enable){
							tamper_detected = 1;
							fault_code[fault_index++] = LL;
    115a:	30 e2       	ldi	r19, 0x20	; 32
    115c:	c3 2e       	mov	r12, r19
  rcv_valid = 0;
  sei();
 // send(0x15);
  while (1)
    {
		if (rcv_valid == 1){
    115e:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <rcv_valid>
    1162:	81 30       	cpi	r24, 0x01	; 1
    1164:	29 f4       	brne	.+10     	; 0x1170 <main+0x148>
			rcv_valid = 0;
    1166:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <rcv_valid>
			start_bit = 1;
    116a:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <start_bit>
			process_message();
    116e:	63 dc       	rcall	.-1850   	; 0xa36 <process_message>
		else {
			//rcv_valid = 0;
			//spi_disable = 0;
		}
		//send(0x15);
		if (configured == 0x55 && !spi_disable) {
    1170:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <configured>
    1174:	85 35       	cpi	r24, 0x55	; 85
    1176:	99 f7       	brne	.-26     	; 0x115e <main+0x136>
    1178:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <spi_disable>
    117c:	81 11       	cpse	r24, r1
    117e:	ef cf       	rjmp	.-34     	; 0x115e <main+0x136>
			AVR_LED_PORT &= ~_BV(AVR_LED_BLUE_BIT);
    1180:	10 98       	cbi	0x02, 0	; 2
			check_usart_faults();
    1182:	c8 de       	rcall	.-624    	; 0xf14 <check_usart_faults>
			/*read the ssp lines for events */
			UCSRC = (1<<UMSEL1)|(1<<UMSEL0)|(1<<UCSZ0)|(1<<UCPOL);
    1184:	00 93 c2 00 	sts	0x00C2, r16	; 0x8000c2 <__EEPROM_REGION_LENGTH__+0x7f00c2>
			//if (ssp)
			ssp_status = ssp_read_byte();
    1188:	e9 da       	rcall	.-2606   	; 0x75c <ssp_read_byte>
    118a:	89 83       	std	Y+1, r24	; 0x01
			if(!(ssp_status & 0x80)){
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	87 fd       	sbrc	r24, 7
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <main+0x16e>
				ssp_reset();
    1192:	fb de       	rcall	.-522    	; 0xf8a <ssp_reset>
    1194:	5b c0       	rjmp	.+182    	; 0x124c <main+0x224>
			}
			else{
				if (ssp_fault > 0){
    1196:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <ssp_fault>
    119a:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <ssp_fault+0x1>
    119e:	89 2b       	or	r24, r25
    11a0:	49 f0       	breq	.+18     	; 0x11b4 <main+0x18c>
					ssp_fault--;
    11a2:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <ssp_fault>
    11a6:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <ssp_fault+0x1>
    11aa:	01 97       	sbiw	r24, 0x01	; 1
    11ac:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <ssp_fault+0x1>
    11b0:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <ssp_fault>
				}
				//detect when BATT_ON signal goes low
				if (!spi_disabled){
    11b4:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <spi_disabled>
    11b8:	81 11       	cpse	r24, r1
    11ba:	3f c0       	rjmp	.+126    	; 0x123a <main+0x212>
					if (!(ssp_status & 0x20)) {
    11bc:	89 81       	ldd	r24, Y+1	; 0x01
    11be:	85 fd       	sbrc	r24, 5
    11c0:	0f c0       	rjmp	.+30     	; 0x11e0 <main+0x1b8>
						//mkm_wipe();
						batt_on_cnt++;
    11c2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <batt_on_cnt>
    11c6:	8f 5f       	subi	r24, 0xFF	; 255
    11c8:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <batt_on_cnt>
						if (batt_on_cnt>100){
    11cc:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <batt_on_cnt>
    11d0:	85 36       	cpi	r24, 0x65	; 101
    11d2:	58 f0       	brcs	.+22     	; 0x11ea <main+0x1c2>
							batt_on = 1;
    11d4:	10 93 0d 01 	sts	0x010D, r17	; 0x80010d <batt_on>
							batt_on_cnt = 0;
    11d8:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <batt_on_cnt>
							AVR_LED_PORT |= _BV(AVR_LED_YELLOW_BIT);
    11dc:	12 9a       	sbi	0x02, 2	; 2
    11de:	05 c0       	rjmp	.+10     	; 0x11ea <main+0x1c2>
						}
				
					}
					else {
						batt_on_cnt = 0;
    11e0:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <batt_on_cnt>
						batt_on = 0;
    11e4:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <batt_on>
						AVR_LED_PORT &= ~_BV(AVR_LED_YELLOW_BIT);
    11e8:	12 98       	cbi	0x02, 2	; 2
					}
					//detect when low line (VBat <= 2.6VDC)
					if (!(ssp_status & 0x01)) {
    11ea:	89 81       	ldd	r24, Y+1	; 0x01
    11ec:	80 fd       	sbrc	r24, 0
    11ee:	22 c0       	rjmp	.+68     	; 0x1234 <main+0x20c>
						ll_flt_cnt++;
    11f0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ll_flt_cnt>
    11f4:	8f 5f       	subi	r24, 0xFF	; 255
    11f6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <ll_flt_cnt>
						if(ll_flt_cnt >100 && !ll_fault_set && ll_enable){
    11fa:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ll_flt_cnt>
    11fe:	85 36       	cpi	r24, 0x65	; 101
    1200:	f0 f0       	brcs	.+60     	; 0x123e <main+0x216>
    1202:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <ll_fault_set>
    1206:	81 11       	cpse	r24, r1
    1208:	1a c0       	rjmp	.+52     	; 0x123e <main+0x216>
    120a:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <ll_enable>
    120e:	88 23       	and	r24, r24
    1210:	b1 f0       	breq	.+44     	; 0x123e <main+0x216>
							tamper_detected = 1;
    1212:	10 93 6c 01 	sts	0x016C, r17	; 0x80016c <tamper_detected>
							fault_code[fault_index++] = LL;
    1216:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <fault_index>
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	8e 0f       	add	r24, r30
    121e:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <fault_index>
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	e6 5c       	subi	r30, 0xC6	; 198
    1226:	fe 4f       	sbci	r31, 0xFE	; 254
    1228:	c0 82       	st	Z, r12
							ll_fault_set = 1;
    122a:	10 93 10 01 	sts	0x0110, r17	; 0x800110 <ll_fault_set>
							ll_enable = 0;
    122e:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <ll_enable>
    1232:	05 c0       	rjmp	.+10     	; 0x123e <main+0x216>
							//fault_index++;
						}
					}
					else {
						ll_flt_cnt = 0;
    1234:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <ll_flt_cnt>
    1238:	02 c0       	rjmp	.+4      	; 0x123e <main+0x216>
					}
				
				}
				else {
					spi_disabled = 0;
    123a:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <spi_disabled>
				}
				if (batt_on){
    123e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <batt_on>
    1242:	88 23       	and	r24, r24
    1244:	11 f0       	breq	.+4      	; 0x124a <main+0x222>
					while (fifo_delay_flag){TIMSK0 |= (1<<OCIE0A);}
					TIMSK0 &= ~(1<<OCIE0A);		//stop the  timer
					TIFR0 |= (1<<OCF0A);
					OCR0A = 185;*/
					//AVR_LED_PORT &= ~_BV(AVR_LED_YELLOW_BIT);
					mkm_grab();
    1246:	b9 da       	rcall	.-2702   	; 0x7ba <mkm_grab>
    1248:	01 c0       	rjmp	.+2      	; 0x124c <main+0x224>
				}
				else {
					mkm_release();
    124a:	ba da       	rcall	.-2700   	; 0x7c0 <mkm_release>
				}
			}
			//read accelerometer 
			if (vibe_enable && !spi_disable){
    124c:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <vibe_enable>
    1250:	88 23       	and	r24, r24
    1252:	09 f4       	brne	.+2      	; 0x1256 <main+0x22e>
    1254:	66 c0       	rjmp	.+204    	; 0x1322 <main+0x2fa>
    1256:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <spi_disable>
    125a:	81 11       	cpse	r24, r1
    125c:	62 c0       	rjmp	.+196    	; 0x1322 <main+0x2fa>
				UCSRC = (1<<UMSEL1)|(1<<UMSEL0); //!!!change SPI polarity here first before chip selects
    125e:	f0 92 c2 00 	sts	0x00C2, r15	; 0x8000c2 <__EEPROM_REGION_LENGTH__+0x7f00c2>
				UCSRC &= ~(1<<UCSZ0);			//!!!
    1262:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__EEPROM_REGION_LENGTH__+0x7f00c2>
    1266:	8d 7f       	andi	r24, 0xFD	; 253
    1268:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__EEPROM_REGION_LENGTH__+0x7f00c2>
				uint8_t adx = adx_read_status();
    126c:	c6 d7       	rcall	.+3980   	; 0x21fa <__TEXT_REGION_LENGTH__+0x1fa>
				if ((adx & ADX_ACT || adx & ADX_ERR ) && !spi_disabled){
    126e:	84 fd       	sbrc	r24, 4
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <main+0x24e>
    1272:	87 ff       	sbrs	r24, 7
    1274:	52 c0       	rjmp	.+164    	; 0x131a <main+0x2f2>
    1276:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <spi_disabled>
    127a:	81 11       	cpse	r24, r1
    127c:	4e c0       	rjmp	.+156    	; 0x131a <main+0x2f2>
					vibe_flt_cnt++;
    127e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <vibe_flt_cnt>
    1282:	8f 5f       	subi	r24, 0xFF	; 255
    1284:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <vibe_flt_cnt>
					if (vibe_flt_cnt>6&& !vibe_flt_set){
    1288:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <vibe_flt_cnt>
    128c:	87 30       	cpi	r24, 0x07	; 7
    128e:	08 f4       	brcc	.+2      	; 0x1292 <main+0x26a>
    1290:	48 c0       	rjmp	.+144    	; 0x1322 <main+0x2fa>
    1292:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <vibe_flt_set>
    1296:	81 11       	cpse	r24, r1
    1298:	44 c0       	rjmp	.+136    	; 0x1322 <main+0x2fa>
						fault_code [fault_index]= VIBE;
    129a:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <fault_index>
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	e6 5c       	subi	r30, 0xC6	; 198
    12a2:	fe 4f       	sbci	r31, 0xFE	; 254
    12a4:	d0 82       	st	Z, r13
						fault_value1 [fault_index] = xlo;
    12a6:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <fault_index>
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <xlo>
    12b0:	ec 5c       	subi	r30, 0xCC	; 204
    12b2:	fe 4f       	sbci	r31, 0xFE	; 254
    12b4:	80 83       	st	Z, r24
						fault_value2 [fault_index] = xhi;
    12b6:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <fault_index>
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <xhi>
    12c0:	e2 5d       	subi	r30, 0xD2	; 210
    12c2:	fe 4f       	sbci	r31, 0xFE	; 254
    12c4:	80 83       	st	Z, r24
						fault_value3 [fault_index] = ylo;
    12c6:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <fault_index>
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <ylo>
    12d0:	e8 5d       	subi	r30, 0xD8	; 216
    12d2:	fe 4f       	sbci	r31, 0xFE	; 254
    12d4:	80 83       	st	Z, r24
						fault_value4 [fault_index] = yhi;
    12d6:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <fault_index>
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <yhi>
    12e0:	ee 5d       	subi	r30, 0xDE	; 222
    12e2:	fe 4f       	sbci	r31, 0xFE	; 254
    12e4:	80 83       	st	Z, r24
						fault_value5 [fault_index] = zlo;
    12e6:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <fault_index>
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <zlo>
    12f0:	e4 5e       	subi	r30, 0xE4	; 228
    12f2:	fe 4f       	sbci	r31, 0xFE	; 254
    12f4:	80 83       	st	Z, r24
						fault_value6 [fault_index++] = zhi;
    12f6:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <fault_index>
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	8e 0f       	add	r24, r30
    12fe:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <fault_index>
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <zhi>
    1308:	ea 5e       	subi	r30, 0xEA	; 234
    130a:	fe 4f       	sbci	r31, 0xFE	; 254
    130c:	80 83       	st	Z, r24
						//fault_index++;
						mkm_wipe();
    130e:	f7 da       	rcall	.-2578   	; 0x8fe <mkm_wipe>
						vibe_enable = 0;
    1310:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <vibe_enable>
						vibe_flt_set = 1;
    1314:	10 93 14 01 	sts	0x0114, r17	; 0x800114 <vibe_flt_set>
    1318:	04 c0       	rjmp	.+8      	; 0x1322 <main+0x2fa>
					}
				}
				else {
					spi_disabled = 0;
    131a:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <spi_disabled>
					vibe_flt_cnt = 0;
    131e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <vibe_flt_cnt>
				}
			}
			if (temp_enable && !spi_disable){
    1322:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <temp_enable>
    1326:	88 23       	and	r24, r24
    1328:	09 f4       	brne	.+2      	; 0x132c <main+0x304>
    132a:	77 c0       	rjmp	.+238    	; 0x141a <main+0x3f2>
    132c:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <spi_disable>
    1330:	81 11       	cpse	r24, r1
    1332:	73 c0       	rjmp	.+230    	; 0x141a <main+0x3f2>
				UCSRC = (1<<UMSEL1)|(1<<UMSEL0); //!!!change SPI polarity here first before chip selects
    1334:	f0 92 c2 00 	sts	0x00C2, r15	; 0x8000c2 <__EEPROM_REGION_LENGTH__+0x7f00c2>
				UCSRC &= ~(1<<UCSZ0);			//!!!
    1338:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__EEPROM_REGION_LENGTH__+0x7f00c2>
    133c:	8d 7f       	andi	r24, 0xFD	; 253
    133e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__EEPROM_REGION_LENGTH__+0x7f00c2>
				adx_temp();
    1342:	2e d7       	rcall	.+3676   	; 0x21a0 <__TEXT_REGION_LENGTH__+0x1a0>
				if ((((temperature > temp_hi_thresh) | (temperature < temp_lo_thresh)))  && !spi_disabled){
    1344:	40 91 87 01 	lds	r20, 0x0187	; 0x800187 <temp_hi_thresh>
    1348:	50 91 88 01 	lds	r21, 0x0188	; 0x800188 <temp_hi_thresh+0x1>
    134c:	40 90 5c 01 	lds	r4, 0x015C	; 0x80015c <temperature>
    1350:	50 90 5d 01 	lds	r5, 0x015D	; 0x80015d <temperature+0x1>
    1354:	60 90 5e 01 	lds	r6, 0x015E	; 0x80015e <temperature+0x2>
    1358:	70 90 5f 01 	lds	r7, 0x015F	; 0x80015f <temperature+0x3>
    135c:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <temp_lo_thresh>
    1360:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <temp_lo_thresh+0x1>
    1364:	80 90 5c 01 	lds	r8, 0x015C	; 0x80015c <temperature>
    1368:	90 90 5d 01 	lds	r9, 0x015D	; 0x80015d <temperature+0x1>
    136c:	a0 90 5e 01 	lds	r10, 0x015E	; 0x80015e <temperature+0x2>
    1370:	b0 90 5f 01 	lds	r11, 0x015F	; 0x80015f <temperature+0x3>
    1374:	05 2e       	mov	r0, r21
    1376:	00 0c       	add	r0, r0
    1378:	66 0b       	sbc	r22, r22
    137a:	77 0b       	sbc	r23, r23
    137c:	44 15       	cp	r20, r4
    137e:	55 05       	cpc	r21, r5
    1380:	66 05       	cpc	r22, r6
    1382:	77 05       	cpc	r23, r7
    1384:	4c f0       	brlt	.+18     	; 0x1398 <main+0x370>
    1386:	09 2e       	mov	r0, r25
    1388:	00 0c       	add	r0, r0
    138a:	aa 0b       	sbc	r26, r26
    138c:	bb 0b       	sbc	r27, r27
    138e:	88 16       	cp	r8, r24
    1390:	99 06       	cpc	r9, r25
    1392:	aa 06       	cpc	r10, r26
    1394:	bb 06       	cpc	r11, r27
    1396:	ec f5       	brge	.+122    	; 0x1412 <main+0x3ea>
    1398:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <spi_disabled>
    139c:	81 11       	cpse	r24, r1
    139e:	39 c0       	rjmp	.+114    	; 0x1412 <main+0x3ea>
					temp_flt_cnt++;
    13a0:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <temp_flt_cnt>
    13a4:	8f 5f       	subi	r24, 0xFF	; 255
    13a6:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <temp_flt_cnt>
					if (temp_flt_cnt>25 && !temp_flt_set){
    13aa:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <temp_flt_cnt>
    13ae:	8a 31       	cpi	r24, 0x1A	; 26
    13b0:	a0 f1       	brcs	.+104    	; 0x141a <main+0x3f2>
    13b2:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <temp_flt_set>
    13b6:	81 11       	cpse	r24, r1
    13b8:	30 c0       	rjmp	.+96     	; 0x141a <main+0x3f2>
						fault_code[fault_index] = TEMP;
    13ba:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <fault_index>
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	e6 5c       	subi	r30, 0xC6	; 198
    13c2:	fe 4f       	sbci	r31, 0xFE	; 254
    13c4:	e0 82       	st	Z, r14
						fault_value1[fault_index] = ((uint8_t) temperature>>8);
    13c6:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <fault_index>
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <temperature>
    13d0:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <temperature+0x1>
    13d4:	a0 91 5e 01 	lds	r26, 0x015E	; 0x80015e <temperature+0x2>
    13d8:	b0 91 5f 01 	lds	r27, 0x015F	; 0x80015f <temperature+0x3>
    13dc:	ec 5c       	subi	r30, 0xCC	; 204
    13de:	fe 4f       	sbci	r31, 0xFE	; 254
    13e0:	10 82       	st	Z, r1
						fault_value2[fault_index++] = ((uint8_t) temperature&0xFF);
    13e2:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <fault_index>
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	8e 0f       	add	r24, r30
    13ea:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <fault_index>
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <temperature>
    13f4:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <temperature+0x1>
    13f8:	a0 91 5e 01 	lds	r26, 0x015E	; 0x80015e <temperature+0x2>
    13fc:	b0 91 5f 01 	lds	r27, 0x015F	; 0x80015f <temperature+0x3>
    1400:	e2 5d       	subi	r30, 0xD2	; 210
    1402:	fe 4f       	sbci	r31, 0xFE	; 254
    1404:	80 83       	st	Z, r24
						//fault_index++;
						temp_flt_set = 1;
    1406:	10 93 13 01 	sts	0x0113, r17	; 0x800113 <temp_flt_set>
						mkm_wipe();
    140a:	79 da       	rcall	.-2830   	; 0x8fe <mkm_wipe>
						temp_enable = 0;
    140c:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <temp_enable>
    1410:	04 c0       	rjmp	.+8      	; 0x141a <main+0x3f2>
					}
				}
				else{
					temp_flt_cnt = 0;
    1412:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <temp_flt_cnt>
					spi_disabled = 0;
    1416:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <spi_disabled>
				}
			}
			//read light
			if (light_enable && !spi_disable){
    141a:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <light_enable>
    141e:	88 23       	and	r24, r24
    1420:	09 f4       	brne	.+2      	; 0x1424 <main+0x3fc>
    1422:	61 c0       	rjmp	.+194    	; 0x14e6 <main+0x4be>
    1424:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <spi_disable>
    1428:	81 11       	cpse	r24, r1
    142a:	5d c0       	rjmp	.+186    	; 0x14e6 <main+0x4be>
				UCSRC = (1<<UMSEL1)|(1<<UMSEL0)|(1<<UCSZ0)|(1<<UCPOL);
    142c:	00 93 c2 00 	sts	0x00C2, r16	; 0x8000c2 <__EEPROM_REGION_LENGTH__+0x7f00c2>
				//need a delay between start meas and get meas
				if(!light_retrieve) {
    1430:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <light_retrieve>
    1434:	81 11       	cpse	r24, r1
    1436:	01 c0       	rjmp	.+2      	; 0x143a <main+0x412>
					mlx_start_meas();
    1438:	b3 d7       	rcall	.+3942   	; 0x23a0 <__TEXT_REGION_LENGTH__+0x3a0>
				}
				if (light_retrieve){
    143a:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <light_retrieve>
    143e:	88 23       	and	r24, r24
    1440:	19 f0       	breq	.+6      	; 0x1448 <main+0x420>
					mlx_get_meas();
    1442:	b8 d7       	rcall	.+3952   	; 0x23b4 <__TEXT_REGION_LENGTH__+0x3b4>
					light_get = 1;
    1444:	10 93 8e 01 	sts	0x018E, r17	; 0x80018e <light_get>
					light_retrieve = 0;
				}
				else {
				    light_retrieve = 1;
				}*/
				light_retrieve ^= 1UL << 0;
    1448:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <light_retrieve>
    144c:	81 27       	eor	r24, r17
    144e:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <light_retrieve>
				//if temp is out side normal storage or sensor is exposed to bright light
				//actual values TBD 
				if((light > light_thresh) && !spi_disabled && light_get) {
    1452:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <light>
    1456:	30 91 63 01 	lds	r19, 0x0163	; 0x800163 <light+0x1>
    145a:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <light_thresh>
    145e:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <light_thresh+0x1>
    1462:	82 17       	cp	r24, r18
    1464:	93 07       	cpc	r25, r19
    1466:	d8 f5       	brcc	.+118    	; 0x14de <main+0x4b6>
    1468:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <spi_disabled>
    146c:	81 11       	cpse	r24, r1
    146e:	37 c0       	rjmp	.+110    	; 0x14de <main+0x4b6>
    1470:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <light_get>
    1474:	88 23       	and	r24, r24
    1476:	99 f1       	breq	.+102    	; 0x14de <main+0x4b6>
					light_flt_cnt++;
    1478:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <light_flt_cnt>
    147c:	8f 5f       	subi	r24, 0xFF	; 255
    147e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <light_flt_cnt>
						if (light_flt_cnt>6 && !light_flt_set){
    1482:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <light_flt_cnt>
    1486:	87 30       	cpi	r24, 0x07	; 7
    1488:	38 f1       	brcs	.+78     	; 0x14d8 <main+0x4b0>
    148a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <light_flt_set>
    148e:	81 11       	cpse	r24, r1
    1490:	23 c0       	rjmp	.+70     	; 0x14d8 <main+0x4b0>
							fault_code[fault_index] = LIGHT;
    1492:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <fault_index>
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	e6 5c       	subi	r30, 0xC6	; 198
    149a:	fe 4f       	sbci	r31, 0xFE	; 254
    149c:	10 83       	st	Z, r17
							fault_value1[fault_index] = ((uint8_t) light>>8);
    149e:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <light>
    14a2:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <light+0x1>
    14a6:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <fault_index>
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	ec 5c       	subi	r30, 0xCC	; 204
    14ae:	fe 4f       	sbci	r31, 0xFE	; 254
    14b0:	10 82       	st	Z, r1
							fault_value2[fault_index++] = ((uint8_t) light&0xFF);
    14b2:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <fault_index>
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	8e 0f       	add	r24, r30
    14ba:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <fault_index>
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <light>
    14c4:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <light+0x1>
    14c8:	e2 5d       	subi	r30, 0xD2	; 210
    14ca:	fe 4f       	sbci	r31, 0xFE	; 254
    14cc:	80 83       	st	Z, r24
							mkm_wipe();
    14ce:	17 da       	rcall	.-3026   	; 0x8fe <mkm_wipe>
							//fault_index++;
							light_flt_set = 1;
    14d0:	10 93 12 01 	sts	0x0112, r17	; 0x800112 <light_flt_set>
							light_enable = 0;
    14d4:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <light_enable>
					}
					light_get = 0;
    14d8:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <light_get>
    14dc:	04 c0       	rjmp	.+8      	; 0x14e6 <main+0x4be>
				}
				else{
					light_flt_cnt = 0;
    14de:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <light_flt_cnt>
					spi_disabled = 0;
    14e2:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <spi_disabled>
				}
			}
			case_flt_cnt = 0; //clear any detection of glitches in tamper ring
    14e6:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <case_flt_cnt>
    14ea:	39 ce       	rjmp	.-910    	; 0x115e <main+0x136>

000014ec <__vector_9>:
}


//soft-uart timer
ISR (TIMER1_COMPA_vect)
{
    14ec:	1f 92       	push	r1
    14ee:	0f 92       	push	r0
    14f0:	0f b6       	in	r0, 0x3f	; 63
    14f2:	0f 92       	push	r0
    14f4:	11 24       	eor	r1, r1
    14f6:	2f 93       	push	r18
    14f8:	3f 93       	push	r19
    14fa:	4f 93       	push	r20
    14fc:	5f 93       	push	r21
    14fe:	8f 93       	push	r24
    1500:	9f 93       	push	r25
	/*disable interrupts, should we or allow NMI of tamper switch detect? */
	TCNT1 = 0x00;
    1502:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
    1506:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	
	int i;
	//PORTC ^= _BV(PORTC6);		//toggle gp6 to check on progress
	if (receiving) {
    150a:	20 91 6f 01 	lds	r18, 0x016F	; 0x80016f <receiving>
    150e:	22 23       	and	r18, r18
    1510:	09 f4       	brne	.+2      	; 0x1514 <__vector_9+0x28>
    1512:	47 c0       	rjmp	.+142    	; 0x15a2 <__vector_9+0xb6>
		if (start_bit)	{
    1514:	20 91 5b 01 	lds	r18, 0x015B	; 0x80015b <start_bit>
    1518:	22 23       	and	r18, r18
    151a:	31 f0       	breq	.+12     	; 0x1528 <__vector_9+0x3c>
			start_bit--;
    151c:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <start_bit>
    1520:	81 50       	subi	r24, 0x01	; 1
    1522:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <start_bit>
    1526:	3d c0       	rjmp	.+122    	; 0x15a2 <__vector_9+0xb6>
			//skip first bit
		}
		else {	
			if (rcv_bit_count-1 > 0) {     //looking for data) 
    1528:	20 91 77 01 	lds	r18, 0x0177	; 0x800177 <rcv_bit_count>
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	22 30       	cpi	r18, 0x02	; 2
    1530:	31 05       	cpc	r19, r1
    1532:	a4 f0       	brlt	.+40     	; 0x155c <__vector_9+0x70>
				rcv_char |= ((PINB & (1<<3))>>3)<<(9-rcv_bit_count);  //from (1<<2) to (1<<3)
    1534:	24 b1       	in	r18, 0x04	; 4
    1536:	50 91 77 01 	lds	r21, 0x0177	; 0x800177 <rcv_bit_count>
    153a:	40 91 66 01 	lds	r20, 0x0166	; 0x800166 <rcv_char>
    153e:	23 fb       	bst	r18, 3
    1540:	88 27       	eor	r24, r24
    1542:	80 f9       	bld	r24, 0
    1544:	29 e0       	ldi	r18, 0x09	; 9
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	25 1b       	sub	r18, r21
    154a:	31 09       	sbc	r19, r1
    154c:	01 c0       	rjmp	.+2      	; 0x1550 <__vector_9+0x64>
    154e:	88 0f       	add	r24, r24
    1550:	2a 95       	dec	r18
    1552:	ea f7       	brpl	.-6      	; 0x154e <__vector_9+0x62>
    1554:	84 2b       	or	r24, r20
    1556:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <rcv_char>
    155a:	1e c0       	rjmp	.+60     	; 0x1598 <__vector_9+0xac>
				//rcv[9-rcv_bit_count] = (PINB & (1<<3))>>3;
			}
			else if (rcv_bit_count == 0) {  //looking for stop bit
    155c:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <rcv_bit_count>
    1560:	81 11       	cpse	r24, r1
    1562:	1a c0       	rjmp	.+52     	; 0x1598 <__vector_9+0xac>
				if (PINB & (1<<PINB3)) {    //PINB2 to PINB3
					rcv_valid = 1;
    1564:	81 e0       	ldi	r24, 0x01	; 1
			if (rcv_bit_count-1 > 0) {     //looking for data) 
				rcv_char |= ((PINB & (1<<3))>>3)<<(9-rcv_bit_count);  //from (1<<2) to (1<<3)
				//rcv[9-rcv_bit_count] = (PINB & (1<<3))>>3;
			}
			else if (rcv_bit_count == 0) {  //looking for stop bit
				if (PINB & (1<<PINB3)) {    //PINB2 to PINB3
    1566:	23 9b       	sbis	0x04, 3	; 4
    1568:	07 c0       	rjmp	.+14     	; 0x1578 <__vector_9+0x8c>
					rcv_valid = 1;
    156a:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <rcv_valid>
					AVR_LED_PORT ^= _BV(AVR_LED_RED_BIT);
    156e:	92 b1       	in	r25, 0x02	; 2
    1570:	88 e0       	ldi	r24, 0x08	; 8
    1572:	89 27       	eor	r24, r25
    1574:	82 b9       	out	0x02, r24	; 2
    1576:	04 c0       	rjmp	.+8      	; 0x1580 <__vector_9+0x94>
				}
				else {
					rcv_error_stop = 1;
    1578:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <rcv_error_stop>
					spi_disable = 0;
    157c:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <spi_disable>
				}
				TIMSK1 &= ~(1<<OCIE1A);		//stop the bit timer
    1580:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
    1584:	8d 7f       	andi	r24, 0xFD	; 253
    1586:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
				PCMSK1 |= _BV(PCINT11);		//enable start bit detect INT10 to INT11
    158a:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__EEPROM_REGION_LENGTH__+0x7f006c>
    158e:	88 60       	ori	r24, 0x08	; 8
    1590:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__EEPROM_REGION_LENGTH__+0x7f006c>
				receiving = 0;
    1594:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <receiving>
			}
			rcv_bit_count--;
    1598:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <rcv_bit_count>
    159c:	81 50       	subi	r24, 0x01	; 1
    159e:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <rcv_bit_count>
		}
	}
	if (sending){
    15a2:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <sending>
    15a6:	88 23       	and	r24, r24
    15a8:	79 f1       	breq	.+94     	; 0x1608 <__vector_9+0x11c>
		if (start_bit == 1)	{
    15aa:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <start_bit>
    15ae:	81 30       	cpi	r24, 0x01	; 1
    15b0:	21 f4       	brne	.+8      	; 0x15ba <__vector_9+0xce>
			start_bit = 0;
    15b2:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <start_bit>
			PORTB &= ~_BV(PORTB2);  //PORTB3 to PORTB2
    15b6:	32 98       	cbi	0x06, 2	; 6
    15b8:	27 c0       	rjmp	.+78     	; 0x1608 <__vector_9+0x11c>
		}
		else {
			if (tx_bit_count<8){
    15ba:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <tx_bit_count>
    15be:	88 30       	cpi	r24, 0x08	; 8
    15c0:	80 f4       	brcc	.+32     	; 0x15e2 <__vector_9+0xf6>
				if (tx_char & (1<<tx_bit_count)){  //check the bit sending LSB first
    15c2:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <tx_char>
    15c6:	20 91 55 01 	lds	r18, 0x0155	; 0x800155 <tx_bit_count>
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	02 c0       	rjmp	.+4      	; 0x15d2 <__vector_9+0xe6>
    15ce:	95 95       	asr	r25
    15d0:	87 95       	ror	r24
    15d2:	2a 95       	dec	r18
    15d4:	e2 f7       	brpl	.-8      	; 0x15ce <__vector_9+0xe2>
    15d6:	80 ff       	sbrs	r24, 0
    15d8:	02 c0       	rjmp	.+4      	; 0x15de <__vector_9+0xf2>
					PORTB |= _BV(PORTB2);
    15da:	32 9a       	sbi	0x06, 2	; 6
    15dc:	10 c0       	rjmp	.+32     	; 0x15fe <__vector_9+0x112>
				}
				else{
					PORTB &= ~_BV(PORTB2);
    15de:	32 98       	cbi	0x06, 2	; 6
    15e0:	0e c0       	rjmp	.+28     	; 0x15fe <__vector_9+0x112>
				}
			}
			else if (tx_bit_count == 8){
    15e2:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <tx_bit_count>
    15e6:	88 30       	cpi	r24, 0x08	; 8
    15e8:	51 f4       	brne	.+20     	; 0x15fe <__vector_9+0x112>
				PORTB |= _BV(PORTB2);        //send stop bit
    15ea:	32 9a       	sbi	0x06, 2	; 6
				TIMSK1 &= ~(1<<OCIE1A);		//stop the bit timer
    15ec:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
    15f0:	8d 7f       	andi	r24, 0xFD	; 253
    15f2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
				sending = 0;
    15f6:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <sending>
				spi_disable = 0;
    15fa:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <spi_disable>
			}
			tx_bit_count++;
    15fe:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <tx_bit_count>
    1602:	8f 5f       	subi	r24, 0xFF	; 255
    1604:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <tx_bit_count>
		
	}
	//
	//sei();
	
}
    1608:	9f 91       	pop	r25
    160a:	8f 91       	pop	r24
    160c:	5f 91       	pop	r21
    160e:	4f 91       	pop	r20
    1610:	3f 91       	pop	r19
    1612:	2f 91       	pop	r18
    1614:	0f 90       	pop	r0
    1616:	0f be       	out	0x3f, r0	; 63
    1618:	0f 90       	pop	r0
    161a:	1f 90       	pop	r1
    161c:	18 95       	reti

0000161e <__vector_12>:

//ISR (TIMER1_COMPA_vect)
ISR (TIMER0_COMPA_vect)
{
    161e:	1f 92       	push	r1
    1620:	0f 92       	push	r0
    1622:	0f b6       	in	r0, 0x3f	; 63
    1624:	0f 92       	push	r0
    1626:	11 24       	eor	r1, r1
    1628:	8f 93       	push	r24
	/*disable interrupts, should we or allow NMI of tamper switch detect? */
	//cli();
	//sei();
	
	TCNT0 = 0x00;
    162a:	16 bc       	out	0x26, r1	; 38
	int i;
	//PORTC ^= _BV(PORTC6);		//toggle gp6 to check on progress
	TIMSK0 &= ~(1<<OCIE0A);		//stop the  timer
    162c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
    1630:	8d 7f       	andi	r24, 0xFD	; 253
    1632:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
	TIFR0 |= (1<<OCF0A);
    1636:	a9 9a       	sbi	0x15, 1	; 21
	if (spi_to_flag) {
    1638:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <spi_to_flag>
    163c:	88 23       	and	r24, r24
    163e:	59 f0       	breq	.+22     	; 0x1656 <__vector_12+0x38>
		spi_to--;
    1640:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <spi_to>
    1644:	81 50       	subi	r24, 0x01	; 1
    1646:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <spi_to>
		if (spi_to == 0){
    164a:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <spi_to>
    164e:	81 11       	cpse	r24, r1
    1650:	02 c0       	rjmp	.+4      	; 0x1656 <__vector_12+0x38>
			spi_to_flag = 0;
    1652:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <spi_to_flag>
		}
	}
	if (fifo_delay_flag) {
    1656:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <fifo_delay_flag>
    165a:	88 23       	and	r24, r24
    165c:	89 f0       	breq	.+34     	; 0x1680 <__vector_12+0x62>
		fifo_delay--;
    165e:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <fifo_delay>
    1662:	81 50       	subi	r24, 0x01	; 1
    1664:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <fifo_delay>
		if (fifo_delay == 0){
    1668:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <fifo_delay>
    166c:	81 11       	cpse	r24, r1
    166e:	03 c0       	rjmp	.+6      	; 0x1676 <__vector_12+0x58>
			fifo_delay_flag = 0;
    1670:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <fifo_delay_flag>
    1674:	05 c0       	rjmp	.+10     	; 0x1680 <__vector_12+0x62>
		}
		else {
			TIMSK0 |= (1<<OCIE0A);
    1676:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
    167a:	82 60       	ori	r24, 0x02	; 2
    167c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
		}
	}
	usart_to = 0;
    1680:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <usart_to>
	
    1684:	8f 91       	pop	r24
    1686:	0f 90       	pop	r0
    1688:	0f be       	out	0x3f, r0	; 63
    168a:	0f 90       	pop	r0
    168c:	1f 90       	pop	r1
    168e:	18 95       	reti

00001690 <__fixsfsi>:
    1690:	04 d0       	rcall	.+8      	; 0x169a <__fixunssfsi>
    1692:	68 94       	set
    1694:	b1 11       	cpse	r27, r1
    1696:	8d c0       	rjmp	.+282    	; 0x17b2 <__fp_szero>
    1698:	08 95       	ret

0000169a <__fixunssfsi>:
    169a:	70 d0       	rcall	.+224    	; 0x177c <__fp_splitA>
    169c:	88 f0       	brcs	.+34     	; 0x16c0 <__fixunssfsi+0x26>
    169e:	9f 57       	subi	r25, 0x7F	; 127
    16a0:	90 f0       	brcs	.+36     	; 0x16c6 <__fixunssfsi+0x2c>
    16a2:	b9 2f       	mov	r27, r25
    16a4:	99 27       	eor	r25, r25
    16a6:	b7 51       	subi	r27, 0x17	; 23
    16a8:	a0 f0       	brcs	.+40     	; 0x16d2 <__fixunssfsi+0x38>
    16aa:	d1 f0       	breq	.+52     	; 0x16e0 <__fixunssfsi+0x46>
    16ac:	66 0f       	add	r22, r22
    16ae:	77 1f       	adc	r23, r23
    16b0:	88 1f       	adc	r24, r24
    16b2:	99 1f       	adc	r25, r25
    16b4:	1a f0       	brmi	.+6      	; 0x16bc <__fixunssfsi+0x22>
    16b6:	ba 95       	dec	r27
    16b8:	c9 f7       	brne	.-14     	; 0x16ac <__fixunssfsi+0x12>
    16ba:	12 c0       	rjmp	.+36     	; 0x16e0 <__fixunssfsi+0x46>
    16bc:	b1 30       	cpi	r27, 0x01	; 1
    16be:	81 f0       	breq	.+32     	; 0x16e0 <__fixunssfsi+0x46>
    16c0:	77 d0       	rcall	.+238    	; 0x17b0 <__fp_zero>
    16c2:	b1 e0       	ldi	r27, 0x01	; 1
    16c4:	08 95       	ret
    16c6:	74 c0       	rjmp	.+232    	; 0x17b0 <__fp_zero>
    16c8:	67 2f       	mov	r22, r23
    16ca:	78 2f       	mov	r23, r24
    16cc:	88 27       	eor	r24, r24
    16ce:	b8 5f       	subi	r27, 0xF8	; 248
    16d0:	39 f0       	breq	.+14     	; 0x16e0 <__fixunssfsi+0x46>
    16d2:	b9 3f       	cpi	r27, 0xF9	; 249
    16d4:	cc f3       	brlt	.-14     	; 0x16c8 <__fixunssfsi+0x2e>
    16d6:	86 95       	lsr	r24
    16d8:	77 95       	ror	r23
    16da:	67 95       	ror	r22
    16dc:	b3 95       	inc	r27
    16de:	d9 f7       	brne	.-10     	; 0x16d6 <__fixunssfsi+0x3c>
    16e0:	3e f4       	brtc	.+14     	; 0x16f0 <__fixunssfsi+0x56>
    16e2:	90 95       	com	r25
    16e4:	80 95       	com	r24
    16e6:	70 95       	com	r23
    16e8:	61 95       	neg	r22
    16ea:	7f 4f       	sbci	r23, 0xFF	; 255
    16ec:	8f 4f       	sbci	r24, 0xFF	; 255
    16ee:	9f 4f       	sbci	r25, 0xFF	; 255
    16f0:	08 95       	ret

000016f2 <__floatunsisf>:
    16f2:	e8 94       	clt
    16f4:	09 c0       	rjmp	.+18     	; 0x1708 <__floatsisf+0x12>

000016f6 <__floatsisf>:
    16f6:	97 fb       	bst	r25, 7
    16f8:	3e f4       	brtc	.+14     	; 0x1708 <__floatsisf+0x12>
    16fa:	90 95       	com	r25
    16fc:	80 95       	com	r24
    16fe:	70 95       	com	r23
    1700:	61 95       	neg	r22
    1702:	7f 4f       	sbci	r23, 0xFF	; 255
    1704:	8f 4f       	sbci	r24, 0xFF	; 255
    1706:	9f 4f       	sbci	r25, 0xFF	; 255
    1708:	99 23       	and	r25, r25
    170a:	a9 f0       	breq	.+42     	; 0x1736 <__floatsisf+0x40>
    170c:	f9 2f       	mov	r31, r25
    170e:	96 e9       	ldi	r25, 0x96	; 150
    1710:	bb 27       	eor	r27, r27
    1712:	93 95       	inc	r25
    1714:	f6 95       	lsr	r31
    1716:	87 95       	ror	r24
    1718:	77 95       	ror	r23
    171a:	67 95       	ror	r22
    171c:	b7 95       	ror	r27
    171e:	f1 11       	cpse	r31, r1
    1720:	f8 cf       	rjmp	.-16     	; 0x1712 <__floatsisf+0x1c>
    1722:	fa f4       	brpl	.+62     	; 0x1762 <__floatsisf+0x6c>
    1724:	bb 0f       	add	r27, r27
    1726:	11 f4       	brne	.+4      	; 0x172c <__floatsisf+0x36>
    1728:	60 ff       	sbrs	r22, 0
    172a:	1b c0       	rjmp	.+54     	; 0x1762 <__floatsisf+0x6c>
    172c:	6f 5f       	subi	r22, 0xFF	; 255
    172e:	7f 4f       	sbci	r23, 0xFF	; 255
    1730:	8f 4f       	sbci	r24, 0xFF	; 255
    1732:	9f 4f       	sbci	r25, 0xFF	; 255
    1734:	16 c0       	rjmp	.+44     	; 0x1762 <__floatsisf+0x6c>
    1736:	88 23       	and	r24, r24
    1738:	11 f0       	breq	.+4      	; 0x173e <__floatsisf+0x48>
    173a:	96 e9       	ldi	r25, 0x96	; 150
    173c:	11 c0       	rjmp	.+34     	; 0x1760 <__floatsisf+0x6a>
    173e:	77 23       	and	r23, r23
    1740:	21 f0       	breq	.+8      	; 0x174a <__floatsisf+0x54>
    1742:	9e e8       	ldi	r25, 0x8E	; 142
    1744:	87 2f       	mov	r24, r23
    1746:	76 2f       	mov	r23, r22
    1748:	05 c0       	rjmp	.+10     	; 0x1754 <__floatsisf+0x5e>
    174a:	66 23       	and	r22, r22
    174c:	71 f0       	breq	.+28     	; 0x176a <__floatsisf+0x74>
    174e:	96 e8       	ldi	r25, 0x86	; 134
    1750:	86 2f       	mov	r24, r22
    1752:	70 e0       	ldi	r23, 0x00	; 0
    1754:	60 e0       	ldi	r22, 0x00	; 0
    1756:	2a f0       	brmi	.+10     	; 0x1762 <__floatsisf+0x6c>
    1758:	9a 95       	dec	r25
    175a:	66 0f       	add	r22, r22
    175c:	77 1f       	adc	r23, r23
    175e:	88 1f       	adc	r24, r24
    1760:	da f7       	brpl	.-10     	; 0x1758 <__floatsisf+0x62>
    1762:	88 0f       	add	r24, r24
    1764:	96 95       	lsr	r25
    1766:	87 95       	ror	r24
    1768:	97 f9       	bld	r25, 7
    176a:	08 95       	ret

0000176c <__fp_split3>:
    176c:	57 fd       	sbrc	r21, 7
    176e:	90 58       	subi	r25, 0x80	; 128
    1770:	44 0f       	add	r20, r20
    1772:	55 1f       	adc	r21, r21
    1774:	59 f0       	breq	.+22     	; 0x178c <__fp_splitA+0x10>
    1776:	5f 3f       	cpi	r21, 0xFF	; 255
    1778:	71 f0       	breq	.+28     	; 0x1796 <__fp_splitA+0x1a>
    177a:	47 95       	ror	r20

0000177c <__fp_splitA>:
    177c:	88 0f       	add	r24, r24
    177e:	97 fb       	bst	r25, 7
    1780:	99 1f       	adc	r25, r25
    1782:	61 f0       	breq	.+24     	; 0x179c <__fp_splitA+0x20>
    1784:	9f 3f       	cpi	r25, 0xFF	; 255
    1786:	79 f0       	breq	.+30     	; 0x17a6 <__fp_splitA+0x2a>
    1788:	87 95       	ror	r24
    178a:	08 95       	ret
    178c:	12 16       	cp	r1, r18
    178e:	13 06       	cpc	r1, r19
    1790:	14 06       	cpc	r1, r20
    1792:	55 1f       	adc	r21, r21
    1794:	f2 cf       	rjmp	.-28     	; 0x177a <__fp_split3+0xe>
    1796:	46 95       	lsr	r20
    1798:	f1 df       	rcall	.-30     	; 0x177c <__fp_splitA>
    179a:	08 c0       	rjmp	.+16     	; 0x17ac <__fp_splitA+0x30>
    179c:	16 16       	cp	r1, r22
    179e:	17 06       	cpc	r1, r23
    17a0:	18 06       	cpc	r1, r24
    17a2:	99 1f       	adc	r25, r25
    17a4:	f1 cf       	rjmp	.-30     	; 0x1788 <__fp_splitA+0xc>
    17a6:	86 95       	lsr	r24
    17a8:	71 05       	cpc	r23, r1
    17aa:	61 05       	cpc	r22, r1
    17ac:	08 94       	sec
    17ae:	08 95       	ret

000017b0 <__fp_zero>:
    17b0:	e8 94       	clt

000017b2 <__fp_szero>:
    17b2:	bb 27       	eor	r27, r27
    17b4:	66 27       	eor	r22, r22
    17b6:	77 27       	eor	r23, r23
    17b8:	cb 01       	movw	r24, r22
    17ba:	97 f9       	bld	r25, 7
    17bc:	08 95       	ret

000017be <__mulsf3>:
    17be:	0a d0       	rcall	.+20     	; 0x17d4 <__mulsf3x>
    17c0:	80 c0       	rjmp	.+256    	; 0x18c2 <__fp_round>
    17c2:	71 d0       	rcall	.+226    	; 0x18a6 <__fp_pscA>
    17c4:	28 f0       	brcs	.+10     	; 0x17d0 <__mulsf3+0x12>
    17c6:	76 d0       	rcall	.+236    	; 0x18b4 <__fp_pscB>
    17c8:	18 f0       	brcs	.+6      	; 0x17d0 <__mulsf3+0x12>
    17ca:	95 23       	and	r25, r21
    17cc:	09 f0       	breq	.+2      	; 0x17d0 <__mulsf3+0x12>
    17ce:	62 c0       	rjmp	.+196    	; 0x1894 <__fp_inf>
    17d0:	67 c0       	rjmp	.+206    	; 0x18a0 <__fp_nan>
    17d2:	ef cf       	rjmp	.-34     	; 0x17b2 <__fp_szero>

000017d4 <__mulsf3x>:
    17d4:	cb df       	rcall	.-106    	; 0x176c <__fp_split3>
    17d6:	a8 f3       	brcs	.-22     	; 0x17c2 <__mulsf3+0x4>

000017d8 <__mulsf3_pse>:
    17d8:	99 23       	and	r25, r25
    17da:	d9 f3       	breq	.-10     	; 0x17d2 <__mulsf3+0x14>
    17dc:	55 23       	and	r21, r21
    17de:	c9 f3       	breq	.-14     	; 0x17d2 <__mulsf3+0x14>
    17e0:	95 0f       	add	r25, r21
    17e2:	50 e0       	ldi	r21, 0x00	; 0
    17e4:	55 1f       	adc	r21, r21
    17e6:	aa 27       	eor	r26, r26
    17e8:	ee 27       	eor	r30, r30
    17ea:	ff 27       	eor	r31, r31
    17ec:	bb 27       	eor	r27, r27
    17ee:	00 24       	eor	r0, r0
    17f0:	08 94       	sec
    17f2:	67 95       	ror	r22
    17f4:	20 f4       	brcc	.+8      	; 0x17fe <__mulsf3_pse+0x26>
    17f6:	e2 0f       	add	r30, r18
    17f8:	f3 1f       	adc	r31, r19
    17fa:	b4 1f       	adc	r27, r20
    17fc:	0a 1e       	adc	r0, r26
    17fe:	22 0f       	add	r18, r18
    1800:	33 1f       	adc	r19, r19
    1802:	44 1f       	adc	r20, r20
    1804:	aa 1f       	adc	r26, r26
    1806:	66 95       	lsr	r22
    1808:	a9 f7       	brne	.-22     	; 0x17f4 <__mulsf3_pse+0x1c>
    180a:	77 95       	ror	r23
    180c:	30 f4       	brcc	.+12     	; 0x181a <__mulsf3_pse+0x42>
    180e:	f3 0f       	add	r31, r19
    1810:	b4 1f       	adc	r27, r20
    1812:	0a 1e       	adc	r0, r26
    1814:	12 1e       	adc	r1, r18
    1816:	08 f4       	brcc	.+2      	; 0x181a <__mulsf3_pse+0x42>
    1818:	63 95       	inc	r22
    181a:	33 0f       	add	r19, r19
    181c:	44 1f       	adc	r20, r20
    181e:	aa 1f       	adc	r26, r26
    1820:	22 1f       	adc	r18, r18
    1822:	76 95       	lsr	r23
    1824:	99 f7       	brne	.-26     	; 0x180c <__mulsf3_pse+0x34>
    1826:	87 95       	ror	r24
    1828:	20 f4       	brcc	.+8      	; 0x1832 <__mulsf3_pse+0x5a>
    182a:	b4 0f       	add	r27, r20
    182c:	0a 1e       	adc	r0, r26
    182e:	12 1e       	adc	r1, r18
    1830:	63 1f       	adc	r22, r19
    1832:	44 0f       	add	r20, r20
    1834:	aa 1f       	adc	r26, r26
    1836:	22 1f       	adc	r18, r18
    1838:	33 1f       	adc	r19, r19
    183a:	86 95       	lsr	r24
    183c:	a9 f7       	brne	.-22     	; 0x1828 <__mulsf3_pse+0x50>
    183e:	86 2f       	mov	r24, r22
    1840:	71 2d       	mov	r23, r1
    1842:	60 2d       	mov	r22, r0
    1844:	11 24       	eor	r1, r1
    1846:	9f 57       	subi	r25, 0x7F	; 127
    1848:	50 40       	sbci	r21, 0x00	; 0
    184a:	8a f0       	brmi	.+34     	; 0x186e <__mulsf3_pse+0x96>
    184c:	e1 f0       	breq	.+56     	; 0x1886 <__mulsf3_pse+0xae>
    184e:	88 23       	and	r24, r24
    1850:	4a f0       	brmi	.+18     	; 0x1864 <__mulsf3_pse+0x8c>
    1852:	ee 0f       	add	r30, r30
    1854:	ff 1f       	adc	r31, r31
    1856:	bb 1f       	adc	r27, r27
    1858:	66 1f       	adc	r22, r22
    185a:	77 1f       	adc	r23, r23
    185c:	88 1f       	adc	r24, r24
    185e:	91 50       	subi	r25, 0x01	; 1
    1860:	50 40       	sbci	r21, 0x00	; 0
    1862:	a9 f7       	brne	.-22     	; 0x184e <__mulsf3_pse+0x76>
    1864:	9e 3f       	cpi	r25, 0xFE	; 254
    1866:	51 05       	cpc	r21, r1
    1868:	70 f0       	brcs	.+28     	; 0x1886 <__mulsf3_pse+0xae>
    186a:	14 c0       	rjmp	.+40     	; 0x1894 <__fp_inf>
    186c:	a2 cf       	rjmp	.-188    	; 0x17b2 <__fp_szero>
    186e:	5f 3f       	cpi	r21, 0xFF	; 255
    1870:	ec f3       	brlt	.-6      	; 0x186c <__mulsf3_pse+0x94>
    1872:	98 3e       	cpi	r25, 0xE8	; 232
    1874:	dc f3       	brlt	.-10     	; 0x186c <__mulsf3_pse+0x94>
    1876:	86 95       	lsr	r24
    1878:	77 95       	ror	r23
    187a:	67 95       	ror	r22
    187c:	b7 95       	ror	r27
    187e:	f7 95       	ror	r31
    1880:	e7 95       	ror	r30
    1882:	9f 5f       	subi	r25, 0xFF	; 255
    1884:	c1 f7       	brne	.-16     	; 0x1876 <__mulsf3_pse+0x9e>
    1886:	fe 2b       	or	r31, r30
    1888:	88 0f       	add	r24, r24
    188a:	91 1d       	adc	r25, r1
    188c:	96 95       	lsr	r25
    188e:	87 95       	ror	r24
    1890:	97 f9       	bld	r25, 7
    1892:	08 95       	ret

00001894 <__fp_inf>:
    1894:	97 f9       	bld	r25, 7
    1896:	9f 67       	ori	r25, 0x7F	; 127
    1898:	80 e8       	ldi	r24, 0x80	; 128
    189a:	70 e0       	ldi	r23, 0x00	; 0
    189c:	60 e0       	ldi	r22, 0x00	; 0
    189e:	08 95       	ret

000018a0 <__fp_nan>:
    18a0:	9f ef       	ldi	r25, 0xFF	; 255
    18a2:	80 ec       	ldi	r24, 0xC0	; 192
    18a4:	08 95       	ret

000018a6 <__fp_pscA>:
    18a6:	00 24       	eor	r0, r0
    18a8:	0a 94       	dec	r0
    18aa:	16 16       	cp	r1, r22
    18ac:	17 06       	cpc	r1, r23
    18ae:	18 06       	cpc	r1, r24
    18b0:	09 06       	cpc	r0, r25
    18b2:	08 95       	ret

000018b4 <__fp_pscB>:
    18b4:	00 24       	eor	r0, r0
    18b6:	0a 94       	dec	r0
    18b8:	12 16       	cp	r1, r18
    18ba:	13 06       	cpc	r1, r19
    18bc:	14 06       	cpc	r1, r20
    18be:	05 06       	cpc	r0, r21
    18c0:	08 95       	ret

000018c2 <__fp_round>:
    18c2:	09 2e       	mov	r0, r25
    18c4:	03 94       	inc	r0
    18c6:	00 0c       	add	r0, r0
    18c8:	11 f4       	brne	.+4      	; 0x18ce <__fp_round+0xc>
    18ca:	88 23       	and	r24, r24
    18cc:	52 f0       	brmi	.+20     	; 0x18e2 <__fp_round+0x20>
    18ce:	bb 0f       	add	r27, r27
    18d0:	40 f4       	brcc	.+16     	; 0x18e2 <__fp_round+0x20>
    18d2:	bf 2b       	or	r27, r31
    18d4:	11 f4       	brne	.+4      	; 0x18da <__fp_round+0x18>
    18d6:	60 ff       	sbrs	r22, 0
    18d8:	04 c0       	rjmp	.+8      	; 0x18e2 <__fp_round+0x20>
    18da:	6f 5f       	subi	r22, 0xFF	; 255
    18dc:	7f 4f       	sbci	r23, 0xFF	; 255
    18de:	8f 4f       	sbci	r24, 0xFF	; 255
    18e0:	9f 4f       	sbci	r25, 0xFF	; 255
    18e2:	08 95       	ret

000018e4 <_exit>:
    18e4:	f8 94       	cli

000018e6 <__stop_program>:
    18e6:	ff cf       	rjmp	.-2      	; 0x18e6 <__stop_program>
